// Code generated by go-swagger; DO NOT EDIT.

package alert_definition_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alert definition controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alert definition controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAlertDefinition(params *CreateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAlertDefinitionCreated, error)

	DeleteAlertDefinition(params *DeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAlertDefinitionOK, error)

	ListAlertDefinition(params *ListAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAlertDefinitionOK, error)

	MultiDeleteAlertDefinition(params *MultiDeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteAlertDefinitionOK, error)

	ReadAlertDefinition(params *ReadAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAlertDefinitionOK, error)

	UpdateAlertDefinition(params *UpdateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlertDefinitionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAlertDefinition creates
*/
func (a *Client) CreateAlertDefinition(params *CreateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAlertDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAlertDefinition",
		Method:             "POST",
		PathPattern:        "/alertDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAlertDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAlertDefinition deletes
*/
func (a *Client) DeleteAlertDefinition(params *DeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAlertDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlertDefinition",
		Method:             "DELETE",
		PathPattern:        "/alertDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAlertDefinition lists
*/
func (a *Client) ListAlertDefinition(params *ListAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAlertDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAlertDefinition",
		Method:             "GET",
		PathPattern:        "/alertDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAlertDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteAlertDefinition multis delete
*/
func (a *Client) MultiDeleteAlertDefinition(params *MultiDeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteAlertDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteAlertDefinition",
		Method:             "DELETE",
		PathPattern:        "/alertDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteAlertDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAlertDefinition reads
*/
func (a *Client) ReadAlertDefinition(params *ReadAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAlertDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAlertDefinition",
		Method:             "GET",
		PathPattern:        "/alertDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAlertDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAlertDefinition updates
*/
func (a *Client) UpdateAlertDefinition(params *UpdateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlertDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlertDefinition",
		Method:             "PUT",
		PathPattern:        "/alertDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAlertDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
