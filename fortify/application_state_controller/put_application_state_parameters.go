// Code generated by go-swagger; DO NOT EDIT.

package application_state_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// NewPutApplicationStateParams creates a new PutApplicationStateParams object
// with the default values initialized.
func NewPutApplicationStateParams() *PutApplicationStateParams {
	var ()
	return &PutApplicationStateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutApplicationStateParamsWithTimeout creates a new PutApplicationStateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutApplicationStateParamsWithTimeout(timeout time.Duration) *PutApplicationStateParams {
	var ()
	return &PutApplicationStateParams{

		timeout: timeout,
	}
}

// NewPutApplicationStateParamsWithContext creates a new PutApplicationStateParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutApplicationStateParamsWithContext(ctx context.Context) *PutApplicationStateParams {
	var ()
	return &PutApplicationStateParams{

		Context: ctx,
	}
}

// NewPutApplicationStateParamsWithHTTPClient creates a new PutApplicationStateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutApplicationStateParamsWithHTTPClient(client *http.Client) *PutApplicationStateParams {
	var ()
	return &PutApplicationStateParams{
		HTTPClient: client,
	}
}

/*PutApplicationStateParams contains all the parameters to send to the API endpoint
for the put application state operation typically these are written to a http.Request
*/
type PutApplicationStateParams struct {

	/*ApplicationState
	  applicationState

	*/
	ApplicationState *models.ApplicationState

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put application state params
func (o *PutApplicationStateParams) WithTimeout(timeout time.Duration) *PutApplicationStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put application state params
func (o *PutApplicationStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put application state params
func (o *PutApplicationStateParams) WithContext(ctx context.Context) *PutApplicationStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put application state params
func (o *PutApplicationStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put application state params
func (o *PutApplicationStateParams) WithHTTPClient(client *http.Client) *PutApplicationStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put application state params
func (o *PutApplicationStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationState adds the applicationState to the put application state params
func (o *PutApplicationStateParams) WithApplicationState(applicationState *models.ApplicationState) *PutApplicationStateParams {
	o.SetApplicationState(applicationState)
	return o
}

// SetApplicationState adds the applicationState to the put application state params
func (o *PutApplicationStateParams) SetApplicationState(applicationState *models.ApplicationState) {
	o.ApplicationState = applicationState
}

// WriteToRequest writes these params to a swagger request
func (o *PutApplicationStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationState != nil {
		if err := r.SetBodyParam(o.ApplicationState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
