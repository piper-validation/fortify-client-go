// Code generated by go-swagger; DO NOT EDIT.

package artifact_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ApproveArtifactReader is a Reader for the ApproveArtifact structure.
type ApproveArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApproveArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApproveArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApproveArtifactUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewApproveArtifactForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApproveArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewApproveArtifactConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApproveArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewApproveArtifactOK creates a ApproveArtifactOK with default headers values
func NewApproveArtifactOK() *ApproveArtifactOK {
	return &ApproveArtifactOK{}
}

/*ApproveArtifactOK handles this case with default header values.

OK
*/
type ApproveArtifactOK struct {
	Payload *models.APIResultVoid
}

func (o *ApproveArtifactOK) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactOK  %+v", 200, o.Payload)
}

func (o *ApproveArtifactOK) GetPayload() *models.APIResultVoid {
	return o.Payload
}

func (o *ApproveArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactBadRequest creates a ApproveArtifactBadRequest with default headers values
func NewApproveArtifactBadRequest() *ApproveArtifactBadRequest {
	return &ApproveArtifactBadRequest{}
}

/*ApproveArtifactBadRequest handles this case with default header values.

Bad Request
*/
type ApproveArtifactBadRequest struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactBadRequest) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactBadRequest  %+v", 400, o.Payload)
}

func (o *ApproveArtifactBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactUnauthorized creates a ApproveArtifactUnauthorized with default headers values
func NewApproveArtifactUnauthorized() *ApproveArtifactUnauthorized {
	return &ApproveArtifactUnauthorized{}
}

/*ApproveArtifactUnauthorized handles this case with default header values.

Unauthorized
*/
type ApproveArtifactUnauthorized struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactUnauthorized) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactUnauthorized  %+v", 401, o.Payload)
}

func (o *ApproveArtifactUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactForbidden creates a ApproveArtifactForbidden with default headers values
func NewApproveArtifactForbidden() *ApproveArtifactForbidden {
	return &ApproveArtifactForbidden{}
}

/*ApproveArtifactForbidden handles this case with default header values.

Forbidden
*/
type ApproveArtifactForbidden struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactForbidden) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactForbidden  %+v", 403, o.Payload)
}

func (o *ApproveArtifactForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactNotFound creates a ApproveArtifactNotFound with default headers values
func NewApproveArtifactNotFound() *ApproveArtifactNotFound {
	return &ApproveArtifactNotFound{}
}

/*ApproveArtifactNotFound handles this case with default header values.

Not Found
*/
type ApproveArtifactNotFound struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactNotFound) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactNotFound  %+v", 404, o.Payload)
}

func (o *ApproveArtifactNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactConflict creates a ApproveArtifactConflict with default headers values
func NewApproveArtifactConflict() *ApproveArtifactConflict {
	return &ApproveArtifactConflict{}
}

/*ApproveArtifactConflict handles this case with default header values.

Conflict
*/
type ApproveArtifactConflict struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactConflict) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactConflict  %+v", 409, o.Payload)
}

func (o *ApproveArtifactConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApproveArtifactInternalServerError creates a ApproveArtifactInternalServerError with default headers values
func NewApproveArtifactInternalServerError() *ApproveArtifactInternalServerError {
	return &ApproveArtifactInternalServerError{}
}

/*ApproveArtifactInternalServerError handles this case with default header values.

Internal Server Error
*/
type ApproveArtifactInternalServerError struct {
	Payload *models.APIResult
}

func (o *ApproveArtifactInternalServerError) Error() string {
	return fmt.Sprintf("[POST /artifacts/action/approve][%d] approveArtifactInternalServerError  %+v", 500, o.Payload)
}

func (o *ApproveArtifactInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ApproveArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
