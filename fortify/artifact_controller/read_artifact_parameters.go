// Code generated by go-swagger; DO NOT EDIT.

package artifact_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadArtifactParams creates a new ReadArtifactParams object
// with the default values initialized.
func NewReadArtifactParams() *ReadArtifactParams {
	var ()
	return &ReadArtifactParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadArtifactParamsWithTimeout creates a new ReadArtifactParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadArtifactParamsWithTimeout(timeout time.Duration) *ReadArtifactParams {
	var ()
	return &ReadArtifactParams{

		timeout: timeout,
	}
}

// NewReadArtifactParamsWithContext creates a new ReadArtifactParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadArtifactParamsWithContext(ctx context.Context) *ReadArtifactParams {
	var ()
	return &ReadArtifactParams{

		Context: ctx,
	}
}

// NewReadArtifactParamsWithHTTPClient creates a new ReadArtifactParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadArtifactParamsWithHTTPClient(client *http.Client) *ReadArtifactParams {
	var ()
	return &ReadArtifactParams{
		HTTPClient: client,
	}
}

/*ReadArtifactParams contains all the parameters to send to the API endpoint
for the read artifact operation typically these are written to a http.Request
*/
type ReadArtifactParams struct {

	/*Embed
	  Fields to embed

	*/
	Embed *string
	/*Fields
	  Output fields

	*/
	Fields *string
	/*ID
	  id

	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read artifact params
func (o *ReadArtifactParams) WithTimeout(timeout time.Duration) *ReadArtifactParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read artifact params
func (o *ReadArtifactParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read artifact params
func (o *ReadArtifactParams) WithContext(ctx context.Context) *ReadArtifactParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read artifact params
func (o *ReadArtifactParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read artifact params
func (o *ReadArtifactParams) WithHTTPClient(client *http.Client) *ReadArtifactParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read artifact params
func (o *ReadArtifactParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmbed adds the embed to the read artifact params
func (o *ReadArtifactParams) WithEmbed(embed *string) *ReadArtifactParams {
	o.SetEmbed(embed)
	return o
}

// SetEmbed adds the embed to the read artifact params
func (o *ReadArtifactParams) SetEmbed(embed *string) {
	o.Embed = embed
}

// WithFields adds the fields to the read artifact params
func (o *ReadArtifactParams) WithFields(fields *string) *ReadArtifactParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the read artifact params
func (o *ReadArtifactParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithID adds the id to the read artifact params
func (o *ReadArtifactParams) WithID(id int64) *ReadArtifactParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the read artifact params
func (o *ReadArtifactParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *ReadArtifactParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Embed != nil {

		// query param embed
		var qrEmbed string
		if o.Embed != nil {
			qrEmbed = *o.Embed
		}
		qEmbed := qrEmbed
		if qEmbed != "" {
			if err := r.SetQueryParam("embed", qEmbed); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
