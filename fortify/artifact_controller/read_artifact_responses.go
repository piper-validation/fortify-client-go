// Code generated by go-swagger; DO NOT EDIT.

package artifact_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadArtifactReader is a Reader for the ReadArtifact structure.
type ReadArtifactReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadArtifactReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadArtifactOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadArtifactBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadArtifactUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadArtifactForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadArtifactNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadArtifactConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadArtifactInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadArtifactOK creates a ReadArtifactOK with default headers values
func NewReadArtifactOK() *ReadArtifactOK {
	return &ReadArtifactOK{}
}

/*ReadArtifactOK handles this case with default header values.

OK
*/
type ReadArtifactOK struct {
	Payload *models.APIResultArtifact
}

func (o *ReadArtifactOK) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactOK  %+v", 200, o.Payload)
}

func (o *ReadArtifactOK) GetPayload() *models.APIResultArtifact {
	return o.Payload
}

func (o *ReadArtifactOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultArtifact)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactBadRequest creates a ReadArtifactBadRequest with default headers values
func NewReadArtifactBadRequest() *ReadArtifactBadRequest {
	return &ReadArtifactBadRequest{}
}

/*ReadArtifactBadRequest handles this case with default header values.

Bad Request
*/
type ReadArtifactBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadArtifactBadRequest) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactBadRequest  %+v", 400, o.Payload)
}

func (o *ReadArtifactBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactUnauthorized creates a ReadArtifactUnauthorized with default headers values
func NewReadArtifactUnauthorized() *ReadArtifactUnauthorized {
	return &ReadArtifactUnauthorized{}
}

/*ReadArtifactUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadArtifactUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadArtifactUnauthorized) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadArtifactUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactForbidden creates a ReadArtifactForbidden with default headers values
func NewReadArtifactForbidden() *ReadArtifactForbidden {
	return &ReadArtifactForbidden{}
}

/*ReadArtifactForbidden handles this case with default header values.

Forbidden
*/
type ReadArtifactForbidden struct {
	Payload *models.APIResult
}

func (o *ReadArtifactForbidden) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactForbidden  %+v", 403, o.Payload)
}

func (o *ReadArtifactForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactNotFound creates a ReadArtifactNotFound with default headers values
func NewReadArtifactNotFound() *ReadArtifactNotFound {
	return &ReadArtifactNotFound{}
}

/*ReadArtifactNotFound handles this case with default header values.

Not Found
*/
type ReadArtifactNotFound struct {
	Payload *models.APIResult
}

func (o *ReadArtifactNotFound) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactNotFound  %+v", 404, o.Payload)
}

func (o *ReadArtifactNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactConflict creates a ReadArtifactConflict with default headers values
func NewReadArtifactConflict() *ReadArtifactConflict {
	return &ReadArtifactConflict{}
}

/*ReadArtifactConflict handles this case with default header values.

Conflict
*/
type ReadArtifactConflict struct {
	Payload *models.APIResult
}

func (o *ReadArtifactConflict) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactConflict  %+v", 409, o.Payload)
}

func (o *ReadArtifactConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadArtifactInternalServerError creates a ReadArtifactInternalServerError with default headers values
func NewReadArtifactInternalServerError() *ReadArtifactInternalServerError {
	return &ReadArtifactInternalServerError{}
}

/*ReadArtifactInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadArtifactInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadArtifactInternalServerError) Error() string {
	return fmt.Sprintf("[GET /artifacts/{id}][%d] readArtifactInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadArtifactInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadArtifactInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
