// Code generated by go-swagger; DO NOT EDIT.

package artifact_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadArtifactOfProjectVersionParams creates a new UploadArtifactOfProjectVersionParams object
// with the default values initialized.
func NewUploadArtifactOfProjectVersionParams() *UploadArtifactOfProjectVersionParams {
	var ()
	return &UploadArtifactOfProjectVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadArtifactOfProjectVersionParamsWithTimeout creates a new UploadArtifactOfProjectVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadArtifactOfProjectVersionParamsWithTimeout(timeout time.Duration) *UploadArtifactOfProjectVersionParams {
	var ()
	return &UploadArtifactOfProjectVersionParams{

		timeout: timeout,
	}
}

// NewUploadArtifactOfProjectVersionParamsWithContext creates a new UploadArtifactOfProjectVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadArtifactOfProjectVersionParamsWithContext(ctx context.Context) *UploadArtifactOfProjectVersionParams {
	var ()
	return &UploadArtifactOfProjectVersionParams{

		Context: ctx,
	}
}

// NewUploadArtifactOfProjectVersionParamsWithHTTPClient creates a new UploadArtifactOfProjectVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadArtifactOfProjectVersionParamsWithHTTPClient(client *http.Client) *UploadArtifactOfProjectVersionParams {
	var ()
	return &UploadArtifactOfProjectVersionParams{
		HTTPClient: client,
	}
}

/*UploadArtifactOfProjectVersionParams contains all the parameters to send to the API endpoint
for the upload artifact of project version operation typically these are written to a http.Request
*/
type UploadArtifactOfProjectVersionParams struct {

	/*EngineType
	  engineType

	*/
	EngineType *string
	/*File
	  file

	*/
	File runtime.NamedReadCloser
	/*ParentID
	  parentId

	*/
	ParentID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithTimeout(timeout time.Duration) *UploadArtifactOfProjectVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithContext(ctx context.Context) *UploadArtifactOfProjectVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithHTTPClient(client *http.Client) *UploadArtifactOfProjectVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEngineType adds the engineType to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithEngineType(engineType *string) *UploadArtifactOfProjectVersionParams {
	o.SetEngineType(engineType)
	return o
}

// SetEngineType adds the engineType to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetEngineType(engineType *string) {
	o.EngineType = engineType
}

// WithFile adds the file to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithFile(file runtime.NamedReadCloser) *UploadArtifactOfProjectVersionParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithParentID adds the parentID to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) WithParentID(parentID int64) *UploadArtifactOfProjectVersionParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the upload artifact of project version params
func (o *UploadArtifactOfProjectVersionParams) SetParentID(parentID int64) {
	o.ParentID = parentID
}

// WriteToRequest writes these params to a swagger request
func (o *UploadArtifactOfProjectVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EngineType != nil {

		// query param engineType
		var qrEngineType string
		if o.EngineType != nil {
			qrEngineType = *o.EngineType
		}
		qEngineType := qrEngineType
		if qEngineType != "" {
			if err := r.SetQueryParam("engineType", qEngineType); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param parentId
	if err := r.SetPathParam("parentId", swag.FormatInt64(o.ParentID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
