// Code generated by go-swagger; DO NOT EDIT.

package attribute_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attribute of project version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attribute of project version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAttributeOfProjectVersion(params *CreateAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAttributeOfProjectVersionCreated, error)

	ListAttributeOfProjectVersion(params *ListAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAttributeOfProjectVersionOK, error)

	ReadAttributeOfProjectVersion(params *ReadAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAttributeOfProjectVersionOK, error)

	UpdateCollectionAttributeOfProjectVersion(params *UpdateCollectionAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCollectionAttributeOfProjectVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAttributeOfProjectVersion creates
*/
func (a *Client) CreateAttributeOfProjectVersion(params *CreateAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAttributeOfProjectVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAttributeOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAttributeOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAttributeOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAttributeOfProjectVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAttributeOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAttributeOfProjectVersion lists
*/
func (a *Client) ListAttributeOfProjectVersion(params *ListAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAttributeOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAttributeOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAttributeOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAttributeOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAttributeOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAttributeOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAttributeOfProjectVersion reads
*/
func (a *Client) ReadAttributeOfProjectVersion(params *ReadAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAttributeOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAttributeOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAttributeOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/attributes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAttributeOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAttributeOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAttributeOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCollectionAttributeOfProjectVersion updates collection
*/
func (a *Client) UpdateCollectionAttributeOfProjectVersion(params *UpdateCollectionAttributeOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCollectionAttributeOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectionAttributeOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCollectionAttributeOfProjectVersion",
		Method:             "PUT",
		PathPattern:        "/projectVersions/{parentId}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCollectionAttributeOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCollectionAttributeOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCollectionAttributeOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
