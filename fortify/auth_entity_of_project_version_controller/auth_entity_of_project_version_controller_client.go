// Code generated by go-swagger; DO NOT EDIT.

package auth_entity_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth entity of project version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth entity of project version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ListAuthEntityOfProjectVersion(params *ListAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthEntityOfProjectVersionOK, error)

	ReadAuthEntityOfProjectVersion(params *ReadAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAuthEntityOfProjectVersionOK, error)

	UpdateCollectionAuthEntityOfProjectVersion(params *UpdateCollectionAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCollectionAuthEntityOfProjectVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ListAuthEntityOfProjectVersion lists
*/
func (a *Client) ListAuthEntityOfProjectVersion(params *ListAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthEntityOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthEntityOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuthEntityOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/authEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAuthEntityOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthEntityOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAuthEntityOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAuthEntityOfProjectVersion reads
*/
func (a *Client) ReadAuthEntityOfProjectVersion(params *ReadAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadAuthEntityOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAuthEntityOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAuthEntityOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/authEntities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAuthEntityOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAuthEntityOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAuthEntityOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCollectionAuthEntityOfProjectVersion updates collection
*/
func (a *Client) UpdateCollectionAuthEntityOfProjectVersion(params *UpdateCollectionAuthEntityOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCollectionAuthEntityOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectionAuthEntityOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCollectionAuthEntityOfProjectVersion",
		Method:             "PUT",
		PathPattern:        "/projectVersions/{parentId}/authEntities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCollectionAuthEntityOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCollectionAuthEntityOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCollectionAuthEntityOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
