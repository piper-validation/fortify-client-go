// Code generated by go-swagger; DO NOT EDIT.

package auth_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth token controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth token controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthToken(params *CreateAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthTokenCreated, error)

	DeleteAuthToken(params *DeleteAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthTokenOK, error)

	ListAuthToken(params *ListAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthTokenOK, error)

	MultiDeleteAuthToken(params *MultiDeleteAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteAuthTokenOK, error)

	RevokeAuthToken(params *RevokeAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeAuthTokenOK, error)

	UpdateAuthToken(params *UpdateAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAuthToken creates
*/
func (a *Client) CreateAuthToken(params *CreateAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthToken",
		Method:             "POST",
		PathPattern:        "/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuthTokenCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAuthToken deletes
*/
func (a *Client) DeleteAuthToken(params *DeleteAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthToken",
		Method:             "DELETE",
		PathPattern:        "/tokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAuthToken lists
*/
func (a *Client) ListAuthToken(params *ListAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuthToken",
		Method:             "GET",
		PathPattern:        "/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteAuthToken revokes authentication tokens using o n e of two choices 1 all tokens owned by the requesting user o r 2 list of token ids
*/
func (a *Client) MultiDeleteAuthToken(params *MultiDeleteAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteAuthToken",
		Method:             "DELETE",
		PathPattern:        "/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeAuthToken revokes authentication tokens by value
*/
func (a *Client) RevokeAuthToken(params *RevokeAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*RevokeAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokeAuthToken",
		Method:             "POST",
		PathPattern:        "/tokens/action/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAuthToken updates
*/
func (a *Client) UpdateAuthToken(params *UpdateAuthTokenParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuthToken",
		Method:             "PUT",
		PathPattern:        "/tokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAuthTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAuthToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
