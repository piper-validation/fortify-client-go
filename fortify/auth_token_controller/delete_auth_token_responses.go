// Code generated by go-swagger; DO NOT EDIT.

package auth_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// DeleteAuthTokenReader is a Reader for the DeleteAuthToken structure.
type DeleteAuthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAuthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAuthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteAuthTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteAuthTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAuthTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAuthTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteAuthTokenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAuthTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAuthTokenOK creates a DeleteAuthTokenOK with default headers values
func NewDeleteAuthTokenOK() *DeleteAuthTokenOK {
	return &DeleteAuthTokenOK{}
}

/*DeleteAuthTokenOK handles this case with default header values.

OK
*/
type DeleteAuthTokenOK struct {
	Payload *models.APIResultVoid
}

func (o *DeleteAuthTokenOK) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenOK  %+v", 200, o.Payload)
}

func (o *DeleteAuthTokenOK) GetPayload() *models.APIResultVoid {
	return o.Payload
}

func (o *DeleteAuthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenBadRequest creates a DeleteAuthTokenBadRequest with default headers values
func NewDeleteAuthTokenBadRequest() *DeleteAuthTokenBadRequest {
	return &DeleteAuthTokenBadRequest{}
}

/*DeleteAuthTokenBadRequest handles this case with default header values.

Bad Request
*/
type DeleteAuthTokenBadRequest struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAuthTokenBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenUnauthorized creates a DeleteAuthTokenUnauthorized with default headers values
func NewDeleteAuthTokenUnauthorized() *DeleteAuthTokenUnauthorized {
	return &DeleteAuthTokenUnauthorized{}
}

/*DeleteAuthTokenUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteAuthTokenUnauthorized struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAuthTokenUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenForbidden creates a DeleteAuthTokenForbidden with default headers values
func NewDeleteAuthTokenForbidden() *DeleteAuthTokenForbidden {
	return &DeleteAuthTokenForbidden{}
}

/*DeleteAuthTokenForbidden handles this case with default header values.

Forbidden
*/
type DeleteAuthTokenForbidden struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenForbidden  %+v", 403, o.Payload)
}

func (o *DeleteAuthTokenForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenNotFound creates a DeleteAuthTokenNotFound with default headers values
func NewDeleteAuthTokenNotFound() *DeleteAuthTokenNotFound {
	return &DeleteAuthTokenNotFound{}
}

/*DeleteAuthTokenNotFound handles this case with default header values.

Not Found
*/
type DeleteAuthTokenNotFound struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAuthTokenNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenConflict creates a DeleteAuthTokenConflict with default headers values
func NewDeleteAuthTokenConflict() *DeleteAuthTokenConflict {
	return &DeleteAuthTokenConflict{}
}

/*DeleteAuthTokenConflict handles this case with default header values.

Conflict
*/
type DeleteAuthTokenConflict struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenConflict) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenConflict  %+v", 409, o.Payload)
}

func (o *DeleteAuthTokenConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAuthTokenInternalServerError creates a DeleteAuthTokenInternalServerError with default headers values
func NewDeleteAuthTokenInternalServerError() *DeleteAuthTokenInternalServerError {
	return &DeleteAuthTokenInternalServerError{}
}

/*DeleteAuthTokenInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteAuthTokenInternalServerError struct {
	Payload *models.APIResult
}

func (o *DeleteAuthTokenInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /tokens/{id}][%d] deleteAuthTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteAuthTokenInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *DeleteAuthTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
