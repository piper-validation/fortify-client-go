// Code generated by go-swagger; DO NOT EDIT.

package auth_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListAuthTokenReader is a Reader for the ListAuthToken structure.
type ListAuthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAuthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAuthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAuthTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAuthTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAuthTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAuthTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListAuthTokenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAuthTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAuthTokenOK creates a ListAuthTokenOK with default headers values
func NewListAuthTokenOK() *ListAuthTokenOK {
	return &ListAuthTokenOK{}
}

/*ListAuthTokenOK handles this case with default header values.

OK
*/
type ListAuthTokenOK struct {
	Payload *models.APIResultListAuthenticationToken
}

func (o *ListAuthTokenOK) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenOK  %+v", 200, o.Payload)
}

func (o *ListAuthTokenOK) GetPayload() *models.APIResultListAuthenticationToken {
	return o.Payload
}

func (o *ListAuthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListAuthenticationToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenBadRequest creates a ListAuthTokenBadRequest with default headers values
func NewListAuthTokenBadRequest() *ListAuthTokenBadRequest {
	return &ListAuthTokenBadRequest{}
}

/*ListAuthTokenBadRequest handles this case with default header values.

Bad Request
*/
type ListAuthTokenBadRequest struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenBadRequest) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenBadRequest  %+v", 400, o.Payload)
}

func (o *ListAuthTokenBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenUnauthorized creates a ListAuthTokenUnauthorized with default headers values
func NewListAuthTokenUnauthorized() *ListAuthTokenUnauthorized {
	return &ListAuthTokenUnauthorized{}
}

/*ListAuthTokenUnauthorized handles this case with default header values.

Unauthorized
*/
type ListAuthTokenUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAuthTokenUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenForbidden creates a ListAuthTokenForbidden with default headers values
func NewListAuthTokenForbidden() *ListAuthTokenForbidden {
	return &ListAuthTokenForbidden{}
}

/*ListAuthTokenForbidden handles this case with default header values.

Forbidden
*/
type ListAuthTokenForbidden struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenForbidden) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenForbidden  %+v", 403, o.Payload)
}

func (o *ListAuthTokenForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenNotFound creates a ListAuthTokenNotFound with default headers values
func NewListAuthTokenNotFound() *ListAuthTokenNotFound {
	return &ListAuthTokenNotFound{}
}

/*ListAuthTokenNotFound handles this case with default header values.

Not Found
*/
type ListAuthTokenNotFound struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenNotFound) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenNotFound  %+v", 404, o.Payload)
}

func (o *ListAuthTokenNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenConflict creates a ListAuthTokenConflict with default headers values
func NewListAuthTokenConflict() *ListAuthTokenConflict {
	return &ListAuthTokenConflict{}
}

/*ListAuthTokenConflict handles this case with default header values.

Conflict
*/
type ListAuthTokenConflict struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenConflict) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenConflict  %+v", 409, o.Payload)
}

func (o *ListAuthTokenConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthTokenInternalServerError creates a ListAuthTokenInternalServerError with default headers values
func NewListAuthTokenInternalServerError() *ListAuthTokenInternalServerError {
	return &ListAuthTokenInternalServerError{}
}

/*ListAuthTokenInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListAuthTokenInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListAuthTokenInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tokens][%d] listAuthTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAuthTokenInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListAuthTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
