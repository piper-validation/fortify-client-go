// Code generated by go-swagger; DO NOT EDIT.

package auth_token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UpdateAuthTokenReader is a Reader for the UpdateAuthToken structure.
type UpdateAuthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAuthTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAuthTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAuthTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateAuthTokenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAuthTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAuthTokenOK creates a UpdateAuthTokenOK with default headers values
func NewUpdateAuthTokenOK() *UpdateAuthTokenOK {
	return &UpdateAuthTokenOK{}
}

/*UpdateAuthTokenOK handles this case with default header values.

OK
*/
type UpdateAuthTokenOK struct {
	Payload *models.APIResultAuthenticationToken
}

func (o *UpdateAuthTokenOK) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenOK  %+v", 200, o.Payload)
}

func (o *UpdateAuthTokenOK) GetPayload() *models.APIResultAuthenticationToken {
	return o.Payload
}

func (o *UpdateAuthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultAuthenticationToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenBadRequest creates a UpdateAuthTokenBadRequest with default headers values
func NewUpdateAuthTokenBadRequest() *UpdateAuthTokenBadRequest {
	return &UpdateAuthTokenBadRequest{}
}

/*UpdateAuthTokenBadRequest handles this case with default header values.

Bad Request
*/
type UpdateAuthTokenBadRequest struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAuthTokenBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenUnauthorized creates a UpdateAuthTokenUnauthorized with default headers values
func NewUpdateAuthTokenUnauthorized() *UpdateAuthTokenUnauthorized {
	return &UpdateAuthTokenUnauthorized{}
}

/*UpdateAuthTokenUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateAuthTokenUnauthorized struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAuthTokenUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenForbidden creates a UpdateAuthTokenForbidden with default headers values
func NewUpdateAuthTokenForbidden() *UpdateAuthTokenForbidden {
	return &UpdateAuthTokenForbidden{}
}

/*UpdateAuthTokenForbidden handles this case with default header values.

Forbidden
*/
type UpdateAuthTokenForbidden struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenForbidden) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAuthTokenForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenNotFound creates a UpdateAuthTokenNotFound with default headers values
func NewUpdateAuthTokenNotFound() *UpdateAuthTokenNotFound {
	return &UpdateAuthTokenNotFound{}
}

/*UpdateAuthTokenNotFound handles this case with default header values.

Not Found
*/
type UpdateAuthTokenNotFound struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenNotFound) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAuthTokenNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenConflict creates a UpdateAuthTokenConflict with default headers values
func NewUpdateAuthTokenConflict() *UpdateAuthTokenConflict {
	return &UpdateAuthTokenConflict{}
}

/*UpdateAuthTokenConflict handles this case with default header values.

Conflict
*/
type UpdateAuthTokenConflict struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenConflict) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenConflict  %+v", 409, o.Payload)
}

func (o *UpdateAuthTokenConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthTokenInternalServerError creates a UpdateAuthTokenInternalServerError with default headers values
func NewUpdateAuthTokenInternalServerError() *UpdateAuthTokenInternalServerError {
	return &UpdateAuthTokenInternalServerError{}
}

/*UpdateAuthTokenInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateAuthTokenInternalServerError struct {
	Payload *models.APIResult
}

func (o *UpdateAuthTokenInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /tokens/{id}][%d] updateAuthTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAuthTokenInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateAuthTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
