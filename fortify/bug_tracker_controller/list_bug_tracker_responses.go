// Code generated by go-swagger; DO NOT EDIT.

package bug_tracker_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListBugTrackerReader is a Reader for the ListBugTracker structure.
type ListBugTrackerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListBugTrackerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListBugTrackerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListBugTrackerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListBugTrackerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListBugTrackerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListBugTrackerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListBugTrackerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListBugTrackerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListBugTrackerOK creates a ListBugTrackerOK with default headers values
func NewListBugTrackerOK() *ListBugTrackerOK {
	return &ListBugTrackerOK{}
}

/*ListBugTrackerOK handles this case with default header values.

OK
*/
type ListBugTrackerOK struct {
	Payload *models.APIResultListBugTracker
}

func (o *ListBugTrackerOK) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerOK  %+v", 200, o.Payload)
}

func (o *ListBugTrackerOK) GetPayload() *models.APIResultListBugTracker {
	return o.Payload
}

func (o *ListBugTrackerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListBugTracker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerBadRequest creates a ListBugTrackerBadRequest with default headers values
func NewListBugTrackerBadRequest() *ListBugTrackerBadRequest {
	return &ListBugTrackerBadRequest{}
}

/*ListBugTrackerBadRequest handles this case with default header values.

Bad Request
*/
type ListBugTrackerBadRequest struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerBadRequest) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerBadRequest  %+v", 400, o.Payload)
}

func (o *ListBugTrackerBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerUnauthorized creates a ListBugTrackerUnauthorized with default headers values
func NewListBugTrackerUnauthorized() *ListBugTrackerUnauthorized {
	return &ListBugTrackerUnauthorized{}
}

/*ListBugTrackerUnauthorized handles this case with default header values.

Unauthorized
*/
type ListBugTrackerUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerUnauthorized  %+v", 401, o.Payload)
}

func (o *ListBugTrackerUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerForbidden creates a ListBugTrackerForbidden with default headers values
func NewListBugTrackerForbidden() *ListBugTrackerForbidden {
	return &ListBugTrackerForbidden{}
}

/*ListBugTrackerForbidden handles this case with default header values.

Forbidden
*/
type ListBugTrackerForbidden struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerForbidden) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerForbidden  %+v", 403, o.Payload)
}

func (o *ListBugTrackerForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerNotFound creates a ListBugTrackerNotFound with default headers values
func NewListBugTrackerNotFound() *ListBugTrackerNotFound {
	return &ListBugTrackerNotFound{}
}

/*ListBugTrackerNotFound handles this case with default header values.

Not Found
*/
type ListBugTrackerNotFound struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerNotFound) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerNotFound  %+v", 404, o.Payload)
}

func (o *ListBugTrackerNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerConflict creates a ListBugTrackerConflict with default headers values
func NewListBugTrackerConflict() *ListBugTrackerConflict {
	return &ListBugTrackerConflict{}
}

/*ListBugTrackerConflict handles this case with default header values.

Conflict
*/
type ListBugTrackerConflict struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerConflict) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerConflict  %+v", 409, o.Payload)
}

func (o *ListBugTrackerConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBugTrackerInternalServerError creates a ListBugTrackerInternalServerError with default headers values
func NewListBugTrackerInternalServerError() *ListBugTrackerInternalServerError {
	return &ListBugTrackerInternalServerError{}
}

/*ListBugTrackerInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListBugTrackerInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListBugTrackerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bugtrackers][%d] listBugTrackerInternalServerError  %+v", 500, o.Payload)
}

func (o *ListBugTrackerInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListBugTrackerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
