// Code generated by go-swagger; DO NOT EDIT.

package cloud_pool_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud pool controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud pool controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCloudPool(params *CreateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudPoolCreated, error)

	DeleteCloudPool(params *DeleteCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudPoolOK, error)

	ListCloudPool(params *ListCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudPoolOK, error)

	ReadCloudPool(params *ReadCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ReadCloudPoolOK, error)

	UpdateCloudPool(params *UpdateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudPoolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCloudPool creates
*/
func (a *Client) CreateCloudPool(params *CreateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudPoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudPool",
		Method:             "POST",
		PathPattern:        "/cloudpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudPoolCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCloudPool deletes
*/
func (a *Client) DeleteCloudPool(params *DeleteCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudPool",
		Method:             "DELETE",
		PathPattern:        "/cloudpools/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCloudPool lists
*/
func (a *Client) ListCloudPool(params *ListCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudPool",
		Method:             "GET",
		PathPattern:        "/cloudpools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCloudPool reads
*/
func (a *Client) ReadCloudPool(params *ReadCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ReadCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCloudPool",
		Method:             "GET",
		PathPattern:        "/cloudpools/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCloudPool updates
*/
func (a *Client) UpdateCloudPool(params *UpdateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudPool",
		Method:             "PUT",
		PathPattern:        "/cloudpools/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
