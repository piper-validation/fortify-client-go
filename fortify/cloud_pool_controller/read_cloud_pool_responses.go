// Code generated by go-swagger; DO NOT EDIT.

package cloud_pool_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadCloudPoolReader is a Reader for the ReadCloudPool structure.
type ReadCloudPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadCloudPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadCloudPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadCloudPoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadCloudPoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadCloudPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadCloudPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadCloudPoolConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadCloudPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadCloudPoolOK creates a ReadCloudPoolOK with default headers values
func NewReadCloudPoolOK() *ReadCloudPoolOK {
	return &ReadCloudPoolOK{}
}

/*ReadCloudPoolOK handles this case with default header values.

OK
*/
type ReadCloudPoolOK struct {
	Payload *models.APIResultCloudPool
}

func (o *ReadCloudPoolOK) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolOK  %+v", 200, o.Payload)
}

func (o *ReadCloudPoolOK) GetPayload() *models.APIResultCloudPool {
	return o.Payload
}

func (o *ReadCloudPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultCloudPool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolBadRequest creates a ReadCloudPoolBadRequest with default headers values
func NewReadCloudPoolBadRequest() *ReadCloudPoolBadRequest {
	return &ReadCloudPoolBadRequest{}
}

/*ReadCloudPoolBadRequest handles this case with default header values.

Bad Request
*/
type ReadCloudPoolBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolBadRequest  %+v", 400, o.Payload)
}

func (o *ReadCloudPoolBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolUnauthorized creates a ReadCloudPoolUnauthorized with default headers values
func NewReadCloudPoolUnauthorized() *ReadCloudPoolUnauthorized {
	return &ReadCloudPoolUnauthorized{}
}

/*ReadCloudPoolUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadCloudPoolUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadCloudPoolUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolForbidden creates a ReadCloudPoolForbidden with default headers values
func NewReadCloudPoolForbidden() *ReadCloudPoolForbidden {
	return &ReadCloudPoolForbidden{}
}

/*ReadCloudPoolForbidden handles this case with default header values.

Forbidden
*/
type ReadCloudPoolForbidden struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolForbidden) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolForbidden  %+v", 403, o.Payload)
}

func (o *ReadCloudPoolForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolNotFound creates a ReadCloudPoolNotFound with default headers values
func NewReadCloudPoolNotFound() *ReadCloudPoolNotFound {
	return &ReadCloudPoolNotFound{}
}

/*ReadCloudPoolNotFound handles this case with default header values.

Not Found
*/
type ReadCloudPoolNotFound struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolNotFound) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolNotFound  %+v", 404, o.Payload)
}

func (o *ReadCloudPoolNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolConflict creates a ReadCloudPoolConflict with default headers values
func NewReadCloudPoolConflict() *ReadCloudPoolConflict {
	return &ReadCloudPoolConflict{}
}

/*ReadCloudPoolConflict handles this case with default header values.

Conflict
*/
type ReadCloudPoolConflict struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolConflict) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolConflict  %+v", 409, o.Payload)
}

func (o *ReadCloudPoolConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudPoolInternalServerError creates a ReadCloudPoolInternalServerError with default headers values
func NewReadCloudPoolInternalServerError() *ReadCloudPoolInternalServerError {
	return &ReadCloudPoolInternalServerError{}
}

/*ReadCloudPoolInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadCloudPoolInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadCloudPoolInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloudpools/{uuid}][%d] readCloudPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadCloudPoolInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
