// Code generated by go-swagger; DO NOT EDIT.

package cloud_worker_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadCloudWorkerReader is a Reader for the ReadCloudWorker structure.
type ReadCloudWorkerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadCloudWorkerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadCloudWorkerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadCloudWorkerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadCloudWorkerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadCloudWorkerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadCloudWorkerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadCloudWorkerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadCloudWorkerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadCloudWorkerOK creates a ReadCloudWorkerOK with default headers values
func NewReadCloudWorkerOK() *ReadCloudWorkerOK {
	return &ReadCloudWorkerOK{}
}

/*ReadCloudWorkerOK handles this case with default header values.

OK
*/
type ReadCloudWorkerOK struct {
	Payload *models.APIResultCloudWorker
}

func (o *ReadCloudWorkerOK) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerOK  %+v", 200, o.Payload)
}

func (o *ReadCloudWorkerOK) GetPayload() *models.APIResultCloudWorker {
	return o.Payload
}

func (o *ReadCloudWorkerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultCloudWorker)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerBadRequest creates a ReadCloudWorkerBadRequest with default headers values
func NewReadCloudWorkerBadRequest() *ReadCloudWorkerBadRequest {
	return &ReadCloudWorkerBadRequest{}
}

/*ReadCloudWorkerBadRequest handles this case with default header values.

Bad Request
*/
type ReadCloudWorkerBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerBadRequest  %+v", 400, o.Payload)
}

func (o *ReadCloudWorkerBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerUnauthorized creates a ReadCloudWorkerUnauthorized with default headers values
func NewReadCloudWorkerUnauthorized() *ReadCloudWorkerUnauthorized {
	return &ReadCloudWorkerUnauthorized{}
}

/*ReadCloudWorkerUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadCloudWorkerUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadCloudWorkerUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerForbidden creates a ReadCloudWorkerForbidden with default headers values
func NewReadCloudWorkerForbidden() *ReadCloudWorkerForbidden {
	return &ReadCloudWorkerForbidden{}
}

/*ReadCloudWorkerForbidden handles this case with default header values.

Forbidden
*/
type ReadCloudWorkerForbidden struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerForbidden) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerForbidden  %+v", 403, o.Payload)
}

func (o *ReadCloudWorkerForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerNotFound creates a ReadCloudWorkerNotFound with default headers values
func NewReadCloudWorkerNotFound() *ReadCloudWorkerNotFound {
	return &ReadCloudWorkerNotFound{}
}

/*ReadCloudWorkerNotFound handles this case with default header values.

Not Found
*/
type ReadCloudWorkerNotFound struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerNotFound) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerNotFound  %+v", 404, o.Payload)
}

func (o *ReadCloudWorkerNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerConflict creates a ReadCloudWorkerConflict with default headers values
func NewReadCloudWorkerConflict() *ReadCloudWorkerConflict {
	return &ReadCloudWorkerConflict{}
}

/*ReadCloudWorkerConflict handles this case with default header values.

Conflict
*/
type ReadCloudWorkerConflict struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerConflict) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerConflict  %+v", 409, o.Payload)
}

func (o *ReadCloudWorkerConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCloudWorkerInternalServerError creates a ReadCloudWorkerInternalServerError with default headers values
func NewReadCloudWorkerInternalServerError() *ReadCloudWorkerInternalServerError {
	return &ReadCloudWorkerInternalServerError{}
}

/*ReadCloudWorkerInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadCloudWorkerInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadCloudWorkerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloudworkers/{uuid}][%d] readCloudWorkerInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadCloudWorkerInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCloudWorkerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
