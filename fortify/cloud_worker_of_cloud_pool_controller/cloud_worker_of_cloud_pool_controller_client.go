// Code generated by go-swagger; DO NOT EDIT.

package cloud_worker_of_cloud_pool_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud worker of cloud pool controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud worker of cloud pool controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssignCloudWorkerOfCloudPool(params *AssignCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*AssignCloudWorkerOfCloudPoolOK, error)

	DisableCloudWorkerOfCloudPool(params *DisableCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DisableCloudWorkerOfCloudPoolOK, error)

	ListCloudWorkerOfCloudPool(params *ListCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudWorkerOfCloudPoolOK, error)

	ReplaceCloudWorkerOfCloudPool(params *ReplaceCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceCloudWorkerOfCloudPoolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssignCloudWorkerOfCloudPool assigns workers to the cloud pool
*/
func (a *Client) AssignCloudWorkerOfCloudPool(params *AssignCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*AssignCloudWorkerOfCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignCloudWorkerOfCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignCloudWorkerOfCloudPool",
		Method:             "POST",
		PathPattern:        "/cloudpools/{parentId}/workers/action/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignCloudWorkerOfCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignCloudWorkerOfCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignCloudWorkerOfCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableCloudWorkerOfCloudPool disables workers in the cloud pool
*/
func (a *Client) DisableCloudWorkerOfCloudPool(params *DisableCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DisableCloudWorkerOfCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableCloudWorkerOfCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disableCloudWorkerOfCloudPool",
		Method:             "POST",
		PathPattern:        "/cloudpools/{parentId}/workers/action/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableCloudWorkerOfCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableCloudWorkerOfCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableCloudWorkerOfCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCloudWorkerOfCloudPool lists
*/
func (a *Client) ListCloudWorkerOfCloudPool(params *ListCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudWorkerOfCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudWorkerOfCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudWorkerOfCloudPool",
		Method:             "GET",
		PathPattern:        "/cloudpools/{parentId}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCloudWorkerOfCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCloudWorkerOfCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCloudWorkerOfCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCloudWorkerOfCloudPool replaces workers in the cloud pool
*/
func (a *Client) ReplaceCloudWorkerOfCloudPool(params *ReplaceCloudWorkerOfCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceCloudWorkerOfCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCloudWorkerOfCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCloudWorkerOfCloudPool",
		Method:             "POST",
		PathPattern:        "/cloudpools/{parentId}/workers/action/replace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCloudWorkerOfCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCloudWorkerOfCloudPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCloudWorkerOfCloudPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
