// Code generated by go-swagger; DO NOT EDIT.

package configuration_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new configuration controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configuration controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetConfiguration(params *GetConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigurationOK, error)

	GetFullTextIndexStatusConfiguration(params *GetFullTextIndexStatusConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetFullTextIndexStatusConfigurationOK, error)

	ReadConfiguration(params *ReadConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ReadConfigurationOK, error)

	RefreshAuditAssistantPoliciesConfiguration(params *RefreshAuditAssistantPoliciesConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshAuditAssistantPoliciesConfigurationOK, error)

	UpdateConfiguration(params *UpdateConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigurationOK, error)

	ValidateAuditAssistantConnectionConfiguration(params *ValidateAuditAssistantConnectionConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateAuditAssistantConnectionConfigurationOK, error)

	ValidateReportConnectionConfiguration(params *ValidateReportConnectionConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateReportConnectionConfigurationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetConfiguration gets
*/
func (a *Client) GetConfiguration(params *GetConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfiguration",
		Method:             "GET",
		PathPattern:        "/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFullTextIndexStatusConfiguration gets full text index status
*/
func (a *Client) GetFullTextIndexStatusConfiguration(params *GetFullTextIndexStatusConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetFullTextIndexStatusConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFullTextIndexStatusConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFullTextIndexStatusConfiguration",
		Method:             "GET",
		PathPattern:        "/configuration/searchIndex",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFullTextIndexStatusConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFullTextIndexStatusConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFullTextIndexStatusConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadConfiguration reads
*/
func (a *Client) ReadConfiguration(params *ReadConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ReadConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readConfiguration",
		Method:             "GET",
		PathPattern:        "/configuration/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshAuditAssistantPoliciesConfiguration refreshes prediction policies between audit assistant server and s s c
*/
func (a *Client) RefreshAuditAssistantPoliciesConfiguration(params *RefreshAuditAssistantPoliciesConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshAuditAssistantPoliciesConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshAuditAssistantPoliciesConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshAuditAssistantPoliciesConfiguration",
		Method:             "POST",
		PathPattern:        "/configuration/action/refreshAuditAssistantPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshAuditAssistantPoliciesConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshAuditAssistantPoliciesConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshAuditAssistantPoliciesConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConfiguration updates
*/
func (a *Client) UpdateConfiguration(params *UpdateConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateConfiguration",
		Method:             "PUT",
		PathPattern:        "/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateAuditAssistantConnectionConfiguration validates audit assistant connection
*/
func (a *Client) ValidateAuditAssistantConnectionConfiguration(params *ValidateAuditAssistantConnectionConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateAuditAssistantConnectionConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAuditAssistantConnectionConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateAuditAssistantConnectionConfiguration",
		Method:             "POST",
		PathPattern:        "/configuration/validateAuditAssistantConnection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAuditAssistantConnectionConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAuditAssistantConnectionConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateAuditAssistantConnectionConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateReportConnectionConfiguration validates report connection
*/
func (a *Client) ValidateReportConnectionConfiguration(params *ValidateReportConnectionConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateReportConnectionConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateReportConnectionConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateReportConnectionConfiguration",
		Method:             "POST",
		PathPattern:        "/configuration/validateReportConnection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateReportConnectionConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateReportConnectionConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateReportConnectionConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
