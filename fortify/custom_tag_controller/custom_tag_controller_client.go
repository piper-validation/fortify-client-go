// Code generated by go-swagger; DO NOT EDIT.

package custom_tag_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new custom tag controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom tag controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomTag(params *CreateCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomTagCreated, error)

	DeleteCustomTag(params *DeleteCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomTagOK, error)

	ListCustomTag(params *ListCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*ListCustomTagOK, error)

	MultiDeleteCustomTag(params *MultiDeleteCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteCustomTagOK, error)

	ReadCustomTag(params *ReadCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*ReadCustomTagOK, error)

	UpdateCustomTag(params *UpdateCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomTagOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCustomTag creates
*/
func (a *Client) CreateCustomTag(params *CreateCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCustomTagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCustomTag",
		Method:             "POST",
		PathPattern:        "/customTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomTagCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomTag deletes
*/
func (a *Client) DeleteCustomTag(params *DeleteCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomTag",
		Method:             "DELETE",
		PathPattern:        "/customTags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCustomTag lists
*/
func (a *Client) ListCustomTag(params *ListCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*ListCustomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCustomTag",
		Method:             "GET",
		PathPattern:        "/customTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteCustomTag multis delete
*/
func (a *Client) MultiDeleteCustomTag(params *MultiDeleteCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteCustomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteCustomTag",
		Method:             "DELETE",
		PathPattern:        "/customTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteCustomTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCustomTag reads
*/
func (a *Client) ReadCustomTag(params *ReadCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*ReadCustomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCustomTag",
		Method:             "GET",
		PathPattern:        "/customTags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCustomTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomTag updates
*/
func (a *Client) UpdateCustomTag(params *UpdateCustomTagParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomTag",
		Method:             "PUT",
		PathPattern:        "/customTags/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
