// Code generated by go-swagger; DO NOT EDIT.

package custom_tag_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadCustomTagReader is a Reader for the ReadCustomTag structure.
type ReadCustomTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadCustomTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadCustomTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadCustomTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadCustomTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadCustomTagForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadCustomTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadCustomTagConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadCustomTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadCustomTagOK creates a ReadCustomTagOK with default headers values
func NewReadCustomTagOK() *ReadCustomTagOK {
	return &ReadCustomTagOK{}
}

/*ReadCustomTagOK handles this case with default header values.

OK
*/
type ReadCustomTagOK struct {
	Payload *models.APIResultCustomTag
}

func (o *ReadCustomTagOK) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagOK  %+v", 200, o.Payload)
}

func (o *ReadCustomTagOK) GetPayload() *models.APIResultCustomTag {
	return o.Payload
}

func (o *ReadCustomTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultCustomTag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagBadRequest creates a ReadCustomTagBadRequest with default headers values
func NewReadCustomTagBadRequest() *ReadCustomTagBadRequest {
	return &ReadCustomTagBadRequest{}
}

/*ReadCustomTagBadRequest handles this case with default header values.

Bad Request
*/
type ReadCustomTagBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagBadRequest) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagBadRequest  %+v", 400, o.Payload)
}

func (o *ReadCustomTagBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagUnauthorized creates a ReadCustomTagUnauthorized with default headers values
func NewReadCustomTagUnauthorized() *ReadCustomTagUnauthorized {
	return &ReadCustomTagUnauthorized{}
}

/*ReadCustomTagUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadCustomTagUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagUnauthorized) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadCustomTagUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagForbidden creates a ReadCustomTagForbidden with default headers values
func NewReadCustomTagForbidden() *ReadCustomTagForbidden {
	return &ReadCustomTagForbidden{}
}

/*ReadCustomTagForbidden handles this case with default header values.

Forbidden
*/
type ReadCustomTagForbidden struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagForbidden) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagForbidden  %+v", 403, o.Payload)
}

func (o *ReadCustomTagForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagNotFound creates a ReadCustomTagNotFound with default headers values
func NewReadCustomTagNotFound() *ReadCustomTagNotFound {
	return &ReadCustomTagNotFound{}
}

/*ReadCustomTagNotFound handles this case with default header values.

Not Found
*/
type ReadCustomTagNotFound struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagNotFound) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagNotFound  %+v", 404, o.Payload)
}

func (o *ReadCustomTagNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagConflict creates a ReadCustomTagConflict with default headers values
func NewReadCustomTagConflict() *ReadCustomTagConflict {
	return &ReadCustomTagConflict{}
}

/*ReadCustomTagConflict handles this case with default header values.

Conflict
*/
type ReadCustomTagConflict struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagConflict) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagConflict  %+v", 409, o.Payload)
}

func (o *ReadCustomTagConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadCustomTagInternalServerError creates a ReadCustomTagInternalServerError with default headers values
func NewReadCustomTagInternalServerError() *ReadCustomTagInternalServerError {
	return &ReadCustomTagInternalServerError{}
}

/*ReadCustomTagInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadCustomTagInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadCustomTagInternalServerError) Error() string {
	return fmt.Sprintf("[GET /customTags/{id}][%d] readCustomTagInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadCustomTagInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadCustomTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
