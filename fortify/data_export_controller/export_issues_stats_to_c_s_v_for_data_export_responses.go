// Code generated by go-swagger; DO NOT EDIT.

package data_export_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ExportIssuesStatsToCSVForDataExportReader is a Reader for the ExportIssuesStatsToCSVForDataExport structure.
type ExportIssuesStatsToCSVForDataExportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportIssuesStatsToCSVForDataExportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportIssuesStatsToCSVForDataExportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExportIssuesStatsToCSVForDataExportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExportIssuesStatsToCSVForDataExportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportIssuesStatsToCSVForDataExportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportIssuesStatsToCSVForDataExportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewExportIssuesStatsToCSVForDataExportConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExportIssuesStatsToCSVForDataExportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExportIssuesStatsToCSVForDataExportOK creates a ExportIssuesStatsToCSVForDataExportOK with default headers values
func NewExportIssuesStatsToCSVForDataExportOK() *ExportIssuesStatsToCSVForDataExportOK {
	return &ExportIssuesStatsToCSVForDataExportOK{}
}

/*ExportIssuesStatsToCSVForDataExportOK handles this case with default header values.

OK
*/
type ExportIssuesStatsToCSVForDataExportOK struct {
	Payload *models.APIResultVoid
}

func (o *ExportIssuesStatsToCSVForDataExportOK) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportOK  %+v", 200, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportOK) GetPayload() *models.APIResultVoid {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportBadRequest creates a ExportIssuesStatsToCSVForDataExportBadRequest with default headers values
func NewExportIssuesStatsToCSVForDataExportBadRequest() *ExportIssuesStatsToCSVForDataExportBadRequest {
	return &ExportIssuesStatsToCSVForDataExportBadRequest{}
}

/*ExportIssuesStatsToCSVForDataExportBadRequest handles this case with default header values.

Bad Request
*/
type ExportIssuesStatsToCSVForDataExportBadRequest struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportBadRequest) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportBadRequest  %+v", 400, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportUnauthorized creates a ExportIssuesStatsToCSVForDataExportUnauthorized with default headers values
func NewExportIssuesStatsToCSVForDataExportUnauthorized() *ExportIssuesStatsToCSVForDataExportUnauthorized {
	return &ExportIssuesStatsToCSVForDataExportUnauthorized{}
}

/*ExportIssuesStatsToCSVForDataExportUnauthorized handles this case with default header values.

Unauthorized
*/
type ExportIssuesStatsToCSVForDataExportUnauthorized struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportForbidden creates a ExportIssuesStatsToCSVForDataExportForbidden with default headers values
func NewExportIssuesStatsToCSVForDataExportForbidden() *ExportIssuesStatsToCSVForDataExportForbidden {
	return &ExportIssuesStatsToCSVForDataExportForbidden{}
}

/*ExportIssuesStatsToCSVForDataExportForbidden handles this case with default header values.

Forbidden
*/
type ExportIssuesStatsToCSVForDataExportForbidden struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportForbidden) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportForbidden  %+v", 403, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportNotFound creates a ExportIssuesStatsToCSVForDataExportNotFound with default headers values
func NewExportIssuesStatsToCSVForDataExportNotFound() *ExportIssuesStatsToCSVForDataExportNotFound {
	return &ExportIssuesStatsToCSVForDataExportNotFound{}
}

/*ExportIssuesStatsToCSVForDataExportNotFound handles this case with default header values.

Not Found
*/
type ExportIssuesStatsToCSVForDataExportNotFound struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportNotFound) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportNotFound  %+v", 404, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportConflict creates a ExportIssuesStatsToCSVForDataExportConflict with default headers values
func NewExportIssuesStatsToCSVForDataExportConflict() *ExportIssuesStatsToCSVForDataExportConflict {
	return &ExportIssuesStatsToCSVForDataExportConflict{}
}

/*ExportIssuesStatsToCSVForDataExportConflict handles this case with default header values.

Conflict
*/
type ExportIssuesStatsToCSVForDataExportConflict struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportConflict) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportConflict  %+v", 409, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportIssuesStatsToCSVForDataExportInternalServerError creates a ExportIssuesStatsToCSVForDataExportInternalServerError with default headers values
func NewExportIssuesStatsToCSVForDataExportInternalServerError() *ExportIssuesStatsToCSVForDataExportInternalServerError {
	return &ExportIssuesStatsToCSVForDataExportInternalServerError{}
}

/*ExportIssuesStatsToCSVForDataExportInternalServerError handles this case with default header values.

Internal Server Error
*/
type ExportIssuesStatsToCSVForDataExportInternalServerError struct {
	Payload *models.APIResult
}

func (o *ExportIssuesStatsToCSVForDataExportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dataExports/action/exportIssueStatsToCsv][%d] exportIssuesStatsToCSVForDataExportInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportIssuesStatsToCSVForDataExportInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ExportIssuesStatsToCSVForDataExportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
