// Code generated by go-swagger; DO NOT EDIT.

package dynamic_scan_request_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dynamic scan request of project version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dynamic scan request of project version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelDynamicScanRequestOfProjectVersion(params *CancelDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CancelDynamicScanRequestOfProjectVersionOK, error)

	CreateDynamicScanRequestOfProjectVersion(params *CreateDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDynamicScanRequestOfProjectVersionCreated, error)

	ListDynamicScanRequestOfProjectVersion(params *ListDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListDynamicScanRequestOfProjectVersionOK, error)

	ReadDynamicScanRequestOfProjectVersion(params *ReadDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadDynamicScanRequestOfProjectVersionOK, error)

	UpdateDynamicScanRequestOfProjectVersion(params *UpdateDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDynamicScanRequestOfProjectVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelDynamicScanRequestOfProjectVersion cancels a dynamic scan request
*/
func (a *Client) CancelDynamicScanRequestOfProjectVersion(params *CancelDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CancelDynamicScanRequestOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelDynamicScanRequestOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelDynamicScanRequestOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/dynamicScanRequests/action/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelDynamicScanRequestOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelDynamicScanRequestOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelDynamicScanRequestOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDynamicScanRequestOfProjectVersion creates
*/
func (a *Client) CreateDynamicScanRequestOfProjectVersion(params *CreateDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDynamicScanRequestOfProjectVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDynamicScanRequestOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDynamicScanRequestOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/dynamicScanRequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDynamicScanRequestOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDynamicScanRequestOfProjectVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDynamicScanRequestOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDynamicScanRequestOfProjectVersion lists
*/
func (a *Client) ListDynamicScanRequestOfProjectVersion(params *ListDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListDynamicScanRequestOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDynamicScanRequestOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDynamicScanRequestOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/dynamicScanRequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDynamicScanRequestOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDynamicScanRequestOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDynamicScanRequestOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadDynamicScanRequestOfProjectVersion reads
*/
func (a *Client) ReadDynamicScanRequestOfProjectVersion(params *ReadDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadDynamicScanRequestOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDynamicScanRequestOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readDynamicScanRequestOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/dynamicScanRequests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDynamicScanRequestOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDynamicScanRequestOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readDynamicScanRequestOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDynamicScanRequestOfProjectVersion updates
*/
func (a *Client) UpdateDynamicScanRequestOfProjectVersion(params *UpdateDynamicScanRequestOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDynamicScanRequestOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDynamicScanRequestOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDynamicScanRequestOfProjectVersion",
		Method:             "PUT",
		PathPattern:        "/projectVersions/{parentId}/dynamicScanRequests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDynamicScanRequestOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDynamicScanRequestOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDynamicScanRequestOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
