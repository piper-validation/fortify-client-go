// Code generated by go-swagger; DO NOT EDIT.

package dynamic_scan_request_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// NewUpdateDynamicScanRequestOfProjectVersionParams creates a new UpdateDynamicScanRequestOfProjectVersionParams object
// with the default values initialized.
func NewUpdateDynamicScanRequestOfProjectVersionParams() *UpdateDynamicScanRequestOfProjectVersionParams {
	var ()
	return &UpdateDynamicScanRequestOfProjectVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateDynamicScanRequestOfProjectVersionParamsWithTimeout creates a new UpdateDynamicScanRequestOfProjectVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateDynamicScanRequestOfProjectVersionParamsWithTimeout(timeout time.Duration) *UpdateDynamicScanRequestOfProjectVersionParams {
	var ()
	return &UpdateDynamicScanRequestOfProjectVersionParams{

		timeout: timeout,
	}
}

// NewUpdateDynamicScanRequestOfProjectVersionParamsWithContext creates a new UpdateDynamicScanRequestOfProjectVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateDynamicScanRequestOfProjectVersionParamsWithContext(ctx context.Context) *UpdateDynamicScanRequestOfProjectVersionParams {
	var ()
	return &UpdateDynamicScanRequestOfProjectVersionParams{

		Context: ctx,
	}
}

// NewUpdateDynamicScanRequestOfProjectVersionParamsWithHTTPClient creates a new UpdateDynamicScanRequestOfProjectVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateDynamicScanRequestOfProjectVersionParamsWithHTTPClient(client *http.Client) *UpdateDynamicScanRequestOfProjectVersionParams {
	var ()
	return &UpdateDynamicScanRequestOfProjectVersionParams{
		HTTPClient: client,
	}
}

/*UpdateDynamicScanRequestOfProjectVersionParams contains all the parameters to send to the API endpoint
for the update dynamic scan request of project version operation typically these are written to a http.Request
*/
type UpdateDynamicScanRequestOfProjectVersionParams struct {

	/*ID
	  id

	*/
	ID int64
	/*ParentID
	  parentId

	*/
	ParentID int64
	/*Resource
	  resource

	*/
	Resource *models.DynamicScanRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithTimeout(timeout time.Duration) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithContext(ctx context.Context) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithHTTPClient(client *http.Client) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithID(id int64) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetID(id int64) {
	o.ID = id
}

// WithParentID adds the parentID to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithParentID(parentID int64) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetParentID(parentID int64) {
	o.ParentID = parentID
}

// WithResource adds the resource to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WithResource(resource *models.DynamicScanRequest) *UpdateDynamicScanRequestOfProjectVersionParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the update dynamic scan request of project version params
func (o *UpdateDynamicScanRequestOfProjectVersionParams) SetResource(resource *models.DynamicScanRequest) {
	o.Resource = resource
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateDynamicScanRequestOfProjectVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param parentId
	if err := r.SetPathParam("parentId", swag.FormatInt64(o.ParentID)); err != nil {
		return err
	}

	if o.Resource != nil {
		if err := r.SetBodyParam(o.Resource); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
