// Code generated by go-swagger; DO NOT EDIT.

package engine_type_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListEngineTypeReader is a Reader for the ListEngineType structure.
type ListEngineTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListEngineTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListEngineTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListEngineTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListEngineTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListEngineTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListEngineTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListEngineTypeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListEngineTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListEngineTypeOK creates a ListEngineTypeOK with default headers values
func NewListEngineTypeOK() *ListEngineTypeOK {
	return &ListEngineTypeOK{}
}

/*ListEngineTypeOK handles this case with default header values.

OK
*/
type ListEngineTypeOK struct {
	Payload *models.APIResultListEngineType
}

func (o *ListEngineTypeOK) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeOK  %+v", 200, o.Payload)
}

func (o *ListEngineTypeOK) GetPayload() *models.APIResultListEngineType {
	return o.Payload
}

func (o *ListEngineTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListEngineType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeBadRequest creates a ListEngineTypeBadRequest with default headers values
func NewListEngineTypeBadRequest() *ListEngineTypeBadRequest {
	return &ListEngineTypeBadRequest{}
}

/*ListEngineTypeBadRequest handles this case with default header values.

Bad Request
*/
type ListEngineTypeBadRequest struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeBadRequest) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeBadRequest  %+v", 400, o.Payload)
}

func (o *ListEngineTypeBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeUnauthorized creates a ListEngineTypeUnauthorized with default headers values
func NewListEngineTypeUnauthorized() *ListEngineTypeUnauthorized {
	return &ListEngineTypeUnauthorized{}
}

/*ListEngineTypeUnauthorized handles this case with default header values.

Unauthorized
*/
type ListEngineTypeUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeUnauthorized  %+v", 401, o.Payload)
}

func (o *ListEngineTypeUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeForbidden creates a ListEngineTypeForbidden with default headers values
func NewListEngineTypeForbidden() *ListEngineTypeForbidden {
	return &ListEngineTypeForbidden{}
}

/*ListEngineTypeForbidden handles this case with default header values.

Forbidden
*/
type ListEngineTypeForbidden struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeForbidden) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeForbidden  %+v", 403, o.Payload)
}

func (o *ListEngineTypeForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeNotFound creates a ListEngineTypeNotFound with default headers values
func NewListEngineTypeNotFound() *ListEngineTypeNotFound {
	return &ListEngineTypeNotFound{}
}

/*ListEngineTypeNotFound handles this case with default header values.

Not Found
*/
type ListEngineTypeNotFound struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeNotFound) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeNotFound  %+v", 404, o.Payload)
}

func (o *ListEngineTypeNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeConflict creates a ListEngineTypeConflict with default headers values
func NewListEngineTypeConflict() *ListEngineTypeConflict {
	return &ListEngineTypeConflict{}
}

/*ListEngineTypeConflict handles this case with default header values.

Conflict
*/
type ListEngineTypeConflict struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeConflict) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeConflict  %+v", 409, o.Payload)
}

func (o *ListEngineTypeConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEngineTypeInternalServerError creates a ListEngineTypeInternalServerError with default headers values
func NewListEngineTypeInternalServerError() *ListEngineTypeInternalServerError {
	return &ListEngineTypeInternalServerError{}
}

/*ListEngineTypeInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListEngineTypeInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListEngineTypeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /engineTypes][%d] listEngineTypeInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEngineTypeInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEngineTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
