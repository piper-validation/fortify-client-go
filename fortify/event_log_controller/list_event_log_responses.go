// Code generated by go-swagger; DO NOT EDIT.

package event_log_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListEventLogReader is a Reader for the ListEventLog structure.
type ListEventLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListEventLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListEventLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListEventLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListEventLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListEventLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListEventLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListEventLogConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListEventLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListEventLogOK creates a ListEventLogOK with default headers values
func NewListEventLogOK() *ListEventLogOK {
	return &ListEventLogOK{}
}

/*ListEventLogOK handles this case with default header values.

OK
*/
type ListEventLogOK struct {
	Payload *models.APIResultListEventLog
}

func (o *ListEventLogOK) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogOK  %+v", 200, o.Payload)
}

func (o *ListEventLogOK) GetPayload() *models.APIResultListEventLog {
	return o.Payload
}

func (o *ListEventLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListEventLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogBadRequest creates a ListEventLogBadRequest with default headers values
func NewListEventLogBadRequest() *ListEventLogBadRequest {
	return &ListEventLogBadRequest{}
}

/*ListEventLogBadRequest handles this case with default header values.

Bad Request
*/
type ListEventLogBadRequest struct {
	Payload *models.APIResult
}

func (o *ListEventLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogBadRequest  %+v", 400, o.Payload)
}

func (o *ListEventLogBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogUnauthorized creates a ListEventLogUnauthorized with default headers values
func NewListEventLogUnauthorized() *ListEventLogUnauthorized {
	return &ListEventLogUnauthorized{}
}

/*ListEventLogUnauthorized handles this case with default header values.

Unauthorized
*/
type ListEventLogUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListEventLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogUnauthorized  %+v", 401, o.Payload)
}

func (o *ListEventLogUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogForbidden creates a ListEventLogForbidden with default headers values
func NewListEventLogForbidden() *ListEventLogForbidden {
	return &ListEventLogForbidden{}
}

/*ListEventLogForbidden handles this case with default header values.

Forbidden
*/
type ListEventLogForbidden struct {
	Payload *models.APIResult
}

func (o *ListEventLogForbidden) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogForbidden  %+v", 403, o.Payload)
}

func (o *ListEventLogForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogNotFound creates a ListEventLogNotFound with default headers values
func NewListEventLogNotFound() *ListEventLogNotFound {
	return &ListEventLogNotFound{}
}

/*ListEventLogNotFound handles this case with default header values.

Not Found
*/
type ListEventLogNotFound struct {
	Payload *models.APIResult
}

func (o *ListEventLogNotFound) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogNotFound  %+v", 404, o.Payload)
}

func (o *ListEventLogNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogConflict creates a ListEventLogConflict with default headers values
func NewListEventLogConflict() *ListEventLogConflict {
	return &ListEventLogConflict{}
}

/*ListEventLogConflict handles this case with default header values.

Conflict
*/
type ListEventLogConflict struct {
	Payload *models.APIResult
}

func (o *ListEventLogConflict) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogConflict  %+v", 409, o.Payload)
}

func (o *ListEventLogConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventLogInternalServerError creates a ListEventLogInternalServerError with default headers values
func NewListEventLogInternalServerError() *ListEventLogInternalServerError {
	return &ListEventLogInternalServerError{}
}

/*ListEventLogInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListEventLogInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListEventLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventLogInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEventLogInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListEventLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
