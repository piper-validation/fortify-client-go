// Code generated by go-swagger; DO NOT EDIT.

package issue_aging_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListIssueAgingParams creates a new ListIssueAgingParams object
// with the default values initialized.
func NewListIssueAgingParams() *ListIssueAgingParams {
	var (
		limitDefault = int32(200)
		startDefault = int32(0)
	)
	return &ListIssueAgingParams{
		Limit: &limitDefault,
		Start: &startDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListIssueAgingParamsWithTimeout creates a new ListIssueAgingParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListIssueAgingParamsWithTimeout(timeout time.Duration) *ListIssueAgingParams {
	var (
		limitDefault = int32(200)
		startDefault = int32(0)
	)
	return &ListIssueAgingParams{
		Limit: &limitDefault,
		Start: &startDefault,

		timeout: timeout,
	}
}

// NewListIssueAgingParamsWithContext creates a new ListIssueAgingParams object
// with the default values initialized, and the ability to set a context for a request
func NewListIssueAgingParamsWithContext(ctx context.Context) *ListIssueAgingParams {
	var (
		limitDefault = int32(200)
		startDefault = int32(0)
	)
	return &ListIssueAgingParams{
		Limit: &limitDefault,
		Start: &startDefault,

		Context: ctx,
	}
}

// NewListIssueAgingParamsWithHTTPClient creates a new ListIssueAgingParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListIssueAgingParamsWithHTTPClient(client *http.Client) *ListIssueAgingParams {
	var (
		limitDefault = int32(200)
		startDefault = int32(0)
	)
	return &ListIssueAgingParams{
		Limit:      &limitDefault,
		Start:      &startDefault,
		HTTPClient: client,
	}
}

/*ListIssueAgingParams contains all the parameters to send to the API endpoint
for the list issue aging operation typically these are written to a http.Request
*/
type ListIssueAgingParams struct {

	/*Aggregateby
	  aggregateby

	*/
	Aggregateby *string
	/*AverageDaysToRemediate
	  averageDaysToRemediate

	*/
	AverageDaysToRemediate *string
	/*AverageDaysToReview
	  averageDaysToReview

	*/
	AverageDaysToReview *string
	/*BugDensity
	  bugDensity

	*/
	BugDensity *string
	/*Fields
	  Output fields

	*/
	Fields *string
	/*FilesScanned
	  filesScanned

	*/
	FilesScanned *string
	/*Filterby
	  filterby

	*/
	Filterby *string
	/*Groupguid
	  groupguid

	*/
	Groupguid *string
	/*Groupvalue
	  groupvalue

	*/
	Groupvalue *string
	/*IssuesPendingReview
	  issuesPendingReview

	*/
	IssuesPendingReview *string
	/*Limit
	  A maximum number of returned objects in listing, if '-1' or '0' no limit is applied

	*/
	Limit *int32
	/*LinesOfCode
	  linesOfCode

	*/
	LinesOfCode *string
	/*Name
	  name

	*/
	Name *string
	/*NumberOfApplicationVersions
	  numberOfApplicationVersions

	*/
	NumberOfApplicationVersions *string
	/*OpenIssues
	  openIssues

	*/
	OpenIssues *string
	/*Orderby
	  Fields to order by

	*/
	Orderby *string
	/*Start
	  A start offset in object listing

	*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list issue aging params
func (o *ListIssueAgingParams) WithTimeout(timeout time.Duration) *ListIssueAgingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list issue aging params
func (o *ListIssueAgingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list issue aging params
func (o *ListIssueAgingParams) WithContext(ctx context.Context) *ListIssueAgingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list issue aging params
func (o *ListIssueAgingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list issue aging params
func (o *ListIssueAgingParams) WithHTTPClient(client *http.Client) *ListIssueAgingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list issue aging params
func (o *ListIssueAgingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAggregateby adds the aggregateby to the list issue aging params
func (o *ListIssueAgingParams) WithAggregateby(aggregateby *string) *ListIssueAgingParams {
	o.SetAggregateby(aggregateby)
	return o
}

// SetAggregateby adds the aggregateby to the list issue aging params
func (o *ListIssueAgingParams) SetAggregateby(aggregateby *string) {
	o.Aggregateby = aggregateby
}

// WithAverageDaysToRemediate adds the averageDaysToRemediate to the list issue aging params
func (o *ListIssueAgingParams) WithAverageDaysToRemediate(averageDaysToRemediate *string) *ListIssueAgingParams {
	o.SetAverageDaysToRemediate(averageDaysToRemediate)
	return o
}

// SetAverageDaysToRemediate adds the averageDaysToRemediate to the list issue aging params
func (o *ListIssueAgingParams) SetAverageDaysToRemediate(averageDaysToRemediate *string) {
	o.AverageDaysToRemediate = averageDaysToRemediate
}

// WithAverageDaysToReview adds the averageDaysToReview to the list issue aging params
func (o *ListIssueAgingParams) WithAverageDaysToReview(averageDaysToReview *string) *ListIssueAgingParams {
	o.SetAverageDaysToReview(averageDaysToReview)
	return o
}

// SetAverageDaysToReview adds the averageDaysToReview to the list issue aging params
func (o *ListIssueAgingParams) SetAverageDaysToReview(averageDaysToReview *string) {
	o.AverageDaysToReview = averageDaysToReview
}

// WithBugDensity adds the bugDensity to the list issue aging params
func (o *ListIssueAgingParams) WithBugDensity(bugDensity *string) *ListIssueAgingParams {
	o.SetBugDensity(bugDensity)
	return o
}

// SetBugDensity adds the bugDensity to the list issue aging params
func (o *ListIssueAgingParams) SetBugDensity(bugDensity *string) {
	o.BugDensity = bugDensity
}

// WithFields adds the fields to the list issue aging params
func (o *ListIssueAgingParams) WithFields(fields *string) *ListIssueAgingParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the list issue aging params
func (o *ListIssueAgingParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilesScanned adds the filesScanned to the list issue aging params
func (o *ListIssueAgingParams) WithFilesScanned(filesScanned *string) *ListIssueAgingParams {
	o.SetFilesScanned(filesScanned)
	return o
}

// SetFilesScanned adds the filesScanned to the list issue aging params
func (o *ListIssueAgingParams) SetFilesScanned(filesScanned *string) {
	o.FilesScanned = filesScanned
}

// WithFilterby adds the filterby to the list issue aging params
func (o *ListIssueAgingParams) WithFilterby(filterby *string) *ListIssueAgingParams {
	o.SetFilterby(filterby)
	return o
}

// SetFilterby adds the filterby to the list issue aging params
func (o *ListIssueAgingParams) SetFilterby(filterby *string) {
	o.Filterby = filterby
}

// WithGroupguid adds the groupguid to the list issue aging params
func (o *ListIssueAgingParams) WithGroupguid(groupguid *string) *ListIssueAgingParams {
	o.SetGroupguid(groupguid)
	return o
}

// SetGroupguid adds the groupguid to the list issue aging params
func (o *ListIssueAgingParams) SetGroupguid(groupguid *string) {
	o.Groupguid = groupguid
}

// WithGroupvalue adds the groupvalue to the list issue aging params
func (o *ListIssueAgingParams) WithGroupvalue(groupvalue *string) *ListIssueAgingParams {
	o.SetGroupvalue(groupvalue)
	return o
}

// SetGroupvalue adds the groupvalue to the list issue aging params
func (o *ListIssueAgingParams) SetGroupvalue(groupvalue *string) {
	o.Groupvalue = groupvalue
}

// WithIssuesPendingReview adds the issuesPendingReview to the list issue aging params
func (o *ListIssueAgingParams) WithIssuesPendingReview(issuesPendingReview *string) *ListIssueAgingParams {
	o.SetIssuesPendingReview(issuesPendingReview)
	return o
}

// SetIssuesPendingReview adds the issuesPendingReview to the list issue aging params
func (o *ListIssueAgingParams) SetIssuesPendingReview(issuesPendingReview *string) {
	o.IssuesPendingReview = issuesPendingReview
}

// WithLimit adds the limit to the list issue aging params
func (o *ListIssueAgingParams) WithLimit(limit *int32) *ListIssueAgingParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list issue aging params
func (o *ListIssueAgingParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithLinesOfCode adds the linesOfCode to the list issue aging params
func (o *ListIssueAgingParams) WithLinesOfCode(linesOfCode *string) *ListIssueAgingParams {
	o.SetLinesOfCode(linesOfCode)
	return o
}

// SetLinesOfCode adds the linesOfCode to the list issue aging params
func (o *ListIssueAgingParams) SetLinesOfCode(linesOfCode *string) {
	o.LinesOfCode = linesOfCode
}

// WithName adds the name to the list issue aging params
func (o *ListIssueAgingParams) WithName(name *string) *ListIssueAgingParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list issue aging params
func (o *ListIssueAgingParams) SetName(name *string) {
	o.Name = name
}

// WithNumberOfApplicationVersions adds the numberOfApplicationVersions to the list issue aging params
func (o *ListIssueAgingParams) WithNumberOfApplicationVersions(numberOfApplicationVersions *string) *ListIssueAgingParams {
	o.SetNumberOfApplicationVersions(numberOfApplicationVersions)
	return o
}

// SetNumberOfApplicationVersions adds the numberOfApplicationVersions to the list issue aging params
func (o *ListIssueAgingParams) SetNumberOfApplicationVersions(numberOfApplicationVersions *string) {
	o.NumberOfApplicationVersions = numberOfApplicationVersions
}

// WithOpenIssues adds the openIssues to the list issue aging params
func (o *ListIssueAgingParams) WithOpenIssues(openIssues *string) *ListIssueAgingParams {
	o.SetOpenIssues(openIssues)
	return o
}

// SetOpenIssues adds the openIssues to the list issue aging params
func (o *ListIssueAgingParams) SetOpenIssues(openIssues *string) {
	o.OpenIssues = openIssues
}

// WithOrderby adds the orderby to the list issue aging params
func (o *ListIssueAgingParams) WithOrderby(orderby *string) *ListIssueAgingParams {
	o.SetOrderby(orderby)
	return o
}

// SetOrderby adds the orderby to the list issue aging params
func (o *ListIssueAgingParams) SetOrderby(orderby *string) {
	o.Orderby = orderby
}

// WithStart adds the start to the list issue aging params
func (o *ListIssueAgingParams) WithStart(start *int32) *ListIssueAgingParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the list issue aging params
func (o *ListIssueAgingParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *ListIssueAgingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Aggregateby != nil {

		// query param aggregateby
		var qrAggregateby string
		if o.Aggregateby != nil {
			qrAggregateby = *o.Aggregateby
		}
		qAggregateby := qrAggregateby
		if qAggregateby != "" {
			if err := r.SetQueryParam("aggregateby", qAggregateby); err != nil {
				return err
			}
		}

	}

	if o.AverageDaysToRemediate != nil {

		// query param averageDaysToRemediate
		var qrAverageDaysToRemediate string
		if o.AverageDaysToRemediate != nil {
			qrAverageDaysToRemediate = *o.AverageDaysToRemediate
		}
		qAverageDaysToRemediate := qrAverageDaysToRemediate
		if qAverageDaysToRemediate != "" {
			if err := r.SetQueryParam("averageDaysToRemediate", qAverageDaysToRemediate); err != nil {
				return err
			}
		}

	}

	if o.AverageDaysToReview != nil {

		// query param averageDaysToReview
		var qrAverageDaysToReview string
		if o.AverageDaysToReview != nil {
			qrAverageDaysToReview = *o.AverageDaysToReview
		}
		qAverageDaysToReview := qrAverageDaysToReview
		if qAverageDaysToReview != "" {
			if err := r.SetQueryParam("averageDaysToReview", qAverageDaysToReview); err != nil {
				return err
			}
		}

	}

	if o.BugDensity != nil {

		// query param bugDensity
		var qrBugDensity string
		if o.BugDensity != nil {
			qrBugDensity = *o.BugDensity
		}
		qBugDensity := qrBugDensity
		if qBugDensity != "" {
			if err := r.SetQueryParam("bugDensity", qBugDensity); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FilesScanned != nil {

		// query param filesScanned
		var qrFilesScanned string
		if o.FilesScanned != nil {
			qrFilesScanned = *o.FilesScanned
		}
		qFilesScanned := qrFilesScanned
		if qFilesScanned != "" {
			if err := r.SetQueryParam("filesScanned", qFilesScanned); err != nil {
				return err
			}
		}

	}

	if o.Filterby != nil {

		// query param filterby
		var qrFilterby string
		if o.Filterby != nil {
			qrFilterby = *o.Filterby
		}
		qFilterby := qrFilterby
		if qFilterby != "" {
			if err := r.SetQueryParam("filterby", qFilterby); err != nil {
				return err
			}
		}

	}

	if o.Groupguid != nil {

		// query param groupguid
		var qrGroupguid string
		if o.Groupguid != nil {
			qrGroupguid = *o.Groupguid
		}
		qGroupguid := qrGroupguid
		if qGroupguid != "" {
			if err := r.SetQueryParam("groupguid", qGroupguid); err != nil {
				return err
			}
		}

	}

	if o.Groupvalue != nil {

		// query param groupvalue
		var qrGroupvalue string
		if o.Groupvalue != nil {
			qrGroupvalue = *o.Groupvalue
		}
		qGroupvalue := qrGroupvalue
		if qGroupvalue != "" {
			if err := r.SetQueryParam("groupvalue", qGroupvalue); err != nil {
				return err
			}
		}

	}

	if o.IssuesPendingReview != nil {

		// query param issuesPendingReview
		var qrIssuesPendingReview string
		if o.IssuesPendingReview != nil {
			qrIssuesPendingReview = *o.IssuesPendingReview
		}
		qIssuesPendingReview := qrIssuesPendingReview
		if qIssuesPendingReview != "" {
			if err := r.SetQueryParam("issuesPendingReview", qIssuesPendingReview); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LinesOfCode != nil {

		// query param linesOfCode
		var qrLinesOfCode string
		if o.LinesOfCode != nil {
			qrLinesOfCode = *o.LinesOfCode
		}
		qLinesOfCode := qrLinesOfCode
		if qLinesOfCode != "" {
			if err := r.SetQueryParam("linesOfCode", qLinesOfCode); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NumberOfApplicationVersions != nil {

		// query param numberOfApplicationVersions
		var qrNumberOfApplicationVersions string
		if o.NumberOfApplicationVersions != nil {
			qrNumberOfApplicationVersions = *o.NumberOfApplicationVersions
		}
		qNumberOfApplicationVersions := qrNumberOfApplicationVersions
		if qNumberOfApplicationVersions != "" {
			if err := r.SetQueryParam("numberOfApplicationVersions", qNumberOfApplicationVersions); err != nil {
				return err
			}
		}

	}

	if o.OpenIssues != nil {

		// query param openIssues
		var qrOpenIssues string
		if o.OpenIssues != nil {
			qrOpenIssues = *o.OpenIssues
		}
		qOpenIssues := qrOpenIssues
		if qOpenIssues != "" {
			if err := r.SetQueryParam("openIssues", qOpenIssues); err != nil {
				return err
			}
		}

	}

	if o.Orderby != nil {

		// query param orderby
		var qrOrderby string
		if o.Orderby != nil {
			qrOrderby = *o.Orderby
		}
		qOrderby := qrOrderby
		if qOrderby != "" {
			if err := r.SetQueryParam("orderby", qOrderby); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
