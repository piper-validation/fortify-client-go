// Code generated by go-swagger; DO NOT EDIT.

package issue_assignment_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListIssueAssignmentOfProjectVersionReader is a Reader for the ListIssueAssignmentOfProjectVersion structure.
type ListIssueAssignmentOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListIssueAssignmentOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListIssueAssignmentOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListIssueAssignmentOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListIssueAssignmentOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListIssueAssignmentOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListIssueAssignmentOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListIssueAssignmentOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListIssueAssignmentOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListIssueAssignmentOfProjectVersionOK creates a ListIssueAssignmentOfProjectVersionOK with default headers values
func NewListIssueAssignmentOfProjectVersionOK() *ListIssueAssignmentOfProjectVersionOK {
	return &ListIssueAssignmentOfProjectVersionOK{}
}

/*ListIssueAssignmentOfProjectVersionOK handles this case with default header values.

OK
*/
type ListIssueAssignmentOfProjectVersionOK struct {
	Payload *models.APIResultListIssueAssignment
}

func (o *ListIssueAssignmentOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionOK) GetPayload() *models.APIResultListIssueAssignment {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListIssueAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionBadRequest creates a ListIssueAssignmentOfProjectVersionBadRequest with default headers values
func NewListIssueAssignmentOfProjectVersionBadRequest() *ListIssueAssignmentOfProjectVersionBadRequest {
	return &ListIssueAssignmentOfProjectVersionBadRequest{}
}

/*ListIssueAssignmentOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type ListIssueAssignmentOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionUnauthorized creates a ListIssueAssignmentOfProjectVersionUnauthorized with default headers values
func NewListIssueAssignmentOfProjectVersionUnauthorized() *ListIssueAssignmentOfProjectVersionUnauthorized {
	return &ListIssueAssignmentOfProjectVersionUnauthorized{}
}

/*ListIssueAssignmentOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type ListIssueAssignmentOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionForbidden creates a ListIssueAssignmentOfProjectVersionForbidden with default headers values
func NewListIssueAssignmentOfProjectVersionForbidden() *ListIssueAssignmentOfProjectVersionForbidden {
	return &ListIssueAssignmentOfProjectVersionForbidden{}
}

/*ListIssueAssignmentOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type ListIssueAssignmentOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionNotFound creates a ListIssueAssignmentOfProjectVersionNotFound with default headers values
func NewListIssueAssignmentOfProjectVersionNotFound() *ListIssueAssignmentOfProjectVersionNotFound {
	return &ListIssueAssignmentOfProjectVersionNotFound{}
}

/*ListIssueAssignmentOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type ListIssueAssignmentOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionConflict creates a ListIssueAssignmentOfProjectVersionConflict with default headers values
func NewListIssueAssignmentOfProjectVersionConflict() *ListIssueAssignmentOfProjectVersionConflict {
	return &ListIssueAssignmentOfProjectVersionConflict{}
}

/*ListIssueAssignmentOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type ListIssueAssignmentOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAssignmentOfProjectVersionInternalServerError creates a ListIssueAssignmentOfProjectVersionInternalServerError with default headers values
func NewListIssueAssignmentOfProjectVersionInternalServerError() *ListIssueAssignmentOfProjectVersionInternalServerError {
	return &ListIssueAssignmentOfProjectVersionInternalServerError{}
}

/*ListIssueAssignmentOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListIssueAssignmentOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListIssueAssignmentOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueAssignment][%d] listIssueAssignmentOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *ListIssueAssignmentOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAssignmentOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
