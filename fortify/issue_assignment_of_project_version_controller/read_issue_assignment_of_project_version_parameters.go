// Code generated by go-swagger; DO NOT EDIT.

package issue_assignment_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadIssueAssignmentOfProjectVersionParams creates a new ReadIssueAssignmentOfProjectVersionParams object
// with the default values initialized.
func NewReadIssueAssignmentOfProjectVersionParams() *ReadIssueAssignmentOfProjectVersionParams {
	var ()
	return &ReadIssueAssignmentOfProjectVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadIssueAssignmentOfProjectVersionParamsWithTimeout creates a new ReadIssueAssignmentOfProjectVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadIssueAssignmentOfProjectVersionParamsWithTimeout(timeout time.Duration) *ReadIssueAssignmentOfProjectVersionParams {
	var ()
	return &ReadIssueAssignmentOfProjectVersionParams{

		timeout: timeout,
	}
}

// NewReadIssueAssignmentOfProjectVersionParamsWithContext creates a new ReadIssueAssignmentOfProjectVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadIssueAssignmentOfProjectVersionParamsWithContext(ctx context.Context) *ReadIssueAssignmentOfProjectVersionParams {
	var ()
	return &ReadIssueAssignmentOfProjectVersionParams{

		Context: ctx,
	}
}

// NewReadIssueAssignmentOfProjectVersionParamsWithHTTPClient creates a new ReadIssueAssignmentOfProjectVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadIssueAssignmentOfProjectVersionParamsWithHTTPClient(client *http.Client) *ReadIssueAssignmentOfProjectVersionParams {
	var ()
	return &ReadIssueAssignmentOfProjectVersionParams{
		HTTPClient: client,
	}
}

/*ReadIssueAssignmentOfProjectVersionParams contains all the parameters to send to the API endpoint
for the read issue assignment of project version operation typically these are written to a http.Request
*/
type ReadIssueAssignmentOfProjectVersionParams struct {

	/*Fields
	  Output fields

	*/
	Fields *string
	/*ID
	  id

	*/
	ID string
	/*ParentID
	  parentId

	*/
	ParentID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithTimeout(timeout time.Duration) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithContext(ctx context.Context) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithHTTPClient(client *http.Client) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithFields(fields *string) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithID adds the id to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithID(id string) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetID(id string) {
	o.ID = id
}

// WithParentID adds the parentID to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) WithParentID(parentID int64) *ReadIssueAssignmentOfProjectVersionParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the read issue assignment of project version params
func (o *ReadIssueAssignmentOfProjectVersionParams) SetParentID(parentID int64) {
	o.ParentID = parentID
}

// WriteToRequest writes these params to a swagger request
func (o *ReadIssueAssignmentOfProjectVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param parentId
	if err := r.SetPathParam("parentId", swag.FormatInt64(o.ParentID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
