// Code generated by go-swagger; DO NOT EDIT.

package issue_attachment_of_issue_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new issue attachment of issue controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for issue attachment of issue controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteIssueAttachmentOfIssue(params *DeleteIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIssueAttachmentOfIssueOK, error)

	ListIssueAttachmentOfIssue(params *ListIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueAttachmentOfIssueOK, error)

	MultiDeleteIssueAttachmentOfIssue(params *MultiDeleteIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteIssueAttachmentOfIssueOK, error)

	ReadIssueAttachmentOfIssue(params *ReadIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueAttachmentOfIssueOK, error)

	UpdateIssueAttachmentOfIssue(params *UpdateIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIssueAttachmentOfIssueOK, error)

	UploadIssueAttachmentOfIssue(params *UploadIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*UploadIssueAttachmentOfIssueCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteIssueAttachmentOfIssue deletes
*/
func (a *Client) DeleteIssueAttachmentOfIssue(params *DeleteIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIssueAttachmentOfIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIssueAttachmentOfIssue",
		Method:             "DELETE",
		PathPattern:        "/issues/{parentId}/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIssueAttachmentOfIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIssueAttachmentOfIssue lists
*/
func (a *Client) ListIssueAttachmentOfIssue(params *ListIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueAttachmentOfIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIssueAttachmentOfIssue",
		Method:             "GET",
		PathPattern:        "/issues/{parentId}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIssueAttachmentOfIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteIssueAttachmentOfIssue multis delete
*/
func (a *Client) MultiDeleteIssueAttachmentOfIssue(params *MultiDeleteIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteIssueAttachmentOfIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteIssueAttachmentOfIssue",
		Method:             "DELETE",
		PathPattern:        "/issues/{parentId}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteIssueAttachmentOfIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadIssueAttachmentOfIssue reads
*/
func (a *Client) ReadIssueAttachmentOfIssue(params *ReadIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueAttachmentOfIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readIssueAttachmentOfIssue",
		Method:             "GET",
		PathPattern:        "/issues/{parentId}/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadIssueAttachmentOfIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIssueAttachmentOfIssue updates
*/
func (a *Client) UpdateIssueAttachmentOfIssue(params *UpdateIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIssueAttachmentOfIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIssueAttachmentOfIssue",
		Method:             "PUT",
		PathPattern:        "/issues/{parentId}/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIssueAttachmentOfIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadIssueAttachmentOfIssue uploads
*/
func (a *Client) UploadIssueAttachmentOfIssue(params *UploadIssueAttachmentOfIssueParams, authInfo runtime.ClientAuthInfoWriter) (*UploadIssueAttachmentOfIssueCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadIssueAttachmentOfIssueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadIssueAttachmentOfIssue",
		Method:             "POST",
		PathPattern:        "/issues/{parentId}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadIssueAttachmentOfIssueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadIssueAttachmentOfIssueCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadIssueAttachmentOfIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
