// Code generated by go-swagger; DO NOT EDIT.

package issue_attachment_of_issue_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadIssueAttachmentOfIssueParams creates a new UploadIssueAttachmentOfIssueParams object
// with the default values initialized.
func NewUploadIssueAttachmentOfIssueParams() *UploadIssueAttachmentOfIssueParams {
	var ()
	return &UploadIssueAttachmentOfIssueParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadIssueAttachmentOfIssueParamsWithTimeout creates a new UploadIssueAttachmentOfIssueParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadIssueAttachmentOfIssueParamsWithTimeout(timeout time.Duration) *UploadIssueAttachmentOfIssueParams {
	var ()
	return &UploadIssueAttachmentOfIssueParams{

		timeout: timeout,
	}
}

// NewUploadIssueAttachmentOfIssueParamsWithContext creates a new UploadIssueAttachmentOfIssueParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadIssueAttachmentOfIssueParamsWithContext(ctx context.Context) *UploadIssueAttachmentOfIssueParams {
	var ()
	return &UploadIssueAttachmentOfIssueParams{

		Context: ctx,
	}
}

// NewUploadIssueAttachmentOfIssueParamsWithHTTPClient creates a new UploadIssueAttachmentOfIssueParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadIssueAttachmentOfIssueParamsWithHTTPClient(client *http.Client) *UploadIssueAttachmentOfIssueParams {
	var ()
	return &UploadIssueAttachmentOfIssueParams{
		HTTPClient: client,
	}
}

/*UploadIssueAttachmentOfIssueParams contains all the parameters to send to the API endpoint
for the upload issue attachment of issue operation typically these are written to a http.Request
*/
type UploadIssueAttachmentOfIssueParams struct {

	/*Description
	  description

	*/
	Description *string
	/*File
	  file

	*/
	File runtime.NamedReadCloser
	/*ParentID
	  parentId

	*/
	ParentID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithTimeout(timeout time.Duration) *UploadIssueAttachmentOfIssueParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithContext(ctx context.Context) *UploadIssueAttachmentOfIssueParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithHTTPClient(client *http.Client) *UploadIssueAttachmentOfIssueParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithDescription(description *string) *UploadIssueAttachmentOfIssueParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithFile(file runtime.NamedReadCloser) *UploadIssueAttachmentOfIssueParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithParentID adds the parentID to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) WithParentID(parentID int64) *UploadIssueAttachmentOfIssueParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the upload issue attachment of issue params
func (o *UploadIssueAttachmentOfIssueParams) SetParentID(parentID int64) {
	o.ParentID = parentID
}

// WriteToRequest writes these params to a swagger request
func (o *UploadIssueAttachmentOfIssueParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param parentId
	if err := r.SetPathParam("parentId", swag.FormatInt64(o.ParentID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
