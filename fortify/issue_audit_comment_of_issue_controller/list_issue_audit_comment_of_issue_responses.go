// Code generated by go-swagger; DO NOT EDIT.

package issue_audit_comment_of_issue_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListIssueAuditCommentOfIssueReader is a Reader for the ListIssueAuditCommentOfIssue structure.
type ListIssueAuditCommentOfIssueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListIssueAuditCommentOfIssueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListIssueAuditCommentOfIssueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListIssueAuditCommentOfIssueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListIssueAuditCommentOfIssueUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListIssueAuditCommentOfIssueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListIssueAuditCommentOfIssueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListIssueAuditCommentOfIssueConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListIssueAuditCommentOfIssueInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListIssueAuditCommentOfIssueOK creates a ListIssueAuditCommentOfIssueOK with default headers values
func NewListIssueAuditCommentOfIssueOK() *ListIssueAuditCommentOfIssueOK {
	return &ListIssueAuditCommentOfIssueOK{}
}

/*ListIssueAuditCommentOfIssueOK handles this case with default header values.

OK
*/
type ListIssueAuditCommentOfIssueOK struct {
	Payload *models.APIResultListIssueAuditComment
}

func (o *ListIssueAuditCommentOfIssueOK) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueOK  %+v", 200, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueOK) GetPayload() *models.APIResultListIssueAuditComment {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListIssueAuditComment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueBadRequest creates a ListIssueAuditCommentOfIssueBadRequest with default headers values
func NewListIssueAuditCommentOfIssueBadRequest() *ListIssueAuditCommentOfIssueBadRequest {
	return &ListIssueAuditCommentOfIssueBadRequest{}
}

/*ListIssueAuditCommentOfIssueBadRequest handles this case with default header values.

Bad Request
*/
type ListIssueAuditCommentOfIssueBadRequest struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueBadRequest) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueBadRequest  %+v", 400, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueUnauthorized creates a ListIssueAuditCommentOfIssueUnauthorized with default headers values
func NewListIssueAuditCommentOfIssueUnauthorized() *ListIssueAuditCommentOfIssueUnauthorized {
	return &ListIssueAuditCommentOfIssueUnauthorized{}
}

/*ListIssueAuditCommentOfIssueUnauthorized handles this case with default header values.

Unauthorized
*/
type ListIssueAuditCommentOfIssueUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueUnauthorized) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueUnauthorized  %+v", 401, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueForbidden creates a ListIssueAuditCommentOfIssueForbidden with default headers values
func NewListIssueAuditCommentOfIssueForbidden() *ListIssueAuditCommentOfIssueForbidden {
	return &ListIssueAuditCommentOfIssueForbidden{}
}

/*ListIssueAuditCommentOfIssueForbidden handles this case with default header values.

Forbidden
*/
type ListIssueAuditCommentOfIssueForbidden struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueForbidden) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueForbidden  %+v", 403, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueNotFound creates a ListIssueAuditCommentOfIssueNotFound with default headers values
func NewListIssueAuditCommentOfIssueNotFound() *ListIssueAuditCommentOfIssueNotFound {
	return &ListIssueAuditCommentOfIssueNotFound{}
}

/*ListIssueAuditCommentOfIssueNotFound handles this case with default header values.

Not Found
*/
type ListIssueAuditCommentOfIssueNotFound struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueNotFound) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueNotFound  %+v", 404, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueConflict creates a ListIssueAuditCommentOfIssueConflict with default headers values
func NewListIssueAuditCommentOfIssueConflict() *ListIssueAuditCommentOfIssueConflict {
	return &ListIssueAuditCommentOfIssueConflict{}
}

/*ListIssueAuditCommentOfIssueConflict handles this case with default header values.

Conflict
*/
type ListIssueAuditCommentOfIssueConflict struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueConflict) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueConflict  %+v", 409, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListIssueAuditCommentOfIssueInternalServerError creates a ListIssueAuditCommentOfIssueInternalServerError with default headers values
func NewListIssueAuditCommentOfIssueInternalServerError() *ListIssueAuditCommentOfIssueInternalServerError {
	return &ListIssueAuditCommentOfIssueInternalServerError{}
}

/*ListIssueAuditCommentOfIssueInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListIssueAuditCommentOfIssueInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListIssueAuditCommentOfIssueInternalServerError) Error() string {
	return fmt.Sprintf("[GET /issues/{parentId}/comments][%d] listIssueAuditCommentOfIssueInternalServerError  %+v", 500, o.Payload)
}

func (o *ListIssueAuditCommentOfIssueInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListIssueAuditCommentOfIssueInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
