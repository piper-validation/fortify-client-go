// Code generated by go-swagger; DO NOT EDIT.

package issue_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadIssueReader is a Reader for the ReadIssue structure.
type ReadIssueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadIssueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadIssueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadIssueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadIssueUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadIssueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadIssueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadIssueConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadIssueInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadIssueOK creates a ReadIssueOK with default headers values
func NewReadIssueOK() *ReadIssueOK {
	return &ReadIssueOK{}
}

/*ReadIssueOK handles this case with default header values.

OK
*/
type ReadIssueOK struct {
	Payload *models.APIResultProjectVersionIssue
}

func (o *ReadIssueOK) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueOK  %+v", 200, o.Payload)
}

func (o *ReadIssueOK) GetPayload() *models.APIResultProjectVersionIssue {
	return o.Payload
}

func (o *ReadIssueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultProjectVersionIssue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueBadRequest creates a ReadIssueBadRequest with default headers values
func NewReadIssueBadRequest() *ReadIssueBadRequest {
	return &ReadIssueBadRequest{}
}

/*ReadIssueBadRequest handles this case with default header values.

Bad Request
*/
type ReadIssueBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadIssueBadRequest) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueBadRequest  %+v", 400, o.Payload)
}

func (o *ReadIssueBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueUnauthorized creates a ReadIssueUnauthorized with default headers values
func NewReadIssueUnauthorized() *ReadIssueUnauthorized {
	return &ReadIssueUnauthorized{}
}

/*ReadIssueUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadIssueUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadIssueUnauthorized) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadIssueUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueForbidden creates a ReadIssueForbidden with default headers values
func NewReadIssueForbidden() *ReadIssueForbidden {
	return &ReadIssueForbidden{}
}

/*ReadIssueForbidden handles this case with default header values.

Forbidden
*/
type ReadIssueForbidden struct {
	Payload *models.APIResult
}

func (o *ReadIssueForbidden) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueForbidden  %+v", 403, o.Payload)
}

func (o *ReadIssueForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueNotFound creates a ReadIssueNotFound with default headers values
func NewReadIssueNotFound() *ReadIssueNotFound {
	return &ReadIssueNotFound{}
}

/*ReadIssueNotFound handles this case with default header values.

Not Found
*/
type ReadIssueNotFound struct {
	Payload *models.APIResult
}

func (o *ReadIssueNotFound) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueNotFound  %+v", 404, o.Payload)
}

func (o *ReadIssueNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueConflict creates a ReadIssueConflict with default headers values
func NewReadIssueConflict() *ReadIssueConflict {
	return &ReadIssueConflict{}
}

/*ReadIssueConflict handles this case with default header values.

Conflict
*/
type ReadIssueConflict struct {
	Payload *models.APIResult
}

func (o *ReadIssueConflict) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueConflict  %+v", 409, o.Payload)
}

func (o *ReadIssueConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueInternalServerError creates a ReadIssueInternalServerError with default headers values
func NewReadIssueInternalServerError() *ReadIssueInternalServerError {
	return &ReadIssueInternalServerError{}
}

/*ReadIssueInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadIssueInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadIssueInternalServerError) Error() string {
	return fmt.Sprintf("[GET /issues/{id}][%d] readIssueInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadIssueInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
