// Code generated by go-swagger; DO NOT EDIT.

package issue_detail_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadIssueDetailReader is a Reader for the ReadIssueDetail structure.
type ReadIssueDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadIssueDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadIssueDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadIssueDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadIssueDetailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadIssueDetailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadIssueDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadIssueDetailConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadIssueDetailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadIssueDetailOK creates a ReadIssueDetailOK with default headers values
func NewReadIssueDetailOK() *ReadIssueDetailOK {
	return &ReadIssueDetailOK{}
}

/*ReadIssueDetailOK handles this case with default header values.

OK
*/
type ReadIssueDetailOK struct {
	Payload *models.APIResultProjectVersionIssueDetails
}

func (o *ReadIssueDetailOK) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailOK  %+v", 200, o.Payload)
}

func (o *ReadIssueDetailOK) GetPayload() *models.APIResultProjectVersionIssueDetails {
	return o.Payload
}

func (o *ReadIssueDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultProjectVersionIssueDetails)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailBadRequest creates a ReadIssueDetailBadRequest with default headers values
func NewReadIssueDetailBadRequest() *ReadIssueDetailBadRequest {
	return &ReadIssueDetailBadRequest{}
}

/*ReadIssueDetailBadRequest handles this case with default header values.

Bad Request
*/
type ReadIssueDetailBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailBadRequest) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailBadRequest  %+v", 400, o.Payload)
}

func (o *ReadIssueDetailBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailUnauthorized creates a ReadIssueDetailUnauthorized with default headers values
func NewReadIssueDetailUnauthorized() *ReadIssueDetailUnauthorized {
	return &ReadIssueDetailUnauthorized{}
}

/*ReadIssueDetailUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadIssueDetailUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailUnauthorized) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadIssueDetailUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailForbidden creates a ReadIssueDetailForbidden with default headers values
func NewReadIssueDetailForbidden() *ReadIssueDetailForbidden {
	return &ReadIssueDetailForbidden{}
}

/*ReadIssueDetailForbidden handles this case with default header values.

Forbidden
*/
type ReadIssueDetailForbidden struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailForbidden) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailForbidden  %+v", 403, o.Payload)
}

func (o *ReadIssueDetailForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailNotFound creates a ReadIssueDetailNotFound with default headers values
func NewReadIssueDetailNotFound() *ReadIssueDetailNotFound {
	return &ReadIssueDetailNotFound{}
}

/*ReadIssueDetailNotFound handles this case with default header values.

Not Found
*/
type ReadIssueDetailNotFound struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailNotFound) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailNotFound  %+v", 404, o.Payload)
}

func (o *ReadIssueDetailNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailConflict creates a ReadIssueDetailConflict with default headers values
func NewReadIssueDetailConflict() *ReadIssueDetailConflict {
	return &ReadIssueDetailConflict{}
}

/*ReadIssueDetailConflict handles this case with default header values.

Conflict
*/
type ReadIssueDetailConflict struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailConflict) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailConflict  %+v", 409, o.Payload)
}

func (o *ReadIssueDetailConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadIssueDetailInternalServerError creates a ReadIssueDetailInternalServerError with default headers values
func NewReadIssueDetailInternalServerError() *ReadIssueDetailInternalServerError {
	return &ReadIssueDetailInternalServerError{}
}

/*ReadIssueDetailInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadIssueDetailInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadIssueDetailInternalServerError) Error() string {
	return fmt.Sprintf("[GET /issueDetails/{id}][%d] readIssueDetailInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadIssueDetailInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadIssueDetailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
