// Code generated by go-swagger; DO NOT EDIT.

package issue_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// AssignUserForIssueOfProjectVersionReader is a Reader for the AssignUserForIssueOfProjectVersion structure.
type AssignUserForIssueOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignUserForIssueOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignUserForIssueOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignUserForIssueOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAssignUserForIssueOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssignUserForIssueOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssignUserForIssueOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAssignUserForIssueOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignUserForIssueOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAssignUserForIssueOfProjectVersionOK creates a AssignUserForIssueOfProjectVersionOK with default headers values
func NewAssignUserForIssueOfProjectVersionOK() *AssignUserForIssueOfProjectVersionOK {
	return &AssignUserForIssueOfProjectVersionOK{}
}

/*AssignUserForIssueOfProjectVersionOK handles this case with default header values.

OK
*/
type AssignUserForIssueOfProjectVersionOK struct {
	Payload *models.APIResultIssueActionResponse
}

func (o *AssignUserForIssueOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionOK) GetPayload() *models.APIResultIssueActionResponse {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultIssueActionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionBadRequest creates a AssignUserForIssueOfProjectVersionBadRequest with default headers values
func NewAssignUserForIssueOfProjectVersionBadRequest() *AssignUserForIssueOfProjectVersionBadRequest {
	return &AssignUserForIssueOfProjectVersionBadRequest{}
}

/*AssignUserForIssueOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type AssignUserForIssueOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionUnauthorized creates a AssignUserForIssueOfProjectVersionUnauthorized with default headers values
func NewAssignUserForIssueOfProjectVersionUnauthorized() *AssignUserForIssueOfProjectVersionUnauthorized {
	return &AssignUserForIssueOfProjectVersionUnauthorized{}
}

/*AssignUserForIssueOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type AssignUserForIssueOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionForbidden creates a AssignUserForIssueOfProjectVersionForbidden with default headers values
func NewAssignUserForIssueOfProjectVersionForbidden() *AssignUserForIssueOfProjectVersionForbidden {
	return &AssignUserForIssueOfProjectVersionForbidden{}
}

/*AssignUserForIssueOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type AssignUserForIssueOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionNotFound creates a AssignUserForIssueOfProjectVersionNotFound with default headers values
func NewAssignUserForIssueOfProjectVersionNotFound() *AssignUserForIssueOfProjectVersionNotFound {
	return &AssignUserForIssueOfProjectVersionNotFound{}
}

/*AssignUserForIssueOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type AssignUserForIssueOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionConflict creates a AssignUserForIssueOfProjectVersionConflict with default headers values
func NewAssignUserForIssueOfProjectVersionConflict() *AssignUserForIssueOfProjectVersionConflict {
	return &AssignUserForIssueOfProjectVersionConflict{}
}

/*AssignUserForIssueOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type AssignUserForIssueOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignUserForIssueOfProjectVersionInternalServerError creates a AssignUserForIssueOfProjectVersionInternalServerError with default headers values
func NewAssignUserForIssueOfProjectVersionInternalServerError() *AssignUserForIssueOfProjectVersionInternalServerError {
	return &AssignUserForIssueOfProjectVersionInternalServerError{}
}

/*AssignUserForIssueOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type AssignUserForIssueOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *AssignUserForIssueOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/assignUser][%d] assignUserForIssueOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignUserForIssueOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AssignUserForIssueOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
