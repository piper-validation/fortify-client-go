// Code generated by go-swagger; DO NOT EDIT.

package issue_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// AuditIssueOfProjectVersionReader is a Reader for the AuditIssueOfProjectVersion structure.
type AuditIssueOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuditIssueOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuditIssueOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuditIssueOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuditIssueOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuditIssueOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuditIssueOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAuditIssueOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAuditIssueOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAuditIssueOfProjectVersionOK creates a AuditIssueOfProjectVersionOK with default headers values
func NewAuditIssueOfProjectVersionOK() *AuditIssueOfProjectVersionOK {
	return &AuditIssueOfProjectVersionOK{}
}

/*AuditIssueOfProjectVersionOK handles this case with default header values.

OK
*/
type AuditIssueOfProjectVersionOK struct {
	Payload *models.APIResultIssueActionResponse
}

func (o *AuditIssueOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *AuditIssueOfProjectVersionOK) GetPayload() *models.APIResultIssueActionResponse {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultIssueActionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionBadRequest creates a AuditIssueOfProjectVersionBadRequest with default headers values
func NewAuditIssueOfProjectVersionBadRequest() *AuditIssueOfProjectVersionBadRequest {
	return &AuditIssueOfProjectVersionBadRequest{}
}

/*AuditIssueOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type AuditIssueOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *AuditIssueOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionUnauthorized creates a AuditIssueOfProjectVersionUnauthorized with default headers values
func NewAuditIssueOfProjectVersionUnauthorized() *AuditIssueOfProjectVersionUnauthorized {
	return &AuditIssueOfProjectVersionUnauthorized{}
}

/*AuditIssueOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type AuditIssueOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *AuditIssueOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionForbidden creates a AuditIssueOfProjectVersionForbidden with default headers values
func NewAuditIssueOfProjectVersionForbidden() *AuditIssueOfProjectVersionForbidden {
	return &AuditIssueOfProjectVersionForbidden{}
}

/*AuditIssueOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type AuditIssueOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *AuditIssueOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionNotFound creates a AuditIssueOfProjectVersionNotFound with default headers values
func NewAuditIssueOfProjectVersionNotFound() *AuditIssueOfProjectVersionNotFound {
	return &AuditIssueOfProjectVersionNotFound{}
}

/*AuditIssueOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type AuditIssueOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *AuditIssueOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionConflict creates a AuditIssueOfProjectVersionConflict with default headers values
func NewAuditIssueOfProjectVersionConflict() *AuditIssueOfProjectVersionConflict {
	return &AuditIssueOfProjectVersionConflict{}
}

/*AuditIssueOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type AuditIssueOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *AuditIssueOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuditIssueOfProjectVersionInternalServerError creates a AuditIssueOfProjectVersionInternalServerError with default headers values
func NewAuditIssueOfProjectVersionInternalServerError() *AuditIssueOfProjectVersionInternalServerError {
	return &AuditIssueOfProjectVersionInternalServerError{}
}

/*AuditIssueOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type AuditIssueOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *AuditIssueOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projectVersions/{parentId}/issues/action/audit][%d] auditIssueOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *AuditIssueOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *AuditIssueOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
