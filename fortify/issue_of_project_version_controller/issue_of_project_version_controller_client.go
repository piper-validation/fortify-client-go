// Code generated by go-swagger; DO NOT EDIT.

package issue_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new issue of project version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for issue of project version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssignUserForIssueOfProjectVersion(params *AssignUserForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AssignUserForIssueOfProjectVersionOK, error)

	AuditIssueOfProjectVersion(params *AuditIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AuditIssueOfProjectVersionOK, error)

	FileBugForIssueOfProjectVersion(params *FileBugForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*FileBugForIssueOfProjectVersionOK, error)

	ListIssueOfProjectVersion(params *ListIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueOfProjectVersionOK, error)

	ReadIssueOfProjectVersion(params *ReadIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueOfProjectVersionOK, error)

	SuppressIssueOfProjectVersion(params *SuppressIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SuppressIssueOfProjectVersionOK, error)

	UpdateTagForIssueOfProjectVersion(params *UpdateTagForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTagForIssueOfProjectVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssignUserForIssueOfProjectVersion assigns issue to user
*/
func (a *Client) AssignUserForIssueOfProjectVersion(params *AssignUserForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AssignUserForIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserForIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignUserForIssueOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/issues/action/assignUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignUserForIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUserForIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignUserForIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuditIssueOfProjectVersion performs an auditing action on the specified issues
*/
func (a *Client) AuditIssueOfProjectVersion(params *AuditIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AuditIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "auditIssueOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/issues/action/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auditIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FileBugForIssueOfProjectVersion submits a bug defect for the specified issues in the external bug tracking system if configured
*/
func (a *Client) FileBugForIssueOfProjectVersion(params *FileBugForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*FileBugForIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileBugForIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fileBugForIssueOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/issues/action/fileBug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FileBugForIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FileBugForIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fileBugForIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIssueOfProjectVersion lists
*/
func (a *Client) ListIssueOfProjectVersion(params *ListIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIssueOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/issues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadIssueOfProjectVersion reads
*/
func (a *Client) ReadIssueOfProjectVersion(params *ReadIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readIssueOfProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{parentId}/issues/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuppressIssueOfProjectVersion suppresses or unsuppress an issue
*/
func (a *Client) SuppressIssueOfProjectVersion(params *SuppressIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*SuppressIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuppressIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suppressIssueOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/issues/action/suppress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuppressIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuppressIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suppressIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTagForIssueOfProjectVersion updates the custom tag for the specified issues
*/
func (a *Client) UpdateTagForIssueOfProjectVersion(params *UpdateTagForIssueOfProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTagForIssueOfProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTagForIssueOfProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTagForIssueOfProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/{parentId}/issues/action/updateTag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTagForIssueOfProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTagForIssueOfProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTagForIssueOfProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
