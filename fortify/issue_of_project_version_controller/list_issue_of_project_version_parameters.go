// Code generated by go-swagger; DO NOT EDIT.

package issue_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListIssueOfProjectVersionParams creates a new ListIssueOfProjectVersionParams object
// with the default values initialized.
func NewListIssueOfProjectVersionParams() *ListIssueOfProjectVersionParams {
	var (
		limitDefault              = int32(200)
		showhiddenDefault         = bool(false)
		showremovedDefault        = bool(false)
		showshortfilenamesDefault = bool(false)
		showsuppressedDefault     = bool(false)
		startDefault              = int32(0)
	)
	return &ListIssueOfProjectVersionParams{
		Limit:              &limitDefault,
		Showhidden:         &showhiddenDefault,
		Showremoved:        &showremovedDefault,
		Showshortfilenames: &showshortfilenamesDefault,
		Showsuppressed:     &showsuppressedDefault,
		Start:              &startDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListIssueOfProjectVersionParamsWithTimeout creates a new ListIssueOfProjectVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListIssueOfProjectVersionParamsWithTimeout(timeout time.Duration) *ListIssueOfProjectVersionParams {
	var (
		limitDefault              = int32(200)
		showhiddenDefault         = bool(false)
		showremovedDefault        = bool(false)
		showshortfilenamesDefault = bool(false)
		showsuppressedDefault     = bool(false)
		startDefault              = int32(0)
	)
	return &ListIssueOfProjectVersionParams{
		Limit:              &limitDefault,
		Showhidden:         &showhiddenDefault,
		Showremoved:        &showremovedDefault,
		Showshortfilenames: &showshortfilenamesDefault,
		Showsuppressed:     &showsuppressedDefault,
		Start:              &startDefault,

		timeout: timeout,
	}
}

// NewListIssueOfProjectVersionParamsWithContext creates a new ListIssueOfProjectVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewListIssueOfProjectVersionParamsWithContext(ctx context.Context) *ListIssueOfProjectVersionParams {
	var (
		limitDefault              = int32(200)
		showhiddenDefault         = bool(false)
		showremovedDefault        = bool(false)
		showshortfilenamesDefault = bool(false)
		showsuppressedDefault     = bool(false)
		startDefault              = int32(0)
	)
	return &ListIssueOfProjectVersionParams{
		Limit:              &limitDefault,
		Showhidden:         &showhiddenDefault,
		Showremoved:        &showremovedDefault,
		Showshortfilenames: &showshortfilenamesDefault,
		Showsuppressed:     &showsuppressedDefault,
		Start:              &startDefault,

		Context: ctx,
	}
}

// NewListIssueOfProjectVersionParamsWithHTTPClient creates a new ListIssueOfProjectVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListIssueOfProjectVersionParamsWithHTTPClient(client *http.Client) *ListIssueOfProjectVersionParams {
	var (
		limitDefault              = int32(200)
		showhiddenDefault         = bool(false)
		showremovedDefault        = bool(false)
		showshortfilenamesDefault = bool(false)
		showsuppressedDefault     = bool(false)
		startDefault              = int32(0)
	)
	return &ListIssueOfProjectVersionParams{
		Limit:              &limitDefault,
		Showhidden:         &showhiddenDefault,
		Showremoved:        &showremovedDefault,
		Showshortfilenames: &showshortfilenamesDefault,
		Showsuppressed:     &showsuppressedDefault,
		Start:              &startDefault,
		HTTPClient:         client,
	}
}

/*ListIssueOfProjectVersionParams contains all the parameters to send to the API endpoint
for the list issue of project version operation typically these are written to a http.Request
*/
type ListIssueOfProjectVersionParams struct {

	/*Fields
	  Output fields

	*/
	Fields *string
	/*Filter
	  filter

	*/
	Filter *string
	/*Filterset
	  Filter set to use

	*/
	Filterset *string
	/*Groupid
	  groupid

	*/
	Groupid *string
	/*Groupingtype
	  groupingtype

	*/
	Groupingtype *string
	/*Limit
	  A maximum number of returned objects in listing, if '-1' or '0' no limit is applied

	*/
	Limit *int32
	/*Orderby
	  Fields to order by

	*/
	Orderby *string
	/*ParentID
	  parentId

	*/
	ParentID int64
	/*Q
	  An issue query expression, must be used together with the 'qm' parameter

	*/
	Q *string
	/*Qm
	  Syntax mode for the 'q' parameter, mandatory if the 'q' parameter is used

	*/
	Qm *string
	/*Showhidden
	  If 'true', include hidden issues in search results. If 'false', exclude hidden issues from search results. If no options are set, use application version profile settings to get value of this option.

	*/
	Showhidden *bool
	/*Showremoved
	  If 'true', include removed issues in search results. If 'false', exclude removed issues from search results. If no options are set, use application version profile settings to get value of this option.

	*/
	Showremoved *bool
	/*Showshortfilenames
	  If 'true', only short file names will be displayed in issues list.

	*/
	Showshortfilenames *bool
	/*Showsuppressed
	  If 'true', include suppressed issues in search results. If 'false', exclude suppressed issues from search results. If no options are set, use application version profile settings to get value of this option.

	*/
	Showsuppressed *bool
	/*Start
	  A start offset in object listing

	*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithTimeout(timeout time.Duration) *ListIssueOfProjectVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithContext(ctx context.Context) *ListIssueOfProjectVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithHTTPClient(client *http.Client) *ListIssueOfProjectVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithFields(fields *string) *ListIssueOfProjectVersionParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilter adds the filter to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithFilter(filter *string) *ListIssueOfProjectVersionParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFilterset adds the filterset to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithFilterset(filterset *string) *ListIssueOfProjectVersionParams {
	o.SetFilterset(filterset)
	return o
}

// SetFilterset adds the filterset to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetFilterset(filterset *string) {
	o.Filterset = filterset
}

// WithGroupid adds the groupid to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithGroupid(groupid *string) *ListIssueOfProjectVersionParams {
	o.SetGroupid(groupid)
	return o
}

// SetGroupid adds the groupid to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetGroupid(groupid *string) {
	o.Groupid = groupid
}

// WithGroupingtype adds the groupingtype to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithGroupingtype(groupingtype *string) *ListIssueOfProjectVersionParams {
	o.SetGroupingtype(groupingtype)
	return o
}

// SetGroupingtype adds the groupingtype to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetGroupingtype(groupingtype *string) {
	o.Groupingtype = groupingtype
}

// WithLimit adds the limit to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithLimit(limit *int32) *ListIssueOfProjectVersionParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrderby adds the orderby to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithOrderby(orderby *string) *ListIssueOfProjectVersionParams {
	o.SetOrderby(orderby)
	return o
}

// SetOrderby adds the orderby to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetOrderby(orderby *string) {
	o.Orderby = orderby
}

// WithParentID adds the parentID to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithParentID(parentID int64) *ListIssueOfProjectVersionParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetParentID(parentID int64) {
	o.ParentID = parentID
}

// WithQ adds the q to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithQ(q *string) *ListIssueOfProjectVersionParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetQ(q *string) {
	o.Q = q
}

// WithQm adds the qm to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithQm(qm *string) *ListIssueOfProjectVersionParams {
	o.SetQm(qm)
	return o
}

// SetQm adds the qm to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetQm(qm *string) {
	o.Qm = qm
}

// WithShowhidden adds the showhidden to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithShowhidden(showhidden *bool) *ListIssueOfProjectVersionParams {
	o.SetShowhidden(showhidden)
	return o
}

// SetShowhidden adds the showhidden to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetShowhidden(showhidden *bool) {
	o.Showhidden = showhidden
}

// WithShowremoved adds the showremoved to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithShowremoved(showremoved *bool) *ListIssueOfProjectVersionParams {
	o.SetShowremoved(showremoved)
	return o
}

// SetShowremoved adds the showremoved to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetShowremoved(showremoved *bool) {
	o.Showremoved = showremoved
}

// WithShowshortfilenames adds the showshortfilenames to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithShowshortfilenames(showshortfilenames *bool) *ListIssueOfProjectVersionParams {
	o.SetShowshortfilenames(showshortfilenames)
	return o
}

// SetShowshortfilenames adds the showshortfilenames to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetShowshortfilenames(showshortfilenames *bool) {
	o.Showshortfilenames = showshortfilenames
}

// WithShowsuppressed adds the showsuppressed to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithShowsuppressed(showsuppressed *bool) *ListIssueOfProjectVersionParams {
	o.SetShowsuppressed(showsuppressed)
	return o
}

// SetShowsuppressed adds the showsuppressed to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetShowsuppressed(showsuppressed *bool) {
	o.Showsuppressed = showsuppressed
}

// WithStart adds the start to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) WithStart(start *int32) *ListIssueOfProjectVersionParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the list issue of project version params
func (o *ListIssueOfProjectVersionParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *ListIssueOfProjectVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.Filterset != nil {

		// query param filterset
		var qrFilterset string
		if o.Filterset != nil {
			qrFilterset = *o.Filterset
		}
		qFilterset := qrFilterset
		if qFilterset != "" {
			if err := r.SetQueryParam("filterset", qFilterset); err != nil {
				return err
			}
		}

	}

	if o.Groupid != nil {

		// query param groupid
		var qrGroupid string
		if o.Groupid != nil {
			qrGroupid = *o.Groupid
		}
		qGroupid := qrGroupid
		if qGroupid != "" {
			if err := r.SetQueryParam("groupid", qGroupid); err != nil {
				return err
			}
		}

	}

	if o.Groupingtype != nil {

		// query param groupingtype
		var qrGroupingtype string
		if o.Groupingtype != nil {
			qrGroupingtype = *o.Groupingtype
		}
		qGroupingtype := qrGroupingtype
		if qGroupingtype != "" {
			if err := r.SetQueryParam("groupingtype", qGroupingtype); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Orderby != nil {

		// query param orderby
		var qrOrderby string
		if o.Orderby != nil {
			qrOrderby = *o.Orderby
		}
		qOrderby := qrOrderby
		if qOrderby != "" {
			if err := r.SetQueryParam("orderby", qOrderby); err != nil {
				return err
			}
		}

	}

	// path param parentId
	if err := r.SetPathParam("parentId", swag.FormatInt64(o.ParentID)); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Qm != nil {

		// query param qm
		var qrQm string
		if o.Qm != nil {
			qrQm = *o.Qm
		}
		qQm := qrQm
		if qQm != "" {
			if err := r.SetQueryParam("qm", qQm); err != nil {
				return err
			}
		}

	}

	if o.Showhidden != nil {

		// query param showhidden
		var qrShowhidden bool
		if o.Showhidden != nil {
			qrShowhidden = *o.Showhidden
		}
		qShowhidden := swag.FormatBool(qrShowhidden)
		if qShowhidden != "" {
			if err := r.SetQueryParam("showhidden", qShowhidden); err != nil {
				return err
			}
		}

	}

	if o.Showremoved != nil {

		// query param showremoved
		var qrShowremoved bool
		if o.Showremoved != nil {
			qrShowremoved = *o.Showremoved
		}
		qShowremoved := swag.FormatBool(qrShowremoved)
		if qShowremoved != "" {
			if err := r.SetQueryParam("showremoved", qShowremoved); err != nil {
				return err
			}
		}

	}

	if o.Showshortfilenames != nil {

		// query param showshortfilenames
		var qrShowshortfilenames bool
		if o.Showshortfilenames != nil {
			qrShowshortfilenames = *o.Showshortfilenames
		}
		qShowshortfilenames := swag.FormatBool(qrShowshortfilenames)
		if qShowshortfilenames != "" {
			if err := r.SetQueryParam("showshortfilenames", qShowshortfilenames); err != nil {
				return err
			}
		}

	}

	if o.Showsuppressed != nil {

		// query param showsuppressed
		var qrShowsuppressed bool
		if o.Showsuppressed != nil {
			qrShowsuppressed = *o.Showsuppressed
		}
		qShowsuppressed := swag.FormatBool(qrShowsuppressed)
		if qShowsuppressed != "" {
			if err := r.SetQueryParam("showsuppressed", qShowsuppressed); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
