// Code generated by go-swagger; DO NOT EDIT.

package issue_selector_set_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// GetIssueSelectorSetOfProjectVersionReader is a Reader for the GetIssueSelectorSetOfProjectVersion structure.
type GetIssueSelectorSetOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIssueSelectorSetOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIssueSelectorSetOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIssueSelectorSetOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIssueSelectorSetOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIssueSelectorSetOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIssueSelectorSetOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetIssueSelectorSetOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIssueSelectorSetOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIssueSelectorSetOfProjectVersionOK creates a GetIssueSelectorSetOfProjectVersionOK with default headers values
func NewGetIssueSelectorSetOfProjectVersionOK() *GetIssueSelectorSetOfProjectVersionOK {
	return &GetIssueSelectorSetOfProjectVersionOK{}
}

/*GetIssueSelectorSetOfProjectVersionOK handles this case with default header values.

OK
*/
type GetIssueSelectorSetOfProjectVersionOK struct {
	Payload *models.APIResultIssueFilterSelectorSet
}

func (o *GetIssueSelectorSetOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionOK) GetPayload() *models.APIResultIssueFilterSelectorSet {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultIssueFilterSelectorSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionBadRequest creates a GetIssueSelectorSetOfProjectVersionBadRequest with default headers values
func NewGetIssueSelectorSetOfProjectVersionBadRequest() *GetIssueSelectorSetOfProjectVersionBadRequest {
	return &GetIssueSelectorSetOfProjectVersionBadRequest{}
}

/*GetIssueSelectorSetOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type GetIssueSelectorSetOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionUnauthorized creates a GetIssueSelectorSetOfProjectVersionUnauthorized with default headers values
func NewGetIssueSelectorSetOfProjectVersionUnauthorized() *GetIssueSelectorSetOfProjectVersionUnauthorized {
	return &GetIssueSelectorSetOfProjectVersionUnauthorized{}
}

/*GetIssueSelectorSetOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type GetIssueSelectorSetOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionForbidden creates a GetIssueSelectorSetOfProjectVersionForbidden with default headers values
func NewGetIssueSelectorSetOfProjectVersionForbidden() *GetIssueSelectorSetOfProjectVersionForbidden {
	return &GetIssueSelectorSetOfProjectVersionForbidden{}
}

/*GetIssueSelectorSetOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type GetIssueSelectorSetOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionNotFound creates a GetIssueSelectorSetOfProjectVersionNotFound with default headers values
func NewGetIssueSelectorSetOfProjectVersionNotFound() *GetIssueSelectorSetOfProjectVersionNotFound {
	return &GetIssueSelectorSetOfProjectVersionNotFound{}
}

/*GetIssueSelectorSetOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type GetIssueSelectorSetOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionConflict creates a GetIssueSelectorSetOfProjectVersionConflict with default headers values
func NewGetIssueSelectorSetOfProjectVersionConflict() *GetIssueSelectorSetOfProjectVersionConflict {
	return &GetIssueSelectorSetOfProjectVersionConflict{}
}

/*GetIssueSelectorSetOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type GetIssueSelectorSetOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIssueSelectorSetOfProjectVersionInternalServerError creates a GetIssueSelectorSetOfProjectVersionInternalServerError with default headers values
func NewGetIssueSelectorSetOfProjectVersionInternalServerError() *GetIssueSelectorSetOfProjectVersionInternalServerError {
	return &GetIssueSelectorSetOfProjectVersionInternalServerError{}
}

/*GetIssueSelectorSetOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetIssueSelectorSetOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *GetIssueSelectorSetOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/issueSelectorSet][%d] getIssueSelectorSetOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetIssueSelectorSetOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetIssueSelectorSetOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
