// Code generated by go-swagger; DO NOT EDIT.

package issue_template_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new issue template controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for issue template controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteIssueTemplate(params *DeleteIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIssueTemplateOK, error)

	ListIssueTemplate(params *ListIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueTemplateOK, error)

	MultiDeleteIssueTemplate(params *MultiDeleteIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteIssueTemplateOK, error)

	ReadIssueTemplate(params *ReadIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueTemplateOK, error)

	UpdateIssueTemplate(params *UpdateIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIssueTemplateOK, error)

	UploadIssueTemplate(params *UploadIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UploadIssueTemplateCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteIssueTemplate deletes
*/
func (a *Client) DeleteIssueTemplate(params *DeleteIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIssueTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIssueTemplate",
		Method:             "DELETE",
		PathPattern:        "/issueTemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIssueTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListIssueTemplate lists
*/
func (a *Client) ListIssueTemplate(params *ListIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ListIssueTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIssueTemplate",
		Method:             "GET",
		PathPattern:        "/issueTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIssueTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteIssueTemplate multis delete
*/
func (a *Client) MultiDeleteIssueTemplate(params *MultiDeleteIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteIssueTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteIssueTemplate",
		Method:             "DELETE",
		PathPattern:        "/issueTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteIssueTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadIssueTemplate reads
*/
func (a *Client) ReadIssueTemplate(params *ReadIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ReadIssueTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readIssueTemplate",
		Method:             "GET",
		PathPattern:        "/issueTemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadIssueTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIssueTemplate updates
*/
func (a *Client) UpdateIssueTemplate(params *UpdateIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIssueTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIssueTemplate",
		Method:             "PUT",
		PathPattern:        "/issueTemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIssueTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadIssueTemplate uploads
*/
func (a *Client) UploadIssueTemplate(params *UploadIssueTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UploadIssueTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadIssueTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadIssueTemplate",
		Method:             "POST",
		PathPattern:        "/issueTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadIssueTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadIssueTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadIssueTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
