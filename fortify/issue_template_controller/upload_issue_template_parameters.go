// Code generated by go-swagger; DO NOT EDIT.

package issue_template_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadIssueTemplateParams creates a new UploadIssueTemplateParams object
// with the default values initialized.
func NewUploadIssueTemplateParams() *UploadIssueTemplateParams {
	var (
		confirmIgnoreCustomTagUpdatesDefault = bool(false)
	)
	return &UploadIssueTemplateParams{
		ConfirmIgnoreCustomTagUpdates: &confirmIgnoreCustomTagUpdatesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadIssueTemplateParamsWithTimeout creates a new UploadIssueTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadIssueTemplateParamsWithTimeout(timeout time.Duration) *UploadIssueTemplateParams {
	var (
		confirmIgnoreCustomTagUpdatesDefault = bool(false)
	)
	return &UploadIssueTemplateParams{
		ConfirmIgnoreCustomTagUpdates: &confirmIgnoreCustomTagUpdatesDefault,

		timeout: timeout,
	}
}

// NewUploadIssueTemplateParamsWithContext creates a new UploadIssueTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadIssueTemplateParamsWithContext(ctx context.Context) *UploadIssueTemplateParams {
	var (
		confirmIgnoreCustomTagUpdatesDefault = bool(false)
	)
	return &UploadIssueTemplateParams{
		ConfirmIgnoreCustomTagUpdates: &confirmIgnoreCustomTagUpdatesDefault,

		Context: ctx,
	}
}

// NewUploadIssueTemplateParamsWithHTTPClient creates a new UploadIssueTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadIssueTemplateParamsWithHTTPClient(client *http.Client) *UploadIssueTemplateParams {
	var (
		confirmIgnoreCustomTagUpdatesDefault = bool(false)
	)
	return &UploadIssueTemplateParams{
		ConfirmIgnoreCustomTagUpdates: &confirmIgnoreCustomTagUpdatesDefault,
		HTTPClient:                    client,
	}
}

/*UploadIssueTemplateParams contains all the parameters to send to the API endpoint
for the upload issue template operation typically these are written to a http.Request
*/
type UploadIssueTemplateParams struct {

	/*ConfirmIgnoreCustomTagUpdates
	  confirmIgnoreCustomTagUpdates

	*/
	ConfirmIgnoreCustomTagUpdates *bool
	/*Description
	  description

	*/
	Description *string
	/*File
	  file

	*/
	File runtime.NamedReadCloser
	/*Name
	  name

	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload issue template params
func (o *UploadIssueTemplateParams) WithTimeout(timeout time.Duration) *UploadIssueTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload issue template params
func (o *UploadIssueTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload issue template params
func (o *UploadIssueTemplateParams) WithContext(ctx context.Context) *UploadIssueTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload issue template params
func (o *UploadIssueTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload issue template params
func (o *UploadIssueTemplateParams) WithHTTPClient(client *http.Client) *UploadIssueTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload issue template params
func (o *UploadIssueTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfirmIgnoreCustomTagUpdates adds the confirmIgnoreCustomTagUpdates to the upload issue template params
func (o *UploadIssueTemplateParams) WithConfirmIgnoreCustomTagUpdates(confirmIgnoreCustomTagUpdates *bool) *UploadIssueTemplateParams {
	o.SetConfirmIgnoreCustomTagUpdates(confirmIgnoreCustomTagUpdates)
	return o
}

// SetConfirmIgnoreCustomTagUpdates adds the confirmIgnoreCustomTagUpdates to the upload issue template params
func (o *UploadIssueTemplateParams) SetConfirmIgnoreCustomTagUpdates(confirmIgnoreCustomTagUpdates *bool) {
	o.ConfirmIgnoreCustomTagUpdates = confirmIgnoreCustomTagUpdates
}

// WithDescription adds the description to the upload issue template params
func (o *UploadIssueTemplateParams) WithDescription(description *string) *UploadIssueTemplateParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the upload issue template params
func (o *UploadIssueTemplateParams) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the upload issue template params
func (o *UploadIssueTemplateParams) WithFile(file runtime.NamedReadCloser) *UploadIssueTemplateParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload issue template params
func (o *UploadIssueTemplateParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithName adds the name to the upload issue template params
func (o *UploadIssueTemplateParams) WithName(name *string) *UploadIssueTemplateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the upload issue template params
func (o *UploadIssueTemplateParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *UploadIssueTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConfirmIgnoreCustomTagUpdates != nil {

		// query param confirmIgnoreCustomTagUpdates
		var qrConfirmIgnoreCustomTagUpdates bool
		if o.ConfirmIgnoreCustomTagUpdates != nil {
			qrConfirmIgnoreCustomTagUpdates = *o.ConfirmIgnoreCustomTagUpdates
		}
		qConfirmIgnoreCustomTagUpdates := swag.FormatBool(qrConfirmIgnoreCustomTagUpdates)
		if qConfirmIgnoreCustomTagUpdates != "" {
			if err := r.SetQueryParam("confirmIgnoreCustomTagUpdates", qConfirmIgnoreCustomTagUpdates); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
