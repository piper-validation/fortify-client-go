// Code generated by go-swagger; DO NOT EDIT.

package job_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new job controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CancelJob(params *CancelJobParams, authInfo runtime.ClientAuthInfoWriter) (*CancelJobOK, error)

	ListJob(params *ListJobParams, authInfo runtime.ClientAuthInfoWriter) (*ListJobOK, error)

	ReadJob(params *ReadJobParams, authInfo runtime.ClientAuthInfoWriter) (*ReadJobOK, error)

	UpdateJob(params *UpdateJobParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CancelJob cancels a job
*/
func (a *Client) CancelJob(params *CancelJobParams, authInfo runtime.ClientAuthInfoWriter) (*CancelJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelJob",
		Method:             "POST",
		PathPattern:        "/jobs/action/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListJob lists
*/
func (a *Client) ListJob(params *ListJobParams, authInfo runtime.ClientAuthInfoWriter) (*ListJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listJob",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadJob reads
*/
func (a *Client) ReadJob(params *ReadJobParams, authInfo runtime.ClientAuthInfoWriter) (*ReadJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readJob",
		Method:             "GET",
		PathPattern:        "/jobs/{jobName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateJob updates
*/
func (a *Client) UpdateJob(params *UpdateJobParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJob",
		Method:             "PUT",
		PathPattern:        "/jobs/{jobName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
