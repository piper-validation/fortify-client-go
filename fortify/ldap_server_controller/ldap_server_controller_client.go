// Code generated by go-swagger; DO NOT EDIT.

package ldap_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ldap server controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ldap server controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateLdapServer(params *CreateLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLdapServerCreated, error)

	DeleteLdapServer(params *DeleteLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLdapServerOK, error)

	ListLdapServer(params *ListLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*ListLdapServerOK, error)

	MultiDeleteLdapServer(params *MultiDeleteLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteLdapServerOK, error)

	ReadLdapServer(params *ReadLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLdapServerOK, error)

	TestLdapServer(params *TestLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*TestLdapServerOK, error)

	UpdateLdapServer(params *UpdateLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLdapServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateLdapServer creates
*/
func (a *Client) CreateLdapServer(params *CreateLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLdapServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLdapServer",
		Method:             "POST",
		PathPattern:        "/ldapServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLdapServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLdapServer deletes
*/
func (a *Client) DeleteLdapServer(params *DeleteLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLdapServer",
		Method:             "DELETE",
		PathPattern:        "/ldapServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLdapServer lists
*/
func (a *Client) ListLdapServer(params *ListLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*ListLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLdapServer",
		Method:             "GET",
		PathPattern:        "/ldapServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteLdapServer multis delete
*/
func (a *Client) MultiDeleteLdapServer(params *MultiDeleteLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteLdapServer",
		Method:             "DELETE",
		PathPattern:        "/ldapServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadLdapServer reads
*/
func (a *Client) ReadLdapServer(params *ReadLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readLdapServer",
		Method:             "GET",
		PathPattern:        "/ldapServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestLdapServer validates that it is possible to authenticate to the ldap server using the configured ldap base d n and credentials
*/
func (a *Client) TestLdapServer(params *TestLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*TestLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testLdapServer",
		Method:             "POST",
		PathPattern:        "/ldapServers/action/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLdapServer updates
*/
func (a *Client) UpdateLdapServer(params *UpdateLdapServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLdapServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLdapServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLdapServer",
		Method:             "PUT",
		PathPattern:        "/ldapServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLdapServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLdapServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLdapServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
