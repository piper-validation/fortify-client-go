// Code generated by go-swagger; DO NOT EDIT.

package ldap_server_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadLdapServerReader is a Reader for the ReadLdapServer structure.
type ReadLdapServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadLdapServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadLdapServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadLdapServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadLdapServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadLdapServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadLdapServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadLdapServerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadLdapServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadLdapServerOK creates a ReadLdapServerOK with default headers values
func NewReadLdapServerOK() *ReadLdapServerOK {
	return &ReadLdapServerOK{}
}

/*ReadLdapServerOK handles this case with default header values.

OK
*/
type ReadLdapServerOK struct {
	Payload *models.APIResultLdapServerDto
}

func (o *ReadLdapServerOK) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerOK  %+v", 200, o.Payload)
}

func (o *ReadLdapServerOK) GetPayload() *models.APIResultLdapServerDto {
	return o.Payload
}

func (o *ReadLdapServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultLdapServerDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerBadRequest creates a ReadLdapServerBadRequest with default headers values
func NewReadLdapServerBadRequest() *ReadLdapServerBadRequest {
	return &ReadLdapServerBadRequest{}
}

/*ReadLdapServerBadRequest handles this case with default header values.

Bad Request
*/
type ReadLdapServerBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerBadRequest) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerBadRequest  %+v", 400, o.Payload)
}

func (o *ReadLdapServerBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerUnauthorized creates a ReadLdapServerUnauthorized with default headers values
func NewReadLdapServerUnauthorized() *ReadLdapServerUnauthorized {
	return &ReadLdapServerUnauthorized{}
}

/*ReadLdapServerUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadLdapServerUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadLdapServerUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerForbidden creates a ReadLdapServerForbidden with default headers values
func NewReadLdapServerForbidden() *ReadLdapServerForbidden {
	return &ReadLdapServerForbidden{}
}

/*ReadLdapServerForbidden handles this case with default header values.

Forbidden
*/
type ReadLdapServerForbidden struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerForbidden) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerForbidden  %+v", 403, o.Payload)
}

func (o *ReadLdapServerForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerNotFound creates a ReadLdapServerNotFound with default headers values
func NewReadLdapServerNotFound() *ReadLdapServerNotFound {
	return &ReadLdapServerNotFound{}
}

/*ReadLdapServerNotFound handles this case with default header values.

Not Found
*/
type ReadLdapServerNotFound struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerNotFound) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerNotFound  %+v", 404, o.Payload)
}

func (o *ReadLdapServerNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerConflict creates a ReadLdapServerConflict with default headers values
func NewReadLdapServerConflict() *ReadLdapServerConflict {
	return &ReadLdapServerConflict{}
}

/*ReadLdapServerConflict handles this case with default header values.

Conflict
*/
type ReadLdapServerConflict struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerConflict) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerConflict  %+v", 409, o.Payload)
}

func (o *ReadLdapServerConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLdapServerInternalServerError creates a ReadLdapServerInternalServerError with default headers values
func NewReadLdapServerInternalServerError() *ReadLdapServerInternalServerError {
	return &ReadLdapServerInternalServerError{}
}

/*ReadLdapServerInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadLdapServerInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadLdapServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /ldapServers/{id}][%d] readLdapServerInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLdapServerInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLdapServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
