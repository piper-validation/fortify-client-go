// Code generated by go-swagger; DO NOT EDIT.

package license_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// GetLicenseReader is a Reader for the GetLicense structure.
type GetLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLicenseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetLicenseConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLicenseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLicenseOK creates a GetLicenseOK with default headers values
func NewGetLicenseOK() *GetLicenseOK {
	return &GetLicenseOK{}
}

/*GetLicenseOK handles this case with default header values.

OK
*/
type GetLicenseOK struct {
	Payload *models.APIResultLicense
}

func (o *GetLicenseOK) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseOK  %+v", 200, o.Payload)
}

func (o *GetLicenseOK) GetPayload() *models.APIResultLicense {
	return o.Payload
}

func (o *GetLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultLicense)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseBadRequest creates a GetLicenseBadRequest with default headers values
func NewGetLicenseBadRequest() *GetLicenseBadRequest {
	return &GetLicenseBadRequest{}
}

/*GetLicenseBadRequest handles this case with default header values.

Bad Request
*/
type GetLicenseBadRequest struct {
	Payload *models.APIResult
}

func (o *GetLicenseBadRequest) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseBadRequest  %+v", 400, o.Payload)
}

func (o *GetLicenseBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseUnauthorized creates a GetLicenseUnauthorized with default headers values
func NewGetLicenseUnauthorized() *GetLicenseUnauthorized {
	return &GetLicenseUnauthorized{}
}

/*GetLicenseUnauthorized handles this case with default header values.

Unauthorized
*/
type GetLicenseUnauthorized struct {
	Payload *models.APIResult
}

func (o *GetLicenseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLicenseUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseForbidden creates a GetLicenseForbidden with default headers values
func NewGetLicenseForbidden() *GetLicenseForbidden {
	return &GetLicenseForbidden{}
}

/*GetLicenseForbidden handles this case with default header values.

Forbidden
*/
type GetLicenseForbidden struct {
	Payload *models.APIResult
}

func (o *GetLicenseForbidden) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseForbidden  %+v", 403, o.Payload)
}

func (o *GetLicenseForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseNotFound creates a GetLicenseNotFound with default headers values
func NewGetLicenseNotFound() *GetLicenseNotFound {
	return &GetLicenseNotFound{}
}

/*GetLicenseNotFound handles this case with default header values.

Not Found
*/
type GetLicenseNotFound struct {
	Payload *models.APIResult
}

func (o *GetLicenseNotFound) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseNotFound  %+v", 404, o.Payload)
}

func (o *GetLicenseNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseConflict creates a GetLicenseConflict with default headers values
func NewGetLicenseConflict() *GetLicenseConflict {
	return &GetLicenseConflict{}
}

/*GetLicenseConflict handles this case with default header values.

Conflict
*/
type GetLicenseConflict struct {
	Payload *models.APIResult
}

func (o *GetLicenseConflict) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseConflict  %+v", 409, o.Payload)
}

func (o *GetLicenseConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseInternalServerError creates a GetLicenseInternalServerError with default headers values
func NewGetLicenseInternalServerError() *GetLicenseInternalServerError {
	return &GetLicenseInternalServerError{}
}

/*GetLicenseInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetLicenseInternalServerError struct {
	Payload *models.APIResult
}

func (o *GetLicenseInternalServerError) Error() string {
	return fmt.Sprintf("[GET /license][%d] getLicenseInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLicenseInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *GetLicenseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
