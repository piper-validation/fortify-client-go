// Code generated by go-swagger; DO NOT EDIT.

package local_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// NewCreateLocalUserParams creates a new CreateLocalUserParams object
// with the default values initialized.
func NewCreateLocalUserParams() *CreateLocalUserParams {
	var ()
	return &CreateLocalUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLocalUserParamsWithTimeout creates a new CreateLocalUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLocalUserParamsWithTimeout(timeout time.Duration) *CreateLocalUserParams {
	var ()
	return &CreateLocalUserParams{

		timeout: timeout,
	}
}

// NewCreateLocalUserParamsWithContext creates a new CreateLocalUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLocalUserParamsWithContext(ctx context.Context) *CreateLocalUserParams {
	var ()
	return &CreateLocalUserParams{

		Context: ctx,
	}
}

// NewCreateLocalUserParamsWithHTTPClient creates a new CreateLocalUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLocalUserParamsWithHTTPClient(client *http.Client) *CreateLocalUserParams {
	var ()
	return &CreateLocalUserParams{
		HTTPClient: client,
	}
}

/*CreateLocalUserParams contains all the parameters to send to the API endpoint
for the create local user operation typically these are written to a http.Request
*/
type CreateLocalUserParams struct {

	/*User
	  user

	*/
	User *models.LocalUser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create local user params
func (o *CreateLocalUserParams) WithTimeout(timeout time.Duration) *CreateLocalUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create local user params
func (o *CreateLocalUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create local user params
func (o *CreateLocalUserParams) WithContext(ctx context.Context) *CreateLocalUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create local user params
func (o *CreateLocalUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create local user params
func (o *CreateLocalUserParams) WithHTTPClient(client *http.Client) *CreateLocalUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create local user params
func (o *CreateLocalUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the create local user params
func (o *CreateLocalUserParams) WithUser(user *models.LocalUser) *CreateLocalUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the create local user params
func (o *CreateLocalUserParams) SetUser(user *models.LocalUser) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLocalUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.User != nil {
		if err := r.SetBodyParam(o.User); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
