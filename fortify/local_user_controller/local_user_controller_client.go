// Code generated by go-swagger; DO NOT EDIT.

package local_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new local user controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for local user controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CheckLocalUser(params *CheckLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*CheckLocalUserOK, error)

	CreateLocalUser(params *CreateLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLocalUserCreated, error)

	DeleteLocalUser(params *DeleteLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLocalUserOK, error)

	ListLocalUser(params *ListLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*ListLocalUserOK, error)

	MultiDeleteLocalUser(params *MultiDeleteLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteLocalUserOK, error)

	ReadLocalUser(params *ReadLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLocalUserOK, error)

	UpdateLocalUser(params *UpdateLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLocalUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckLocalUser checks the provided password using the system password strength validator and the specified dictionaries
*/
func (a *Client) CheckLocalUser(params *CheckLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*CheckLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkLocalUser",
		Method:             "POST",
		PathPattern:        "/localUsers/action/checkPasswordStrength",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLocalUser creates
*/
func (a *Client) CreateLocalUser(params *CreateLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLocalUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLocalUser",
		Method:             "POST",
		PathPattern:        "/localUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLocalUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLocalUser deletes
*/
func (a *Client) DeleteLocalUser(params *DeleteLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLocalUser",
		Method:             "DELETE",
		PathPattern:        "/localUsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLocalUser lists
*/
func (a *Client) ListLocalUser(params *ListLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*ListLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLocalUser",
		Method:             "GET",
		PathPattern:        "/localUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteLocalUser multis delete
*/
func (a *Client) MultiDeleteLocalUser(params *MultiDeleteLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteLocalUser",
		Method:             "DELETE",
		PathPattern:        "/localUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadLocalUser reads
*/
func (a *Client) ReadLocalUser(params *ReadLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*ReadLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readLocalUser",
		Method:             "GET",
		PathPattern:        "/localUsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLocalUser updates
*/
func (a *Client) UpdateLocalUser(params *UpdateLocalUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLocalUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLocalUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLocalUser",
		Method:             "PUT",
		PathPattern:        "/localUsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLocalUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLocalUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLocalUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
