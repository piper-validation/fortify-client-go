// Code generated by go-swagger; DO NOT EDIT.

package local_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadLocalUserReader is a Reader for the ReadLocalUser structure.
type ReadLocalUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadLocalUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadLocalUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadLocalUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadLocalUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadLocalUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadLocalUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadLocalUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadLocalUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadLocalUserOK creates a ReadLocalUserOK with default headers values
func NewReadLocalUserOK() *ReadLocalUserOK {
	return &ReadLocalUserOK{}
}

/*ReadLocalUserOK handles this case with default header values.

OK
*/
type ReadLocalUserOK struct {
	Payload *models.APIResultLocalUser
}

func (o *ReadLocalUserOK) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserOK  %+v", 200, o.Payload)
}

func (o *ReadLocalUserOK) GetPayload() *models.APIResultLocalUser {
	return o.Payload
}

func (o *ReadLocalUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultLocalUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserBadRequest creates a ReadLocalUserBadRequest with default headers values
func NewReadLocalUserBadRequest() *ReadLocalUserBadRequest {
	return &ReadLocalUserBadRequest{}
}

/*ReadLocalUserBadRequest handles this case with default header values.

Bad Request
*/
type ReadLocalUserBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserBadRequest  %+v", 400, o.Payload)
}

func (o *ReadLocalUserBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserUnauthorized creates a ReadLocalUserUnauthorized with default headers values
func NewReadLocalUserUnauthorized() *ReadLocalUserUnauthorized {
	return &ReadLocalUserUnauthorized{}
}

/*ReadLocalUserUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadLocalUserUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserUnauthorized) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadLocalUserUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserForbidden creates a ReadLocalUserForbidden with default headers values
func NewReadLocalUserForbidden() *ReadLocalUserForbidden {
	return &ReadLocalUserForbidden{}
}

/*ReadLocalUserForbidden handles this case with default header values.

Forbidden
*/
type ReadLocalUserForbidden struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserForbidden) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserForbidden  %+v", 403, o.Payload)
}

func (o *ReadLocalUserForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserNotFound creates a ReadLocalUserNotFound with default headers values
func NewReadLocalUserNotFound() *ReadLocalUserNotFound {
	return &ReadLocalUserNotFound{}
}

/*ReadLocalUserNotFound handles this case with default header values.

Not Found
*/
type ReadLocalUserNotFound struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserNotFound) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserNotFound  %+v", 404, o.Payload)
}

func (o *ReadLocalUserNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserConflict creates a ReadLocalUserConflict with default headers values
func NewReadLocalUserConflict() *ReadLocalUserConflict {
	return &ReadLocalUserConflict{}
}

/*ReadLocalUserConflict handles this case with default header values.

Conflict
*/
type ReadLocalUserConflict struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserConflict) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserConflict  %+v", 409, o.Payload)
}

func (o *ReadLocalUserConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadLocalUserInternalServerError creates a ReadLocalUserInternalServerError with default headers values
func NewReadLocalUserInternalServerError() *ReadLocalUserInternalServerError {
	return &ReadLocalUserInternalServerError{}
}

/*ReadLocalUserInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadLocalUserInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadLocalUserInternalServerError) Error() string {
	return fmt.Sprintf("[GET /localUsers/{id}][%d] readLocalUserInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadLocalUserInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadLocalUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
