// Code generated by go-swagger; DO NOT EDIT.

package local_user_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// NewUpdateLocalUserParams creates a new UpdateLocalUserParams object
// with the default values initialized.
func NewUpdateLocalUserParams() *UpdateLocalUserParams {
	var ()
	return &UpdateLocalUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateLocalUserParamsWithTimeout creates a new UpdateLocalUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateLocalUserParamsWithTimeout(timeout time.Duration) *UpdateLocalUserParams {
	var ()
	return &UpdateLocalUserParams{

		timeout: timeout,
	}
}

// NewUpdateLocalUserParamsWithContext creates a new UpdateLocalUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateLocalUserParamsWithContext(ctx context.Context) *UpdateLocalUserParams {
	var ()
	return &UpdateLocalUserParams{

		Context: ctx,
	}
}

// NewUpdateLocalUserParamsWithHTTPClient creates a new UpdateLocalUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateLocalUserParamsWithHTTPClient(client *http.Client) *UpdateLocalUserParams {
	var ()
	return &UpdateLocalUserParams{
		HTTPClient: client,
	}
}

/*UpdateLocalUserParams contains all the parameters to send to the API endpoint
for the update local user operation typically these are written to a http.Request
*/
type UpdateLocalUserParams struct {

	/*ID
	  id

	*/
	ID int64
	/*User
	  user

	*/
	User *models.LocalUser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update local user params
func (o *UpdateLocalUserParams) WithTimeout(timeout time.Duration) *UpdateLocalUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update local user params
func (o *UpdateLocalUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update local user params
func (o *UpdateLocalUserParams) WithContext(ctx context.Context) *UpdateLocalUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update local user params
func (o *UpdateLocalUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update local user params
func (o *UpdateLocalUserParams) WithHTTPClient(client *http.Client) *UpdateLocalUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update local user params
func (o *UpdateLocalUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update local user params
func (o *UpdateLocalUserParams) WithID(id int64) *UpdateLocalUserParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update local user params
func (o *UpdateLocalUserParams) SetID(id int64) {
	o.ID = id
}

// WithUser adds the user to the update local user params
func (o *UpdateLocalUserParams) WithUser(user *models.LocalUser) *UpdateLocalUserParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the update local user params
func (o *UpdateLocalUserParams) SetUser(user *models.LocalUser) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateLocalUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.User != nil {
		if err := r.SetBodyParam(o.User); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
