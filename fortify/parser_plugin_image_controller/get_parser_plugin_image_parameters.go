// Code generated by go-swagger; DO NOT EDIT.

package parser_plugin_image_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParserPluginImageParams creates a new GetParserPluginImageParams object
// with the default values initialized.
func NewGetParserPluginImageParams() *GetParserPluginImageParams {
	var ()
	return &GetParserPluginImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParserPluginImageParamsWithTimeout creates a new GetParserPluginImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParserPluginImageParamsWithTimeout(timeout time.Duration) *GetParserPluginImageParams {
	var ()
	return &GetParserPluginImageParams{

		timeout: timeout,
	}
}

// NewGetParserPluginImageParamsWithContext creates a new GetParserPluginImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetParserPluginImageParamsWithContext(ctx context.Context) *GetParserPluginImageParams {
	var ()
	return &GetParserPluginImageParams{

		Context: ctx,
	}
}

// NewGetParserPluginImageParamsWithHTTPClient creates a new GetParserPluginImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetParserPluginImageParamsWithHTTPClient(client *http.Client) *GetParserPluginImageParams {
	var ()
	return &GetParserPluginImageParams{
		HTTPClient: client,
	}
}

/*GetParserPluginImageParams contains all the parameters to send to the API endpoint
for the get parser plugin image operation typically these are written to a http.Request
*/
type GetParserPluginImageParams struct {

	/*DataVersion
	  dataVersion

	*/
	DataVersion int64
	/*EngineType
	  engineType

	*/
	EngineType string
	/*ImageType
	  imageType

	*/
	ImageType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get parser plugin image params
func (o *GetParserPluginImageParams) WithTimeout(timeout time.Duration) *GetParserPluginImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get parser plugin image params
func (o *GetParserPluginImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get parser plugin image params
func (o *GetParserPluginImageParams) WithContext(ctx context.Context) *GetParserPluginImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get parser plugin image params
func (o *GetParserPluginImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get parser plugin image params
func (o *GetParserPluginImageParams) WithHTTPClient(client *http.Client) *GetParserPluginImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get parser plugin image params
func (o *GetParserPluginImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataVersion adds the dataVersion to the get parser plugin image params
func (o *GetParserPluginImageParams) WithDataVersion(dataVersion int64) *GetParserPluginImageParams {
	o.SetDataVersion(dataVersion)
	return o
}

// SetDataVersion adds the dataVersion to the get parser plugin image params
func (o *GetParserPluginImageParams) SetDataVersion(dataVersion int64) {
	o.DataVersion = dataVersion
}

// WithEngineType adds the engineType to the get parser plugin image params
func (o *GetParserPluginImageParams) WithEngineType(engineType string) *GetParserPluginImageParams {
	o.SetEngineType(engineType)
	return o
}

// SetEngineType adds the engineType to the get parser plugin image params
func (o *GetParserPluginImageParams) SetEngineType(engineType string) {
	o.EngineType = engineType
}

// WithImageType adds the imageType to the get parser plugin image params
func (o *GetParserPluginImageParams) WithImageType(imageType string) *GetParserPluginImageParams {
	o.SetImageType(imageType)
	return o
}

// SetImageType adds the imageType to the get parser plugin image params
func (o *GetParserPluginImageParams) SetImageType(imageType string) {
	o.ImageType = imageType
}

// WriteToRequest writes these params to a swagger request
func (o *GetParserPluginImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dataVersion
	qrDataVersion := o.DataVersion
	qDataVersion := swag.FormatInt64(qrDataVersion)
	if qDataVersion != "" {
		if err := r.SetQueryParam("dataVersion", qDataVersion); err != nil {
			return err
		}
	}

	// query param engineType
	qrEngineType := o.EngineType
	qEngineType := qrEngineType
	if qEngineType != "" {
		if err := r.SetQueryParam("engineType", qEngineType); err != nil {
			return err
		}
	}

	// query param imageType
	qrImageType := o.ImageType
	qImageType := qrImageType
	if qImageType != "" {
		if err := r.SetQueryParam("imageType", qImageType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
