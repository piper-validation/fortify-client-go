// Code generated by go-swagger; DO NOT EDIT.

package permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadPermissionReader is a Reader for the ReadPermission structure.
type ReadPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadPermissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadPermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadPermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadPermissionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadPermissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadPermissionOK creates a ReadPermissionOK with default headers values
func NewReadPermissionOK() *ReadPermissionOK {
	return &ReadPermissionOK{}
}

/*ReadPermissionOK handles this case with default header values.

OK
*/
type ReadPermissionOK struct {
	Payload *models.APIResultPermission
}

func (o *ReadPermissionOK) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionOK  %+v", 200, o.Payload)
}

func (o *ReadPermissionOK) GetPayload() *models.APIResultPermission {
	return o.Payload
}

func (o *ReadPermissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionBadRequest creates a ReadPermissionBadRequest with default headers values
func NewReadPermissionBadRequest() *ReadPermissionBadRequest {
	return &ReadPermissionBadRequest{}
}

/*ReadPermissionBadRequest handles this case with default header values.

Bad Request
*/
type ReadPermissionBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadPermissionBadRequest) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionBadRequest  %+v", 400, o.Payload)
}

func (o *ReadPermissionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionUnauthorized creates a ReadPermissionUnauthorized with default headers values
func NewReadPermissionUnauthorized() *ReadPermissionUnauthorized {
	return &ReadPermissionUnauthorized{}
}

/*ReadPermissionUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadPermissionUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadPermissionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionForbidden creates a ReadPermissionForbidden with default headers values
func NewReadPermissionForbidden() *ReadPermissionForbidden {
	return &ReadPermissionForbidden{}
}

/*ReadPermissionForbidden handles this case with default header values.

Forbidden
*/
type ReadPermissionForbidden struct {
	Payload *models.APIResult
}

func (o *ReadPermissionForbidden) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionForbidden  %+v", 403, o.Payload)
}

func (o *ReadPermissionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionNotFound creates a ReadPermissionNotFound with default headers values
func NewReadPermissionNotFound() *ReadPermissionNotFound {
	return &ReadPermissionNotFound{}
}

/*ReadPermissionNotFound handles this case with default header values.

Not Found
*/
type ReadPermissionNotFound struct {
	Payload *models.APIResult
}

func (o *ReadPermissionNotFound) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionNotFound  %+v", 404, o.Payload)
}

func (o *ReadPermissionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionConflict creates a ReadPermissionConflict with default headers values
func NewReadPermissionConflict() *ReadPermissionConflict {
	return &ReadPermissionConflict{}
}

/*ReadPermissionConflict handles this case with default header values.

Conflict
*/
type ReadPermissionConflict struct {
	Payload *models.APIResult
}

func (o *ReadPermissionConflict) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionConflict  %+v", 409, o.Payload)
}

func (o *ReadPermissionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadPermissionInternalServerError creates a ReadPermissionInternalServerError with default headers values
func NewReadPermissionInternalServerError() *ReadPermissionInternalServerError {
	return &ReadPermissionInternalServerError{}
}

/*ReadPermissionInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadPermissionInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadPermissionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /permissions/{id}][%d] readPermissionInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadPermissionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadPermissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
