// Code generated by go-swagger; DO NOT EDIT.

package permission_required_by_permission_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ListPermissionRequiredByPermissionReader is a Reader for the ListPermissionRequiredByPermission structure.
type ListPermissionRequiredByPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPermissionRequiredByPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPermissionRequiredByPermissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPermissionRequiredByPermissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListPermissionRequiredByPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPermissionRequiredByPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPermissionRequiredByPermissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewListPermissionRequiredByPermissionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPermissionRequiredByPermissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListPermissionRequiredByPermissionOK creates a ListPermissionRequiredByPermissionOK with default headers values
func NewListPermissionRequiredByPermissionOK() *ListPermissionRequiredByPermissionOK {
	return &ListPermissionRequiredByPermissionOK{}
}

/*ListPermissionRequiredByPermissionOK handles this case with default header values.

OK
*/
type ListPermissionRequiredByPermissionOK struct {
	Payload *models.APIResultListPermission
}

func (o *ListPermissionRequiredByPermissionOK) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionOK  %+v", 200, o.Payload)
}

func (o *ListPermissionRequiredByPermissionOK) GetPayload() *models.APIResultListPermission {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionBadRequest creates a ListPermissionRequiredByPermissionBadRequest with default headers values
func NewListPermissionRequiredByPermissionBadRequest() *ListPermissionRequiredByPermissionBadRequest {
	return &ListPermissionRequiredByPermissionBadRequest{}
}

/*ListPermissionRequiredByPermissionBadRequest handles this case with default header values.

Bad Request
*/
type ListPermissionRequiredByPermissionBadRequest struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionBadRequest) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionBadRequest  %+v", 400, o.Payload)
}

func (o *ListPermissionRequiredByPermissionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionUnauthorized creates a ListPermissionRequiredByPermissionUnauthorized with default headers values
func NewListPermissionRequiredByPermissionUnauthorized() *ListPermissionRequiredByPermissionUnauthorized {
	return &ListPermissionRequiredByPermissionUnauthorized{}
}

/*ListPermissionRequiredByPermissionUnauthorized handles this case with default header values.

Unauthorized
*/
type ListPermissionRequiredByPermissionUnauthorized struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPermissionRequiredByPermissionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionForbidden creates a ListPermissionRequiredByPermissionForbidden with default headers values
func NewListPermissionRequiredByPermissionForbidden() *ListPermissionRequiredByPermissionForbidden {
	return &ListPermissionRequiredByPermissionForbidden{}
}

/*ListPermissionRequiredByPermissionForbidden handles this case with default header values.

Forbidden
*/
type ListPermissionRequiredByPermissionForbidden struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionForbidden) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionForbidden  %+v", 403, o.Payload)
}

func (o *ListPermissionRequiredByPermissionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionNotFound creates a ListPermissionRequiredByPermissionNotFound with default headers values
func NewListPermissionRequiredByPermissionNotFound() *ListPermissionRequiredByPermissionNotFound {
	return &ListPermissionRequiredByPermissionNotFound{}
}

/*ListPermissionRequiredByPermissionNotFound handles this case with default header values.

Not Found
*/
type ListPermissionRequiredByPermissionNotFound struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionNotFound) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionNotFound  %+v", 404, o.Payload)
}

func (o *ListPermissionRequiredByPermissionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionConflict creates a ListPermissionRequiredByPermissionConflict with default headers values
func NewListPermissionRequiredByPermissionConflict() *ListPermissionRequiredByPermissionConflict {
	return &ListPermissionRequiredByPermissionConflict{}
}

/*ListPermissionRequiredByPermissionConflict handles this case with default header values.

Conflict
*/
type ListPermissionRequiredByPermissionConflict struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionConflict) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionConflict  %+v", 409, o.Payload)
}

func (o *ListPermissionRequiredByPermissionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPermissionRequiredByPermissionInternalServerError creates a ListPermissionRequiredByPermissionInternalServerError with default headers values
func NewListPermissionRequiredByPermissionInternalServerError() *ListPermissionRequiredByPermissionInternalServerError {
	return &ListPermissionRequiredByPermissionInternalServerError{}
}

/*ListPermissionRequiredByPermissionInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListPermissionRequiredByPermissionInternalServerError struct {
	Payload *models.APIResult
}

func (o *ListPermissionRequiredByPermissionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /permissions/{parentId}/dependsOn][%d] listPermissionRequiredByPermissionInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPermissionRequiredByPermissionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ListPermissionRequiredByPermissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
