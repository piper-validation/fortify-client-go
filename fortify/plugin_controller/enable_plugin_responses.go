// Code generated by go-swagger; DO NOT EDIT.

package plugin_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// EnablePluginReader is a Reader for the EnablePlugin structure.
type EnablePluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnablePluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnablePluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnablePluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnablePluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnablePluginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnablePluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEnablePluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnablePluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEnablePluginOK creates a EnablePluginOK with default headers values
func NewEnablePluginOK() *EnablePluginOK {
	return &EnablePluginOK{}
}

/*EnablePluginOK handles this case with default header values.

OK
*/
type EnablePluginOK struct {
	Payload *models.APIResultVoid
}

func (o *EnablePluginOK) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginOK  %+v", 200, o.Payload)
}

func (o *EnablePluginOK) GetPayload() *models.APIResultVoid {
	return o.Payload
}

func (o *EnablePluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginBadRequest creates a EnablePluginBadRequest with default headers values
func NewEnablePluginBadRequest() *EnablePluginBadRequest {
	return &EnablePluginBadRequest{}
}

/*EnablePluginBadRequest handles this case with default header values.

Bad Request
*/
type EnablePluginBadRequest struct {
	Payload *models.APIResult
}

func (o *EnablePluginBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginBadRequest  %+v", 400, o.Payload)
}

func (o *EnablePluginBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginUnauthorized creates a EnablePluginUnauthorized with default headers values
func NewEnablePluginUnauthorized() *EnablePluginUnauthorized {
	return &EnablePluginUnauthorized{}
}

/*EnablePluginUnauthorized handles this case with default header values.

Unauthorized
*/
type EnablePluginUnauthorized struct {
	Payload *models.APIResult
}

func (o *EnablePluginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginUnauthorized  %+v", 401, o.Payload)
}

func (o *EnablePluginUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginForbidden creates a EnablePluginForbidden with default headers values
func NewEnablePluginForbidden() *EnablePluginForbidden {
	return &EnablePluginForbidden{}
}

/*EnablePluginForbidden handles this case with default header values.

Forbidden
*/
type EnablePluginForbidden struct {
	Payload *models.APIResult
}

func (o *EnablePluginForbidden) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginForbidden  %+v", 403, o.Payload)
}

func (o *EnablePluginForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginNotFound creates a EnablePluginNotFound with default headers values
func NewEnablePluginNotFound() *EnablePluginNotFound {
	return &EnablePluginNotFound{}
}

/*EnablePluginNotFound handles this case with default header values.

Not Found
*/
type EnablePluginNotFound struct {
	Payload *models.APIResult
}

func (o *EnablePluginNotFound) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginNotFound  %+v", 404, o.Payload)
}

func (o *EnablePluginNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginConflict creates a EnablePluginConflict with default headers values
func NewEnablePluginConflict() *EnablePluginConflict {
	return &EnablePluginConflict{}
}

/*EnablePluginConflict handles this case with default header values.

Conflict
*/
type EnablePluginConflict struct {
	Payload *models.APIResult
}

func (o *EnablePluginConflict) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginConflict  %+v", 409, o.Payload)
}

func (o *EnablePluginConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePluginInternalServerError creates a EnablePluginInternalServerError with default headers values
func NewEnablePluginInternalServerError() *EnablePluginInternalServerError {
	return &EnablePluginInternalServerError{}
}

/*EnablePluginInternalServerError handles this case with default header values.

Internal Server Error
*/
type EnablePluginInternalServerError struct {
	Payload *models.APIResult
}

func (o *EnablePluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins/action/enable][%d] enablePluginInternalServerError  %+v", 500, o.Payload)
}

func (o *EnablePluginInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *EnablePluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
