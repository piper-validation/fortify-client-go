// Code generated by go-swagger; DO NOT EDIT.

package plugin_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UploadPluginReader is a Reader for the UploadPlugin structure.
type UploadPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadPluginCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadPluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadPluginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadPluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadPluginConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadPluginCreated creates a UploadPluginCreated with default headers values
func NewUploadPluginCreated() *UploadPluginCreated {
	return &UploadPluginCreated{}
}

/*UploadPluginCreated handles this case with default header values.

Created
*/
type UploadPluginCreated struct {
	Payload *models.APIResultPluginMetaData
}

func (o *UploadPluginCreated) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginCreated  %+v", 201, o.Payload)
}

func (o *UploadPluginCreated) GetPayload() *models.APIResultPluginMetaData {
	return o.Payload
}

func (o *UploadPluginCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultPluginMetaData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginBadRequest creates a UploadPluginBadRequest with default headers values
func NewUploadPluginBadRequest() *UploadPluginBadRequest {
	return &UploadPluginBadRequest{}
}

/*UploadPluginBadRequest handles this case with default header values.

Bad Request
*/
type UploadPluginBadRequest struct {
	Payload *models.APIResult
}

func (o *UploadPluginBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginBadRequest  %+v", 400, o.Payload)
}

func (o *UploadPluginBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginUnauthorized creates a UploadPluginUnauthorized with default headers values
func NewUploadPluginUnauthorized() *UploadPluginUnauthorized {
	return &UploadPluginUnauthorized{}
}

/*UploadPluginUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadPluginUnauthorized struct {
	Payload *models.APIResult
}

func (o *UploadPluginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadPluginUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginForbidden creates a UploadPluginForbidden with default headers values
func NewUploadPluginForbidden() *UploadPluginForbidden {
	return &UploadPluginForbidden{}
}

/*UploadPluginForbidden handles this case with default header values.

Forbidden
*/
type UploadPluginForbidden struct {
	Payload *models.APIResult
}

func (o *UploadPluginForbidden) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginForbidden  %+v", 403, o.Payload)
}

func (o *UploadPluginForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginNotFound creates a UploadPluginNotFound with default headers values
func NewUploadPluginNotFound() *UploadPluginNotFound {
	return &UploadPluginNotFound{}
}

/*UploadPluginNotFound handles this case with default header values.

Not Found
*/
type UploadPluginNotFound struct {
	Payload *models.APIResult
}

func (o *UploadPluginNotFound) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginNotFound  %+v", 404, o.Payload)
}

func (o *UploadPluginNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginConflict creates a UploadPluginConflict with default headers values
func NewUploadPluginConflict() *UploadPluginConflict {
	return &UploadPluginConflict{}
}

/*UploadPluginConflict handles this case with default header values.

Conflict
*/
type UploadPluginConflict struct {
	Payload *models.APIResult
}

func (o *UploadPluginConflict) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginConflict  %+v", 409, o.Payload)
}

func (o *UploadPluginConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadPluginInternalServerError creates a UploadPluginInternalServerError with default headers values
func NewUploadPluginInternalServerError() *UploadPluginInternalServerError {
	return &UploadPluginInternalServerError{}
}

/*UploadPluginInternalServerError handles this case with default header values.

Internal Server Error
*/
type UploadPluginInternalServerError struct {
	Payload *models.APIResult
}

func (o *UploadPluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins][%d] uploadPluginInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadPluginInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
