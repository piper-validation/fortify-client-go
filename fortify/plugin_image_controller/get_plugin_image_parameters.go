// Code generated by go-swagger; DO NOT EDIT.

package plugin_image_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPluginImageParams creates a new GetPluginImageParams object
// with the default values initialized.
func NewGetPluginImageParams() *GetPluginImageParams {
	var ()
	return &GetPluginImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPluginImageParamsWithTimeout creates a new GetPluginImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPluginImageParamsWithTimeout(timeout time.Duration) *GetPluginImageParams {
	var ()
	return &GetPluginImageParams{

		timeout: timeout,
	}
}

// NewGetPluginImageParamsWithContext creates a new GetPluginImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPluginImageParamsWithContext(ctx context.Context) *GetPluginImageParams {
	var ()
	return &GetPluginImageParams{

		Context: ctx,
	}
}

// NewGetPluginImageParamsWithHTTPClient creates a new GetPluginImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPluginImageParamsWithHTTPClient(client *http.Client) *GetPluginImageParams {
	var ()
	return &GetPluginImageParams{
		HTTPClient: client,
	}
}

/*GetPluginImageParams contains all the parameters to send to the API endpoint
for the get plugin image operation typically these are written to a http.Request
*/
type GetPluginImageParams struct {

	/*ImageType
	  imageType

	*/
	ImageType string
	/*MetadataID
	  metadataId

	*/
	MetadataID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get plugin image params
func (o *GetPluginImageParams) WithTimeout(timeout time.Duration) *GetPluginImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get plugin image params
func (o *GetPluginImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get plugin image params
func (o *GetPluginImageParams) WithContext(ctx context.Context) *GetPluginImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get plugin image params
func (o *GetPluginImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get plugin image params
func (o *GetPluginImageParams) WithHTTPClient(client *http.Client) *GetPluginImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get plugin image params
func (o *GetPluginImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImageType adds the imageType to the get plugin image params
func (o *GetPluginImageParams) WithImageType(imageType string) *GetPluginImageParams {
	o.SetImageType(imageType)
	return o
}

// SetImageType adds the imageType to the get plugin image params
func (o *GetPluginImageParams) SetImageType(imageType string) {
	o.ImageType = imageType
}

// WithMetadataID adds the metadataID to the get plugin image params
func (o *GetPluginImageParams) WithMetadataID(metadataID int64) *GetPluginImageParams {
	o.SetMetadataID(metadataID)
	return o
}

// SetMetadataID adds the metadataId to the get plugin image params
func (o *GetPluginImageParams) SetMetadataID(metadataID int64) {
	o.MetadataID = metadataID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPluginImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param imageType
	qrImageType := o.ImageType
	qImageType := qrImageType
	if qImageType != "" {
		if err := r.SetQueryParam("imageType", qImageType); err != nil {
			return err
		}
	}

	// query param metadataId
	qrMetadataID := o.MetadataID
	qMetadataID := swag.FormatInt64(qrMetadataID)
	if qMetadataID != "" {
		if err := r.SetQueryParam("metadataId", qMetadataID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
