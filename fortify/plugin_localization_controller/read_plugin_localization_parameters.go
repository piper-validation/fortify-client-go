// Code generated by go-swagger; DO NOT EDIT.

package plugin_localization_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReadPluginLocalizationParams creates a new ReadPluginLocalizationParams object
// with the default values initialized.
func NewReadPluginLocalizationParams() *ReadPluginLocalizationParams {
	var ()
	return &ReadPluginLocalizationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadPluginLocalizationParamsWithTimeout creates a new ReadPluginLocalizationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadPluginLocalizationParamsWithTimeout(timeout time.Duration) *ReadPluginLocalizationParams {
	var ()
	return &ReadPluginLocalizationParams{

		timeout: timeout,
	}
}

// NewReadPluginLocalizationParamsWithContext creates a new ReadPluginLocalizationParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadPluginLocalizationParamsWithContext(ctx context.Context) *ReadPluginLocalizationParams {
	var ()
	return &ReadPluginLocalizationParams{

		Context: ctx,
	}
}

// NewReadPluginLocalizationParamsWithHTTPClient creates a new ReadPluginLocalizationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadPluginLocalizationParamsWithHTTPClient(client *http.Client) *ReadPluginLocalizationParams {
	var ()
	return &ReadPluginLocalizationParams{
		HTTPClient: client,
	}
}

/*ReadPluginLocalizationParams contains all the parameters to send to the API endpoint
for the read plugin localization operation typically these are written to a http.Request
*/
type ReadPluginLocalizationParams struct {

	/*DataVersion
	  dataVersion

	*/
	DataVersion int32
	/*EngineType
	  engineType

	*/
	EngineType string
	/*Language
	  language

	*/
	Language string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithTimeout(timeout time.Duration) *ReadPluginLocalizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithContext(ctx context.Context) *ReadPluginLocalizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithHTTPClient(client *http.Client) *ReadPluginLocalizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataVersion adds the dataVersion to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithDataVersion(dataVersion int32) *ReadPluginLocalizationParams {
	o.SetDataVersion(dataVersion)
	return o
}

// SetDataVersion adds the dataVersion to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetDataVersion(dataVersion int32) {
	o.DataVersion = dataVersion
}

// WithEngineType adds the engineType to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithEngineType(engineType string) *ReadPluginLocalizationParams {
	o.SetEngineType(engineType)
	return o
}

// SetEngineType adds the engineType to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetEngineType(engineType string) {
	o.EngineType = engineType
}

// WithLanguage adds the language to the read plugin localization params
func (o *ReadPluginLocalizationParams) WithLanguage(language string) *ReadPluginLocalizationParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the read plugin localization params
func (o *ReadPluginLocalizationParams) SetLanguage(language string) {
	o.Language = language
}

// WriteToRequest writes these params to a swagger request
func (o *ReadPluginLocalizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dataVersion
	qrDataVersion := o.DataVersion
	qDataVersion := swag.FormatInt32(qrDataVersion)
	if qDataVersion != "" {
		if err := r.SetQueryParam("dataVersion", qDataVersion); err != nil {
			return err
		}
	}

	// query param engineType
	qrEngineType := o.EngineType
	qEngineType := qrEngineType
	if qEngineType != "" {
		if err := r.SetQueryParam("engineType", qEngineType); err != nil {
			return err
		}
	}

	// query param language
	qrLanguage := o.Language
	qLanguage := qrLanguage
	if qLanguage != "" {
		if err := r.SetQueryParam("language", qLanguage); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
