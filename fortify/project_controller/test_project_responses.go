// Code generated by go-swagger; DO NOT EDIT.

package project_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// TestProjectReader is a Reader for the TestProject structure.
type TestProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTestProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTestProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewTestProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTestProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTestProjectOK creates a TestProjectOK with default headers values
func NewTestProjectOK() *TestProjectOK {
	return &TestProjectOK{}
}

/*TestProjectOK handles this case with default header values.

OK
*/
type TestProjectOK struct {
	Payload *models.APIResultApplicationNameTestResponse
}

func (o *TestProjectOK) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectOK  %+v", 200, o.Payload)
}

func (o *TestProjectOK) GetPayload() *models.APIResultApplicationNameTestResponse {
	return o.Payload
}

func (o *TestProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultApplicationNameTestResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectBadRequest creates a TestProjectBadRequest with default headers values
func NewTestProjectBadRequest() *TestProjectBadRequest {
	return &TestProjectBadRequest{}
}

/*TestProjectBadRequest handles this case with default header values.

Bad Request
*/
type TestProjectBadRequest struct {
	Payload *models.APIResult
}

func (o *TestProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectBadRequest  %+v", 400, o.Payload)
}

func (o *TestProjectBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectUnauthorized creates a TestProjectUnauthorized with default headers values
func NewTestProjectUnauthorized() *TestProjectUnauthorized {
	return &TestProjectUnauthorized{}
}

/*TestProjectUnauthorized handles this case with default header values.

Unauthorized
*/
type TestProjectUnauthorized struct {
	Payload *models.APIResult
}

func (o *TestProjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectUnauthorized  %+v", 401, o.Payload)
}

func (o *TestProjectUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectForbidden creates a TestProjectForbidden with default headers values
func NewTestProjectForbidden() *TestProjectForbidden {
	return &TestProjectForbidden{}
}

/*TestProjectForbidden handles this case with default header values.

Forbidden
*/
type TestProjectForbidden struct {
	Payload *models.APIResult
}

func (o *TestProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectForbidden  %+v", 403, o.Payload)
}

func (o *TestProjectForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectNotFound creates a TestProjectNotFound with default headers values
func NewTestProjectNotFound() *TestProjectNotFound {
	return &TestProjectNotFound{}
}

/*TestProjectNotFound handles this case with default header values.

Not Found
*/
type TestProjectNotFound struct {
	Payload *models.APIResult
}

func (o *TestProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectNotFound  %+v", 404, o.Payload)
}

func (o *TestProjectNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectConflict creates a TestProjectConflict with default headers values
func NewTestProjectConflict() *TestProjectConflict {
	return &TestProjectConflict{}
}

/*TestProjectConflict handles this case with default header values.

Conflict
*/
type TestProjectConflict struct {
	Payload *models.APIResult
}

func (o *TestProjectConflict) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectConflict  %+v", 409, o.Payload)
}

func (o *TestProjectConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestProjectInternalServerError creates a TestProjectInternalServerError with default headers values
func NewTestProjectInternalServerError() *TestProjectInternalServerError {
	return &TestProjectInternalServerError{}
}

/*TestProjectInternalServerError handles this case with default header values.

Internal Server Error
*/
type TestProjectInternalServerError struct {
	Payload *models.APIResult
}

func (o *TestProjectInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/action/test][%d] testProjectInternalServerError  %+v", 500, o.Payload)
}

func (o *TestProjectInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *TestProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
