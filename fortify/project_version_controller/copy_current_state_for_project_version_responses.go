// Code generated by go-swagger; DO NOT EDIT.

package project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// CopyCurrentStateForProjectVersionReader is a Reader for the CopyCurrentStateForProjectVersion structure.
type CopyCurrentStateForProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CopyCurrentStateForProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCopyCurrentStateForProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCopyCurrentStateForProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCopyCurrentStateForProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCopyCurrentStateForProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCopyCurrentStateForProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCopyCurrentStateForProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCopyCurrentStateForProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCopyCurrentStateForProjectVersionOK creates a CopyCurrentStateForProjectVersionOK with default headers values
func NewCopyCurrentStateForProjectVersionOK() *CopyCurrentStateForProjectVersionOK {
	return &CopyCurrentStateForProjectVersionOK{}
}

/*CopyCurrentStateForProjectVersionOK handles this case with default header values.

OK
*/
type CopyCurrentStateForProjectVersionOK struct {
	Payload *models.APIResultVoid
}

func (o *CopyCurrentStateForProjectVersionOK) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionOK  %+v", 200, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionOK) GetPayload() *models.APIResultVoid {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionBadRequest creates a CopyCurrentStateForProjectVersionBadRequest with default headers values
func NewCopyCurrentStateForProjectVersionBadRequest() *CopyCurrentStateForProjectVersionBadRequest {
	return &CopyCurrentStateForProjectVersionBadRequest{}
}

/*CopyCurrentStateForProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type CopyCurrentStateForProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionUnauthorized creates a CopyCurrentStateForProjectVersionUnauthorized with default headers values
func NewCopyCurrentStateForProjectVersionUnauthorized() *CopyCurrentStateForProjectVersionUnauthorized {
	return &CopyCurrentStateForProjectVersionUnauthorized{}
}

/*CopyCurrentStateForProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type CopyCurrentStateForProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionForbidden creates a CopyCurrentStateForProjectVersionForbidden with default headers values
func NewCopyCurrentStateForProjectVersionForbidden() *CopyCurrentStateForProjectVersionForbidden {
	return &CopyCurrentStateForProjectVersionForbidden{}
}

/*CopyCurrentStateForProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type CopyCurrentStateForProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionNotFound creates a CopyCurrentStateForProjectVersionNotFound with default headers values
func NewCopyCurrentStateForProjectVersionNotFound() *CopyCurrentStateForProjectVersionNotFound {
	return &CopyCurrentStateForProjectVersionNotFound{}
}

/*CopyCurrentStateForProjectVersionNotFound handles this case with default header values.

Not Found
*/
type CopyCurrentStateForProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionConflict creates a CopyCurrentStateForProjectVersionConflict with default headers values
func NewCopyCurrentStateForProjectVersionConflict() *CopyCurrentStateForProjectVersionConflict {
	return &CopyCurrentStateForProjectVersionConflict{}
}

/*CopyCurrentStateForProjectVersionConflict handles this case with default header values.

Conflict
*/
type CopyCurrentStateForProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionConflict) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCopyCurrentStateForProjectVersionInternalServerError creates a CopyCurrentStateForProjectVersionInternalServerError with default headers values
func NewCopyCurrentStateForProjectVersionInternalServerError() *CopyCurrentStateForProjectVersionInternalServerError {
	return &CopyCurrentStateForProjectVersionInternalServerError{}
}

/*CopyCurrentStateForProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type CopyCurrentStateForProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *CopyCurrentStateForProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projectVersions/action/copyCurrentState][%d] copyCurrentStateForProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *CopyCurrentStateForProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *CopyCurrentStateForProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
