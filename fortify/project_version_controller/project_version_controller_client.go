// Code generated by go-swagger; DO NOT EDIT.

package project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project version controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project version controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AuditByAuditAssistantProjectVersion(params *AuditByAuditAssistantProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AuditByAuditAssistantProjectVersionOK, error)

	CopyCurrentStateForProjectVersion(params *CopyCurrentStateForProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CopyCurrentStateForProjectVersionOK, error)

	CopyProjectVersion(params *CopyProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CopyProjectVersionOK, error)

	CreateProjectVersion(params *CreateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectVersionCreated, error)

	DeleteProjectVersion(params *DeleteProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectVersionOK, error)

	ListProjectVersion(params *ListProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListProjectVersionOK, error)

	PurgeProjectVersion(params *PurgeProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PurgeProjectVersionOK, error)

	ReadProjectVersion(params *ReadProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadProjectVersionOK, error)

	RefreshProjectVersion(params *RefreshProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshProjectVersionOK, error)

	TestProjectVersion(params *TestProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TestProjectVersionOK, error)

	TrainAuditAssistantProjectVersion(params *TrainAuditAssistantProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TrainAuditAssistantProjectVersionOK, error)

	UpdateProjectVersion(params *UpdateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuditByAuditAssistantProjectVersion sends issue data to audit assistant for assessment
*/
func (a *Client) AuditByAuditAssistantProjectVersion(params *AuditByAuditAssistantProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*AuditByAuditAssistantProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditByAuditAssistantProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "auditByAuditAssistantProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/auditByAuditAssistant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditByAuditAssistantProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditByAuditAssistantProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for auditByAuditAssistantProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CopyCurrentStateForProjectVersion copies current audit state from one project version into another
*/
func (a *Client) CopyCurrentStateForProjectVersion(params *CopyCurrentStateForProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CopyCurrentStateForProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyCurrentStateForProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "copyCurrentStateForProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/copyCurrentState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyCurrentStateForProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CopyCurrentStateForProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for copyCurrentStateForProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CopyProjectVersion copies selected data from one project version into another
*/
func (a *Client) CopyProjectVersion(params *CopyProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CopyProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "copyProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/copyFromPartial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CopyProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for copyProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectVersion creates
*/
func (a *Client) CreateProjectVersion(params *CreateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectVersionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectVersionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectVersion deletes
*/
func (a *Client) DeleteProjectVersion(params *DeleteProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectVersion",
		Method:             "DELETE",
		PathPattern:        "/projectVersions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListProjectVersion lists
*/
func (a *Client) ListProjectVersion(params *ListProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ListProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PurgeProjectVersion purges the specified project version from the system and remove all its data
*/
func (a *Client) PurgeProjectVersion(params *PurgeProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PurgeProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurgeProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "purgeProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PurgeProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurgeProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for purgeProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadProjectVersion reads
*/
func (a *Client) ReadProjectVersion(params *ReadProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readProjectVersion",
		Method:             "GET",
		PathPattern:        "/projectVersions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshProjectVersion res calculate the metrics for the project version
*/
func (a *Client) RefreshProjectVersion(params *RefreshProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestProjectVersion checks whether the specified application version is already defined in the system
*/
func (a *Client) TestProjectVersion(params *TestProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TestProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TrainAuditAssistantProjectVersion sends audited issue data to audit assistant to help train the engine
*/
func (a *Client) TrainAuditAssistantProjectVersion(params *TrainAuditAssistantProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*TrainAuditAssistantProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainAuditAssistantProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "trainAuditAssistantProjectVersion",
		Method:             "POST",
		PathPattern:        "/projectVersions/action/trainAuditAssistant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TrainAuditAssistantProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainAuditAssistantProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for trainAuditAssistantProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectVersion updates
*/
func (a *Client) UpdateProjectVersion(params *UpdateProjectVersionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProjectVersion",
		Method:             "PUT",
		PathPattern:        "/projectVersions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
