// Code generated by go-swagger; DO NOT EDIT.

package project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UpdateProjectVersionReader is a Reader for the UpdateProjectVersion structure.
type UpdateProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateProjectVersionOK creates a UpdateProjectVersionOK with default headers values
func NewUpdateProjectVersionOK() *UpdateProjectVersionOK {
	return &UpdateProjectVersionOK{}
}

/*UpdateProjectVersionOK handles this case with default header values.

OK
*/
type UpdateProjectVersionOK struct {
	Payload *models.APIResultProjectVersion
}

func (o *UpdateProjectVersionOK) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectVersionOK) GetPayload() *models.APIResultProjectVersion {
	return o.Payload
}

func (o *UpdateProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultProjectVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionBadRequest creates a UpdateProjectVersionBadRequest with default headers values
func NewUpdateProjectVersionBadRequest() *UpdateProjectVersionBadRequest {
	return &UpdateProjectVersionBadRequest{}
}

/*UpdateProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type UpdateProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionUnauthorized creates a UpdateProjectVersionUnauthorized with default headers values
func NewUpdateProjectVersionUnauthorized() *UpdateProjectVersionUnauthorized {
	return &UpdateProjectVersionUnauthorized{}
}

/*UpdateProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionForbidden creates a UpdateProjectVersionForbidden with default headers values
func NewUpdateProjectVersionForbidden() *UpdateProjectVersionForbidden {
	return &UpdateProjectVersionForbidden{}
}

/*UpdateProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type UpdateProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionNotFound creates a UpdateProjectVersionNotFound with default headers values
func NewUpdateProjectVersionNotFound() *UpdateProjectVersionNotFound {
	return &UpdateProjectVersionNotFound{}
}

/*UpdateProjectVersionNotFound handles this case with default header values.

Not Found
*/
type UpdateProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionConflict creates a UpdateProjectVersionConflict with default headers values
func NewUpdateProjectVersionConflict() *UpdateProjectVersionConflict {
	return &UpdateProjectVersionConflict{}
}

/*UpdateProjectVersionConflict handles this case with default header values.

Conflict
*/
type UpdateProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionConflict) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *UpdateProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectVersionInternalServerError creates a UpdateProjectVersionInternalServerError with default headers values
func NewUpdateProjectVersionInternalServerError() *UpdateProjectVersionInternalServerError {
	return &UpdateProjectVersionInternalServerError{}
}

/*UpdateProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *UpdateProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{id}][%d] updateProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
