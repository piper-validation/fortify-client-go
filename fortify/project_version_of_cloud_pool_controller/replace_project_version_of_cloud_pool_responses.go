// Code generated by go-swagger; DO NOT EDIT.

package project_version_of_cloud_pool_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReplaceProjectVersionOfCloudPoolReader is a Reader for the ReplaceProjectVersionOfCloudPool structure.
type ReplaceProjectVersionOfCloudPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceProjectVersionOfCloudPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceProjectVersionOfCloudPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceProjectVersionOfCloudPoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplaceProjectVersionOfCloudPoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceProjectVersionOfCloudPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceProjectVersionOfCloudPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReplaceProjectVersionOfCloudPoolConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplaceProjectVersionOfCloudPoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceProjectVersionOfCloudPoolOK creates a ReplaceProjectVersionOfCloudPoolOK with default headers values
func NewReplaceProjectVersionOfCloudPoolOK() *ReplaceProjectVersionOfCloudPoolOK {
	return &ReplaceProjectVersionOfCloudPoolOK{}
}

/*ReplaceProjectVersionOfCloudPoolOK handles this case with default header values.

OK
*/
type ReplaceProjectVersionOfCloudPoolOK struct {
	Payload *models.APIResultCloudPoolProjectVersionActionResponse
}

func (o *ReplaceProjectVersionOfCloudPoolOK) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolOK  %+v", 200, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolOK) GetPayload() *models.APIResultCloudPoolProjectVersionActionResponse {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultCloudPoolProjectVersionActionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolBadRequest creates a ReplaceProjectVersionOfCloudPoolBadRequest with default headers values
func NewReplaceProjectVersionOfCloudPoolBadRequest() *ReplaceProjectVersionOfCloudPoolBadRequest {
	return &ReplaceProjectVersionOfCloudPoolBadRequest{}
}

/*ReplaceProjectVersionOfCloudPoolBadRequest handles this case with default header values.

Bad Request
*/
type ReplaceProjectVersionOfCloudPoolBadRequest struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolBadRequest) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolBadRequest  %+v", 400, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolUnauthorized creates a ReplaceProjectVersionOfCloudPoolUnauthorized with default headers values
func NewReplaceProjectVersionOfCloudPoolUnauthorized() *ReplaceProjectVersionOfCloudPoolUnauthorized {
	return &ReplaceProjectVersionOfCloudPoolUnauthorized{}
}

/*ReplaceProjectVersionOfCloudPoolUnauthorized handles this case with default header values.

Unauthorized
*/
type ReplaceProjectVersionOfCloudPoolUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolForbidden creates a ReplaceProjectVersionOfCloudPoolForbidden with default headers values
func NewReplaceProjectVersionOfCloudPoolForbidden() *ReplaceProjectVersionOfCloudPoolForbidden {
	return &ReplaceProjectVersionOfCloudPoolForbidden{}
}

/*ReplaceProjectVersionOfCloudPoolForbidden handles this case with default header values.

Forbidden
*/
type ReplaceProjectVersionOfCloudPoolForbidden struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolForbidden) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolForbidden  %+v", 403, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolNotFound creates a ReplaceProjectVersionOfCloudPoolNotFound with default headers values
func NewReplaceProjectVersionOfCloudPoolNotFound() *ReplaceProjectVersionOfCloudPoolNotFound {
	return &ReplaceProjectVersionOfCloudPoolNotFound{}
}

/*ReplaceProjectVersionOfCloudPoolNotFound handles this case with default header values.

Not Found
*/
type ReplaceProjectVersionOfCloudPoolNotFound struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolNotFound) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolNotFound  %+v", 404, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolConflict creates a ReplaceProjectVersionOfCloudPoolConflict with default headers values
func NewReplaceProjectVersionOfCloudPoolConflict() *ReplaceProjectVersionOfCloudPoolConflict {
	return &ReplaceProjectVersionOfCloudPoolConflict{}
}

/*ReplaceProjectVersionOfCloudPoolConflict handles this case with default header values.

Conflict
*/
type ReplaceProjectVersionOfCloudPoolConflict struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolConflict) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolConflict  %+v", 409, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceProjectVersionOfCloudPoolInternalServerError creates a ReplaceProjectVersionOfCloudPoolInternalServerError with default headers values
func NewReplaceProjectVersionOfCloudPoolInternalServerError() *ReplaceProjectVersionOfCloudPoolInternalServerError {
	return &ReplaceProjectVersionOfCloudPoolInternalServerError{}
}

/*ReplaceProjectVersionOfCloudPoolInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReplaceProjectVersionOfCloudPoolInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReplaceProjectVersionOfCloudPoolInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cloudpools/{parentId}/versions/action/replace][%d] replaceProjectVersionOfCloudPoolInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplaceProjectVersionOfCloudPoolInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReplaceProjectVersionOfCloudPoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
