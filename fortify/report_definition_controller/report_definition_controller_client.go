// Code generated by go-swagger; DO NOT EDIT.

package report_definition_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new report definition controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for report definition controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteReportDefinition(params *DeleteReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportDefinitionOK, error)

	ListReportDefinition(params *ListReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ListReportDefinitionOK, error)

	MultiDeleteReportDefinition(params *MultiDeleteReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteReportDefinitionOK, error)

	ReadReportDefinition(params *ReadReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadReportDefinitionOK, error)

	UpdateReportDefinition(params *UpdateReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReportDefinitionOK, error)

	UploadReportDefinition(params *UploadReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UploadReportDefinitionCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteReportDefinition deletes
*/
func (a *Client) DeleteReportDefinition(params *DeleteReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportDefinition",
		Method:             "DELETE",
		PathPattern:        "/reportDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListReportDefinition lists
*/
func (a *Client) ListReportDefinition(params *ListReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ListReportDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listReportDefinition",
		Method:             "GET",
		PathPattern:        "/reportDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReportDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteReportDefinition multis delete
*/
func (a *Client) MultiDeleteReportDefinition(params *MultiDeleteReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteReportDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteReportDefinition",
		Method:             "DELETE",
		PathPattern:        "/reportDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteReportDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadReportDefinition reads
*/
func (a *Client) ReadReportDefinition(params *ReadReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*ReadReportDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readReportDefinition",
		Method:             "GET",
		PathPattern:        "/reportDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadReportDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReportDefinition updates
*/
func (a *Client) UpdateReportDefinition(params *UpdateReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReportDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateReportDefinition",
		Method:             "PUT",
		PathPattern:        "/reportDefinitions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadReportDefinition uploads
*/
func (a *Client) UploadReportDefinition(params *UploadReportDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*UploadReportDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadReportDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadReportDefinition",
		Method:             "POST",
		PathPattern:        "/reportDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadReportDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadReportDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadReportDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
