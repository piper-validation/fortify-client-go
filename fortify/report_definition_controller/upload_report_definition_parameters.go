// Code generated by go-swagger; DO NOT EDIT.

package report_definition_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadReportDefinitionParams creates a new UploadReportDefinitionParams object
// with the default values initialized.
func NewUploadReportDefinitionParams() *UploadReportDefinitionParams {
	var (
		renderingEngineDefault = string("BIRT")
	)
	return &UploadReportDefinitionParams{
		RenderingEngine: &renderingEngineDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadReportDefinitionParamsWithTimeout creates a new UploadReportDefinitionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadReportDefinitionParamsWithTimeout(timeout time.Duration) *UploadReportDefinitionParams {
	var (
		renderingEngineDefault = string("BIRT")
	)
	return &UploadReportDefinitionParams{
		RenderingEngine: &renderingEngineDefault,

		timeout: timeout,
	}
}

// NewUploadReportDefinitionParamsWithContext creates a new UploadReportDefinitionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadReportDefinitionParamsWithContext(ctx context.Context) *UploadReportDefinitionParams {
	var (
		renderingEngineDefault = string("BIRT")
	)
	return &UploadReportDefinitionParams{
		RenderingEngine: &renderingEngineDefault,

		Context: ctx,
	}
}

// NewUploadReportDefinitionParamsWithHTTPClient creates a new UploadReportDefinitionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadReportDefinitionParamsWithHTTPClient(client *http.Client) *UploadReportDefinitionParams {
	var (
		renderingEngineDefault = string("BIRT")
	)
	return &UploadReportDefinitionParams{
		RenderingEngine: &renderingEngineDefault,
		HTTPClient:      client,
	}
}

/*UploadReportDefinitionParams contains all the parameters to send to the API endpoint
for the upload report definition operation typically these are written to a http.Request
*/
type UploadReportDefinitionParams struct {

	/*Description
	  description

	*/
	Description *string
	/*File
	  file

	*/
	File runtime.NamedReadCloser
	/*Name
	  name

	*/
	Name string
	/*RenderingEngine
	  renderingEngine

	*/
	RenderingEngine *string
	/*Type
	  type

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload report definition params
func (o *UploadReportDefinitionParams) WithTimeout(timeout time.Duration) *UploadReportDefinitionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload report definition params
func (o *UploadReportDefinitionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload report definition params
func (o *UploadReportDefinitionParams) WithContext(ctx context.Context) *UploadReportDefinitionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload report definition params
func (o *UploadReportDefinitionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload report definition params
func (o *UploadReportDefinitionParams) WithHTTPClient(client *http.Client) *UploadReportDefinitionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload report definition params
func (o *UploadReportDefinitionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the upload report definition params
func (o *UploadReportDefinitionParams) WithDescription(description *string) *UploadReportDefinitionParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the upload report definition params
func (o *UploadReportDefinitionParams) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the upload report definition params
func (o *UploadReportDefinitionParams) WithFile(file runtime.NamedReadCloser) *UploadReportDefinitionParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload report definition params
func (o *UploadReportDefinitionParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithName adds the name to the upload report definition params
func (o *UploadReportDefinitionParams) WithName(name string) *UploadReportDefinitionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the upload report definition params
func (o *UploadReportDefinitionParams) SetName(name string) {
	o.Name = name
}

// WithRenderingEngine adds the renderingEngine to the upload report definition params
func (o *UploadReportDefinitionParams) WithRenderingEngine(renderingEngine *string) *UploadReportDefinitionParams {
	o.SetRenderingEngine(renderingEngine)
	return o
}

// SetRenderingEngine adds the renderingEngine to the upload report definition params
func (o *UploadReportDefinitionParams) SetRenderingEngine(renderingEngine *string) {
	o.RenderingEngine = renderingEngine
}

// WithType adds the typeVar to the upload report definition params
func (o *UploadReportDefinitionParams) WithType(typeVar string) *UploadReportDefinitionParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the upload report definition params
func (o *UploadReportDefinitionParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *UploadReportDefinitionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if o.RenderingEngine != nil {

		// query param renderingEngine
		var qrRenderingEngine string
		if o.RenderingEngine != nil {
			qrRenderingEngine = *o.RenderingEngine
		}
		qRenderingEngine := qrRenderingEngine
		if qRenderingEngine != "" {
			if err := r.SetQueryParam("renderingEngine", qRenderingEngine); err != nil {
				return err
			}
		}

	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
