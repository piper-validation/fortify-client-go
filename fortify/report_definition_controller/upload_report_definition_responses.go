// Code generated by go-swagger; DO NOT EDIT.

package report_definition_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UploadReportDefinitionReader is a Reader for the UploadReportDefinition structure.
type UploadReportDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadReportDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadReportDefinitionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadReportDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadReportDefinitionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadReportDefinitionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadReportDefinitionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadReportDefinitionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadReportDefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadReportDefinitionCreated creates a UploadReportDefinitionCreated with default headers values
func NewUploadReportDefinitionCreated() *UploadReportDefinitionCreated {
	return &UploadReportDefinitionCreated{}
}

/*UploadReportDefinitionCreated handles this case with default header values.

Created
*/
type UploadReportDefinitionCreated struct {
	Payload *models.APIResultReportDefinition
}

func (o *UploadReportDefinitionCreated) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionCreated  %+v", 201, o.Payload)
}

func (o *UploadReportDefinitionCreated) GetPayload() *models.APIResultReportDefinition {
	return o.Payload
}

func (o *UploadReportDefinitionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultReportDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionBadRequest creates a UploadReportDefinitionBadRequest with default headers values
func NewUploadReportDefinitionBadRequest() *UploadReportDefinitionBadRequest {
	return &UploadReportDefinitionBadRequest{}
}

/*UploadReportDefinitionBadRequest handles this case with default header values.

Bad Request
*/
type UploadReportDefinitionBadRequest struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionBadRequest) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionBadRequest  %+v", 400, o.Payload)
}

func (o *UploadReportDefinitionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionUnauthorized creates a UploadReportDefinitionUnauthorized with default headers values
func NewUploadReportDefinitionUnauthorized() *UploadReportDefinitionUnauthorized {
	return &UploadReportDefinitionUnauthorized{}
}

/*UploadReportDefinitionUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadReportDefinitionUnauthorized struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadReportDefinitionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionForbidden creates a UploadReportDefinitionForbidden with default headers values
func NewUploadReportDefinitionForbidden() *UploadReportDefinitionForbidden {
	return &UploadReportDefinitionForbidden{}
}

/*UploadReportDefinitionForbidden handles this case with default header values.

Forbidden
*/
type UploadReportDefinitionForbidden struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionForbidden) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionForbidden  %+v", 403, o.Payload)
}

func (o *UploadReportDefinitionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionNotFound creates a UploadReportDefinitionNotFound with default headers values
func NewUploadReportDefinitionNotFound() *UploadReportDefinitionNotFound {
	return &UploadReportDefinitionNotFound{}
}

/*UploadReportDefinitionNotFound handles this case with default header values.

Not Found
*/
type UploadReportDefinitionNotFound struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionNotFound) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionNotFound  %+v", 404, o.Payload)
}

func (o *UploadReportDefinitionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionConflict creates a UploadReportDefinitionConflict with default headers values
func NewUploadReportDefinitionConflict() *UploadReportDefinitionConflict {
	return &UploadReportDefinitionConflict{}
}

/*UploadReportDefinitionConflict handles this case with default header values.

Conflict
*/
type UploadReportDefinitionConflict struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionConflict) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionConflict  %+v", 409, o.Payload)
}

func (o *UploadReportDefinitionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadReportDefinitionInternalServerError creates a UploadReportDefinitionInternalServerError with default headers values
func NewUploadReportDefinitionInternalServerError() *UploadReportDefinitionInternalServerError {
	return &UploadReportDefinitionInternalServerError{}
}

/*UploadReportDefinitionInternalServerError handles this case with default header values.

Internal Server Error
*/
type UploadReportDefinitionInternalServerError struct {
	Payload *models.APIResult
}

func (o *UploadReportDefinitionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /reportDefinitions][%d] uploadReportDefinitionInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadReportDefinitionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UploadReportDefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
