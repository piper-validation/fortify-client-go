// Code generated by go-swagger; DO NOT EDIT.

package report_library_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new report library controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for report library controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteReportLibrary(params *DeleteReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportLibraryOK, error)

	ListReportLibrary(params *ListReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*ListReportLibraryOK, error)

	MultiDeleteReportLibrary(params *MultiDeleteReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteReportLibraryOK, error)

	ReadReportLibrary(params *ReadReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*ReadReportLibraryOK, error)

	UpdateReportLibrary(params *UpdateReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReportLibraryOK, error)

	UploadReportLibrary(params *UploadReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*UploadReportLibraryCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteReportLibrary deletes
*/
func (a *Client) DeleteReportLibrary(params *DeleteReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportLibrary",
		Method:             "DELETE",
		PathPattern:        "/reportLibraries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportLibraryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListReportLibrary lists
*/
func (a *Client) ListReportLibrary(params *ListReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*ListReportLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listReportLibrary",
		Method:             "GET",
		PathPattern:        "/reportLibraries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReportLibraryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MultiDeleteReportLibrary multis delete
*/
func (a *Client) MultiDeleteReportLibrary(params *MultiDeleteReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*MultiDeleteReportLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMultiDeleteReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "multiDeleteReportLibrary",
		Method:             "DELETE",
		PathPattern:        "/reportLibraries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MultiDeleteReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MultiDeleteReportLibraryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for multiDeleteReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadReportLibrary reads
*/
func (a *Client) ReadReportLibrary(params *ReadReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*ReadReportLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readReportLibrary",
		Method:             "GET",
		PathPattern:        "/reportLibraries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadReportLibraryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReportLibrary updates
*/
func (a *Client) UpdateReportLibrary(params *UpdateReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateReportLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateReportLibrary",
		Method:             "PUT",
		PathPattern:        "/reportLibraries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportLibraryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadReportLibrary uploads
*/
func (a *Client) UploadReportLibrary(params *UploadReportLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*UploadReportLibraryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadReportLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadReportLibrary",
		Method:             "POST",
		PathPattern:        "/reportLibraries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadReportLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadReportLibraryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadReportLibrary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
