// Code generated by go-swagger; DO NOT EDIT.

package responsibility_assignment_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadResponsibilityAssignmentOfProjectVersionReader is a Reader for the ReadResponsibilityAssignmentOfProjectVersion structure.
type ReadResponsibilityAssignmentOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadResponsibilityAssignmentOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadResponsibilityAssignmentOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadResponsibilityAssignmentOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadResponsibilityAssignmentOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadResponsibilityAssignmentOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadResponsibilityAssignmentOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadResponsibilityAssignmentOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadResponsibilityAssignmentOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadResponsibilityAssignmentOfProjectVersionOK creates a ReadResponsibilityAssignmentOfProjectVersionOK with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionOK() *ReadResponsibilityAssignmentOfProjectVersionOK {
	return &ReadResponsibilityAssignmentOfProjectVersionOK{}
}

/*ReadResponsibilityAssignmentOfProjectVersionOK handles this case with default header values.

OK
*/
type ReadResponsibilityAssignmentOfProjectVersionOK struct {
	Payload *models.APIResultResponsibilityAssignment
}

func (o *ReadResponsibilityAssignmentOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionOK) GetPayload() *models.APIResultResponsibilityAssignment {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultResponsibilityAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionBadRequest creates a ReadResponsibilityAssignmentOfProjectVersionBadRequest with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionBadRequest() *ReadResponsibilityAssignmentOfProjectVersionBadRequest {
	return &ReadResponsibilityAssignmentOfProjectVersionBadRequest{}
}

/*ReadResponsibilityAssignmentOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type ReadResponsibilityAssignmentOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionUnauthorized creates a ReadResponsibilityAssignmentOfProjectVersionUnauthorized with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionUnauthorized() *ReadResponsibilityAssignmentOfProjectVersionUnauthorized {
	return &ReadResponsibilityAssignmentOfProjectVersionUnauthorized{}
}

/*ReadResponsibilityAssignmentOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadResponsibilityAssignmentOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionForbidden creates a ReadResponsibilityAssignmentOfProjectVersionForbidden with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionForbidden() *ReadResponsibilityAssignmentOfProjectVersionForbidden {
	return &ReadResponsibilityAssignmentOfProjectVersionForbidden{}
}

/*ReadResponsibilityAssignmentOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type ReadResponsibilityAssignmentOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionNotFound creates a ReadResponsibilityAssignmentOfProjectVersionNotFound with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionNotFound() *ReadResponsibilityAssignmentOfProjectVersionNotFound {
	return &ReadResponsibilityAssignmentOfProjectVersionNotFound{}
}

/*ReadResponsibilityAssignmentOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type ReadResponsibilityAssignmentOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionConflict creates a ReadResponsibilityAssignmentOfProjectVersionConflict with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionConflict() *ReadResponsibilityAssignmentOfProjectVersionConflict {
	return &ReadResponsibilityAssignmentOfProjectVersionConflict{}
}

/*ReadResponsibilityAssignmentOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type ReadResponsibilityAssignmentOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadResponsibilityAssignmentOfProjectVersionInternalServerError creates a ReadResponsibilityAssignmentOfProjectVersionInternalServerError with default headers values
func NewReadResponsibilityAssignmentOfProjectVersionInternalServerError() *ReadResponsibilityAssignmentOfProjectVersionInternalServerError {
	return &ReadResponsibilityAssignmentOfProjectVersionInternalServerError{}
}

/*ReadResponsibilityAssignmentOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadResponsibilityAssignmentOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadResponsibilityAssignmentOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projectVersions/{parentId}/responsibilities/{guid}][%d] readResponsibilityAssignmentOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadResponsibilityAssignmentOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadResponsibilityAssignmentOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
