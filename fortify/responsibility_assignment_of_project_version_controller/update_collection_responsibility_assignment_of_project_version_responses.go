// Code generated by go-swagger; DO NOT EDIT.

package responsibility_assignment_of_project_version_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UpdateCollectionResponsibilityAssignmentOfProjectVersionReader is a Reader for the UpdateCollectionResponsibilityAssignmentOfProjectVersion structure.
type UpdateCollectionResponsibilityAssignmentOfProjectVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionOK creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionOK with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionOK() *UpdateCollectionResponsibilityAssignmentOfProjectVersionOK {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionOK{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionOK handles this case with default header values.

OK
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionOK struct {
	Payload *models.APIResultListResponsibilityAssignment
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionOK) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionOK  %+v", 200, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionOK) GetPayload() *models.APIResultListResponsibilityAssignment {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultListResponsibilityAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest() *UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest handles this case with default header values.

Bad Request
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized() *UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden() *UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden handles this case with default header values.

Forbidden
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound() *UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound handles this case with default header values.

Not Found
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionConflict creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionConflict() *UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict handles this case with default header values.

Conflict
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionConflict  %+v", 409, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError creates a UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError with default headers values
func NewUpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError() *UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError {
	return &UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError{}
}

/*UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError struct {
	Payload *models.APIResult
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projectVersions/{parentId}/responsibilities][%d] updateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateCollectionResponsibilityAssignmentOfProjectVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
