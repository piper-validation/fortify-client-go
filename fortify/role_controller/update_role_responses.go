// Code generated by go-swagger; DO NOT EDIT.

package role_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UpdateRoleReader is a Reader for the UpdateRole structure.
type UpdateRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRoleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRoleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRoleOK creates a UpdateRoleOK with default headers values
func NewUpdateRoleOK() *UpdateRoleOK {
	return &UpdateRoleOK{}
}

/*UpdateRoleOK handles this case with default header values.

OK
*/
type UpdateRoleOK struct {
	Payload *models.APIResultRole
}

func (o *UpdateRoleOK) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleOK  %+v", 200, o.Payload)
}

func (o *UpdateRoleOK) GetPayload() *models.APIResultRole {
	return o.Payload
}

func (o *UpdateRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleBadRequest creates a UpdateRoleBadRequest with default headers values
func NewUpdateRoleBadRequest() *UpdateRoleBadRequest {
	return &UpdateRoleBadRequest{}
}

/*UpdateRoleBadRequest handles this case with default header values.

Bad Request
*/
type UpdateRoleBadRequest struct {
	Payload *models.APIResult
}

func (o *UpdateRoleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRoleBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleUnauthorized creates a UpdateRoleUnauthorized with default headers values
func NewUpdateRoleUnauthorized() *UpdateRoleUnauthorized {
	return &UpdateRoleUnauthorized{}
}

/*UpdateRoleUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateRoleUnauthorized struct {
	Payload *models.APIResult
}

func (o *UpdateRoleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRoleUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleForbidden creates a UpdateRoleForbidden with default headers values
func NewUpdateRoleForbidden() *UpdateRoleForbidden {
	return &UpdateRoleForbidden{}
}

/*UpdateRoleForbidden handles this case with default header values.

Forbidden
*/
type UpdateRoleForbidden struct {
	Payload *models.APIResult
}

func (o *UpdateRoleForbidden) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRoleForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleNotFound creates a UpdateRoleNotFound with default headers values
func NewUpdateRoleNotFound() *UpdateRoleNotFound {
	return &UpdateRoleNotFound{}
}

/*UpdateRoleNotFound handles this case with default header values.

Not Found
*/
type UpdateRoleNotFound struct {
	Payload *models.APIResult
}

func (o *UpdateRoleNotFound) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRoleNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleConflict creates a UpdateRoleConflict with default headers values
func NewUpdateRoleConflict() *UpdateRoleConflict {
	return &UpdateRoleConflict{}
}

/*UpdateRoleConflict handles this case with default header values.

Conflict
*/
type UpdateRoleConflict struct {
	Payload *models.APIResult
}

func (o *UpdateRoleConflict) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleConflict  %+v", 409, o.Payload)
}

func (o *UpdateRoleConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleInternalServerError creates a UpdateRoleInternalServerError with default headers values
func NewUpdateRoleInternalServerError() *UpdateRoleInternalServerError {
	return &UpdateRoleInternalServerError{}
}

/*UpdateRoleInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateRoleInternalServerError struct {
	Payload *models.APIResult
}

func (o *UpdateRoleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] updateRoleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRoleInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateRoleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
