// Code generated by go-swagger; DO NOT EDIT.

package saved_report_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// ReadSavedReportReader is a Reader for the ReadSavedReport structure.
type ReadSavedReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadSavedReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadSavedReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadSavedReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadSavedReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadSavedReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadSavedReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadSavedReportConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadSavedReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReadSavedReportOK creates a ReadSavedReportOK with default headers values
func NewReadSavedReportOK() *ReadSavedReportOK {
	return &ReadSavedReportOK{}
}

/*ReadSavedReportOK handles this case with default header values.

OK
*/
type ReadSavedReportOK struct {
	Payload *models.APIResultSavedReport
}

func (o *ReadSavedReportOK) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportOK  %+v", 200, o.Payload)
}

func (o *ReadSavedReportOK) GetPayload() *models.APIResultSavedReport {
	return o.Payload
}

func (o *ReadSavedReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultSavedReport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportBadRequest creates a ReadSavedReportBadRequest with default headers values
func NewReadSavedReportBadRequest() *ReadSavedReportBadRequest {
	return &ReadSavedReportBadRequest{}
}

/*ReadSavedReportBadRequest handles this case with default header values.

Bad Request
*/
type ReadSavedReportBadRequest struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportBadRequest) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportBadRequest  %+v", 400, o.Payload)
}

func (o *ReadSavedReportBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportUnauthorized creates a ReadSavedReportUnauthorized with default headers values
func NewReadSavedReportUnauthorized() *ReadSavedReportUnauthorized {
	return &ReadSavedReportUnauthorized{}
}

/*ReadSavedReportUnauthorized handles this case with default header values.

Unauthorized
*/
type ReadSavedReportUnauthorized struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportUnauthorized) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportUnauthorized  %+v", 401, o.Payload)
}

func (o *ReadSavedReportUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportForbidden creates a ReadSavedReportForbidden with default headers values
func NewReadSavedReportForbidden() *ReadSavedReportForbidden {
	return &ReadSavedReportForbidden{}
}

/*ReadSavedReportForbidden handles this case with default header values.

Forbidden
*/
type ReadSavedReportForbidden struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportForbidden) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportForbidden  %+v", 403, o.Payload)
}

func (o *ReadSavedReportForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportNotFound creates a ReadSavedReportNotFound with default headers values
func NewReadSavedReportNotFound() *ReadSavedReportNotFound {
	return &ReadSavedReportNotFound{}
}

/*ReadSavedReportNotFound handles this case with default header values.

Not Found
*/
type ReadSavedReportNotFound struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportNotFound) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportNotFound  %+v", 404, o.Payload)
}

func (o *ReadSavedReportNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportConflict creates a ReadSavedReportConflict with default headers values
func NewReadSavedReportConflict() *ReadSavedReportConflict {
	return &ReadSavedReportConflict{}
}

/*ReadSavedReportConflict handles this case with default header values.

Conflict
*/
type ReadSavedReportConflict struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportConflict) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportConflict  %+v", 409, o.Payload)
}

func (o *ReadSavedReportConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadSavedReportInternalServerError creates a ReadSavedReportInternalServerError with default headers values
func NewReadSavedReportInternalServerError() *ReadSavedReportInternalServerError {
	return &ReadSavedReportInternalServerError{}
}

/*ReadSavedReportInternalServerError handles this case with default header values.

Internal Server Error
*/
type ReadSavedReportInternalServerError struct {
	Payload *models.APIResult
}

func (o *ReadSavedReportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /reports/{id}][%d] readSavedReportInternalServerError  %+v", 500, o.Payload)
}

func (o *ReadSavedReportInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *ReadSavedReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
