// Code generated by go-swagger; DO NOT EDIT.

package saved_report_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved report controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved report controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSavedReport(params *CreateSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSavedReportCreated, error)

	DeleteSavedReport(params *DeleteSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSavedReportOK, error)

	ListSavedReport(params *ListSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*ListSavedReportOK, error)

	ReadSavedReport(params *ReadSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*ReadSavedReportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSavedReport creates
*/
func (a *Client) CreateSavedReport(params *CreateSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSavedReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSavedReport",
		Method:             "POST",
		PathPattern:        "/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSavedReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSavedReport deletes
*/
func (a *Client) DeleteSavedReport(params *DeleteSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSavedReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSavedReport",
		Method:             "DELETE",
		PathPattern:        "/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSavedReport lists
*/
func (a *Client) ListSavedReport(params *ListSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*ListSavedReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSavedReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSavedReport",
		Method:             "GET",
		PathPattern:        "/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSavedReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSavedReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSavedReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadSavedReport reads
*/
func (a *Client) ReadSavedReport(params *ReadSavedReportParams, authInfo runtime.ClientAuthInfoWriter) (*ReadSavedReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSavedReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readSavedReport",
		Method:             "GET",
		PathPattern:        "/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSavedReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSavedReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readSavedReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
