// Code generated by go-swagger; DO NOT EDIT.

package variable_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/piper-validation/fortify-client-go/models"
)

// UpdateVariableReader is a Reader for the UpdateVariable structure.
type UpdateVariableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVariableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVariableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVariableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateVariableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVariableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVariableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateVariableConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVariableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateVariableOK creates a UpdateVariableOK with default headers values
func NewUpdateVariableOK() *UpdateVariableOK {
	return &UpdateVariableOK{}
}

/*UpdateVariableOK handles this case with default header values.

OK
*/
type UpdateVariableOK struct {
	Payload *models.APIResultVariable
}

func (o *UpdateVariableOK) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableOK  %+v", 200, o.Payload)
}

func (o *UpdateVariableOK) GetPayload() *models.APIResultVariable {
	return o.Payload
}

func (o *UpdateVariableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResultVariable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableBadRequest creates a UpdateVariableBadRequest with default headers values
func NewUpdateVariableBadRequest() *UpdateVariableBadRequest {
	return &UpdateVariableBadRequest{}
}

/*UpdateVariableBadRequest handles this case with default header values.

Bad Request
*/
type UpdateVariableBadRequest struct {
	Payload *models.APIResult
}

func (o *UpdateVariableBadRequest) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVariableBadRequest) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableUnauthorized creates a UpdateVariableUnauthorized with default headers values
func NewUpdateVariableUnauthorized() *UpdateVariableUnauthorized {
	return &UpdateVariableUnauthorized{}
}

/*UpdateVariableUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateVariableUnauthorized struct {
	Payload *models.APIResult
}

func (o *UpdateVariableUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVariableUnauthorized) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableForbidden creates a UpdateVariableForbidden with default headers values
func NewUpdateVariableForbidden() *UpdateVariableForbidden {
	return &UpdateVariableForbidden{}
}

/*UpdateVariableForbidden handles this case with default header values.

Forbidden
*/
type UpdateVariableForbidden struct {
	Payload *models.APIResult
}

func (o *UpdateVariableForbidden) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableForbidden  %+v", 403, o.Payload)
}

func (o *UpdateVariableForbidden) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableNotFound creates a UpdateVariableNotFound with default headers values
func NewUpdateVariableNotFound() *UpdateVariableNotFound {
	return &UpdateVariableNotFound{}
}

/*UpdateVariableNotFound handles this case with default header values.

Not Found
*/
type UpdateVariableNotFound struct {
	Payload *models.APIResult
}

func (o *UpdateVariableNotFound) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVariableNotFound) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableConflict creates a UpdateVariableConflict with default headers values
func NewUpdateVariableConflict() *UpdateVariableConflict {
	return &UpdateVariableConflict{}
}

/*UpdateVariableConflict handles this case with default header values.

Conflict
*/
type UpdateVariableConflict struct {
	Payload *models.APIResult
}

func (o *UpdateVariableConflict) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableConflict  %+v", 409, o.Payload)
}

func (o *UpdateVariableConflict) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVariableInternalServerError creates a UpdateVariableInternalServerError with default headers values
func NewUpdateVariableInternalServerError() *UpdateVariableInternalServerError {
	return &UpdateVariableInternalServerError{}
}

/*UpdateVariableInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateVariableInternalServerError struct {
	Payload *models.APIResult
}

func (o *UpdateVariableInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /variables/{id}][%d] updateVariableInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVariableInternalServerError) GetPayload() *models.APIResult {
	return o.Payload
}

func (o *UpdateVariableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
