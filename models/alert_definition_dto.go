// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertDefinitionDto Alert definitions can include variable or performance indicator to determine when Software Security Center is
// to generate an alert notification in the Todo List on the Dashboard.
// swagger:model AlertDefinitionDto
type AlertDefinitionDto struct {

	// alert all children
	AlertAllChildren bool `json:"alertAllChildren,omitempty"`

	// alert stakeholders
	AlertStakeholders bool `json:"alertStakeholders,omitempty"`

	// alert triggers
	// Required: true
	AlertTriggers []*AlertTriggerDto `json:"alertTriggers"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	// Format: date-time
	CreationDate Iso8601MilliDateTime `json:"creationDate,omitempty"`

	// Required field for Scheduled alerts, Optional for other types
	// Required: true
	CustomMessage *string `json:"customMessage"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// end date
	// Format: date-time
	EndDate Iso8601MilliDateTime `json:"endDate,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// monitor all apps
	MonitorAllApps bool `json:"monitorAllApps,omitempty"`

	// monitored entity name
	MonitoredEntityName string `json:"monitoredEntityName,omitempty"`

	// monitored entity type
	// Required: true
	// Enum: [RT_INSTANCE REQ_INSTANCE ACTIVITY_INSTANCE MEASUREMENT_AGENT VARIABLE RUNTIME_ALERT EVENT SCHEDULED_ALERT]
	MonitoredEntityType *string `json:"monitoredEntityType"`

	// monitored instance Id
	MonitoredInstanceID int64 `json:"monitoredInstanceId,omitempty"`

	// monitors project versions
	MonitorsProjectVersions bool `json:"monitorsProjectVersions,omitempty"`

	// monitors runtime app
	MonitorsRuntimeApp bool `json:"monitorsRuntimeApp,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project version ids
	ProjectVersionIds []int64 `json:"projectVersionIds"`

	// recipient type
	// Required: true
	// Enum: [ME_ONLY PROCESS_ENTITY_STAKEHOLDERS ALL_USERS ALL_SYSTEM_USERS]
	RecipientType *string `json:"recipientType"`

	// remind periodically
	RemindPeriodically bool `json:"remindPeriodically,omitempty"`

	// reminder period
	ReminderPeriod int32 `json:"reminderPeriod,omitempty"`

	// start at due date
	StartAtDueDate bool `json:"startAtDueDate,omitempty"`

	// start date
	// Format: date-time
	StartDate Iso8601MilliDateTime `json:"startDate,omitempty"`

	// trigger description
	TriggerDescription string `json:"triggerDescription,omitempty"`

	// trigger description name
	TriggerDescriptionName string `json:"triggerDescriptionName,omitempty"`

	// trigger description operation
	TriggerDescriptionOperation string `json:"triggerDescriptionOperation,omitempty"`

	// trigger description value
	TriggerDescriptionValue string `json:"triggerDescriptionValue,omitempty"`

	// user can modify
	UserCanModify bool `json:"userCanModify,omitempty"`
}

// Validate validates this alert definition dto
func (m *AlertDefinitionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoredEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertDefinitionDto) validateAlertTriggers(formats strfmt.Registry) error {

	if err := validate.Required("alertTriggers", "body", m.AlertTriggers); err != nil {
		return err
	}

	for i := 0; i < len(m.AlertTriggers); i++ {
		if swag.IsZero(m.AlertTriggers[i]) { // not required
			continue
		}

		if m.AlertTriggers[i] != nil {
			if err := m.AlertTriggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alertTriggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AlertDefinitionDto) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AlertDefinitionDto) validateCustomMessage(formats strfmt.Registry) error {

	if err := validate.Required("customMessage", "body", m.CustomMessage); err != nil {
		return err
	}

	return nil
}

func (m *AlertDefinitionDto) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var alertDefinitionDtoTypeMonitoredEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RT_INSTANCE","REQ_INSTANCE","ACTIVITY_INSTANCE","MEASUREMENT_AGENT","VARIABLE","RUNTIME_ALERT","EVENT","SCHEDULED_ALERT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertDefinitionDtoTypeMonitoredEntityTypePropEnum = append(alertDefinitionDtoTypeMonitoredEntityTypePropEnum, v)
	}
}

const (

	// AlertDefinitionDtoMonitoredEntityTypeRTINSTANCE captures enum value "RT_INSTANCE"
	AlertDefinitionDtoMonitoredEntityTypeRTINSTANCE string = "RT_INSTANCE"

	// AlertDefinitionDtoMonitoredEntityTypeREQINSTANCE captures enum value "REQ_INSTANCE"
	AlertDefinitionDtoMonitoredEntityTypeREQINSTANCE string = "REQ_INSTANCE"

	// AlertDefinitionDtoMonitoredEntityTypeACTIVITYINSTANCE captures enum value "ACTIVITY_INSTANCE"
	AlertDefinitionDtoMonitoredEntityTypeACTIVITYINSTANCE string = "ACTIVITY_INSTANCE"

	// AlertDefinitionDtoMonitoredEntityTypeMEASUREMENTAGENT captures enum value "MEASUREMENT_AGENT"
	AlertDefinitionDtoMonitoredEntityTypeMEASUREMENTAGENT string = "MEASUREMENT_AGENT"

	// AlertDefinitionDtoMonitoredEntityTypeVARIABLE captures enum value "VARIABLE"
	AlertDefinitionDtoMonitoredEntityTypeVARIABLE string = "VARIABLE"

	// AlertDefinitionDtoMonitoredEntityTypeRUNTIMEALERT captures enum value "RUNTIME_ALERT"
	AlertDefinitionDtoMonitoredEntityTypeRUNTIMEALERT string = "RUNTIME_ALERT"

	// AlertDefinitionDtoMonitoredEntityTypeEVENT captures enum value "EVENT"
	AlertDefinitionDtoMonitoredEntityTypeEVENT string = "EVENT"

	// AlertDefinitionDtoMonitoredEntityTypeSCHEDULEDALERT captures enum value "SCHEDULED_ALERT"
	AlertDefinitionDtoMonitoredEntityTypeSCHEDULEDALERT string = "SCHEDULED_ALERT"
)

// prop value enum
func (m *AlertDefinitionDto) validateMonitoredEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertDefinitionDtoTypeMonitoredEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertDefinitionDto) validateMonitoredEntityType(formats strfmt.Registry) error {

	if err := validate.Required("monitoredEntityType", "body", m.MonitoredEntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMonitoredEntityTypeEnum("monitoredEntityType", "body", *m.MonitoredEntityType); err != nil {
		return err
	}

	return nil
}

func (m *AlertDefinitionDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var alertDefinitionDtoTypeRecipientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ME_ONLY","PROCESS_ENTITY_STAKEHOLDERS","ALL_USERS","ALL_SYSTEM_USERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertDefinitionDtoTypeRecipientTypePropEnum = append(alertDefinitionDtoTypeRecipientTypePropEnum, v)
	}
}

const (

	// AlertDefinitionDtoRecipientTypeMEONLY captures enum value "ME_ONLY"
	AlertDefinitionDtoRecipientTypeMEONLY string = "ME_ONLY"

	// AlertDefinitionDtoRecipientTypePROCESSENTITYSTAKEHOLDERS captures enum value "PROCESS_ENTITY_STAKEHOLDERS"
	AlertDefinitionDtoRecipientTypePROCESSENTITYSTAKEHOLDERS string = "PROCESS_ENTITY_STAKEHOLDERS"

	// AlertDefinitionDtoRecipientTypeALLUSERS captures enum value "ALL_USERS"
	AlertDefinitionDtoRecipientTypeALLUSERS string = "ALL_USERS"

	// AlertDefinitionDtoRecipientTypeALLSYSTEMUSERS captures enum value "ALL_SYSTEM_USERS"
	AlertDefinitionDtoRecipientTypeALLSYSTEMUSERS string = "ALL_SYSTEM_USERS"
)

// prop value enum
func (m *AlertDefinitionDto) validateRecipientTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertDefinitionDtoTypeRecipientTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertDefinitionDto) validateRecipientType(formats strfmt.Registry) error {

	if err := validate.Required("recipientType", "body", m.RecipientType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRecipientTypeEnum("recipientType", "body", *m.RecipientType); err != nil {
		return err
	}

	return nil
}

func (m *AlertDefinitionDto) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertDefinitionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertDefinitionDto) UnmarshalBinary(b []byte) error {
	var res AlertDefinitionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
