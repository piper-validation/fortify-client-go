// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Artifact Application version artifact that contains scan results.
// swagger:model Artifact
type Artifact struct {

	// embed
	Embed *EmbeddedScans `json:"_embed,omitempty"`

	// allow approve
	AllowApprove bool `json:"allowApprove,omitempty"`

	// allow delete
	AllowDelete bool `json:"allowDelete,omitempty"`

	// allow purge
	AllowPurge bool `json:"allowPurge,omitempty"`

	// approval comment
	ApprovalComment string `json:"approvalComment,omitempty"`

	// approval date
	// Format: date-time
	ApprovalDate strfmt.DateTime `json:"approvalDate,omitempty"`

	// approval username
	ApprovalUsername string `json:"approvalUsername,omitempty"`

	// artifact type
	// Enum: [ Fpr FprPreProcess AnalysisArtifact SourceArchive RuntimeEventLog]
	ArtifactType string `json:"artifactType,omitempty"`

	// audit updated
	AuditUpdated bool `json:"auditUpdated,omitempty"`

	// file name
	FileName string `json:"fileName,omitempty"`

	// file size
	FileSize int64 `json:"fileSize,omitempty"`

	// file URL
	FileURL string `json:"fileURL,omitempty"`

	// Artifact id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// in modifying status
	InModifyingStatus bool `json:"inModifyingStatus,omitempty"`

	// indexed
	Indexed bool `json:"indexed,omitempty"`

	// last scan date
	// Format: date-time
	LastScanDate strfmt.DateTime `json:"lastScanDate,omitempty"`

	// message count
	MessageCount int64 `json:"messageCount,omitempty"`

	// messages
	Messages string `json:"messages,omitempty"`

	// original file name
	OriginalFileName string `json:"originalFileName,omitempty"`

	// other status
	// Enum: [ NotExist Ignored Processed]
	OtherStatus string `json:"otherStatus,omitempty"`

	// purged
	Purged bool `json:"purged,omitempty"`

	// runtime status
	// Enum: [ NotExist Ignored Processed]
	RuntimeStatus string `json:"runtimeStatus,omitempty"`

	// sca status
	// Enum: [ NotExist Ignored Processed]
	ScaStatus string `json:"scaStatus,omitempty"`

	// scan errors count
	ScanErrorsCount int64 `json:"scanErrorsCount,omitempty"`

	// status
	// Enum: [NONE SCHED_PROCESSING PROCESSING PROCESS_COMPLETE ERROR_PROCESSING REQUIRE_AUTH DELETING ERROR_DELETING DELETED PURGING PURGED ERROR_PURGING DISPATCH_ANALYSIS DISPATCH_REAUDIT ERROR_DISPATCH QUEUED_ANALYSIS REQUEUED_ANALYSIS ANALYZING ANALYSIS_COMPLETE ERROR_ANALYZING UNKNOWN AUDIT_FAILED]
	Status string `json:"status,omitempty"`

	// upload date
	// Format: date-time
	UploadDate strfmt.DateTime `json:"uploadDate,omitempty"`

	// upload IP
	UploadIP string `json:"uploadIP,omitempty"`

	// user name
	UserName string `json:"userName,omitempty"`

	// version number
	VersionNumber int32 `json:"versionNumber,omitempty"`

	// web inspect status
	// Enum: [ NotExist Ignored Processed]
	WebInspectStatus string `json:"webInspectStatus,omitempty"`
}

// Validate validates this artifact
func (m *Artifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScanDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebInspectStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Artifact) validateEmbed(formats strfmt.Registry) error {

	if swag.IsZero(m.Embed) { // not required
		return nil
	}

	if m.Embed != nil {
		if err := m.Embed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embed")
			}
			return err
		}
	}

	return nil
}

func (m *Artifact) validateApprovalDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("approvalDate", "body", "date-time", m.ApprovalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactTypeArtifactTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","Fpr","FprPreProcess","AnalysisArtifact","SourceArchive","RuntimeEventLog"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeArtifactTypePropEnum = append(artifactTypeArtifactTypePropEnum, v)
	}
}

const (

	// ArtifactArtifactTypeEmpty captures enum value ""
	ArtifactArtifactTypeEmpty string = ""

	// ArtifactArtifactTypeFpr captures enum value "Fpr"
	ArtifactArtifactTypeFpr string = "Fpr"

	// ArtifactArtifactTypeFprPreProcess captures enum value "FprPreProcess"
	ArtifactArtifactTypeFprPreProcess string = "FprPreProcess"

	// ArtifactArtifactTypeAnalysisArtifact captures enum value "AnalysisArtifact"
	ArtifactArtifactTypeAnalysisArtifact string = "AnalysisArtifact"

	// ArtifactArtifactTypeSourceArchive captures enum value "SourceArchive"
	ArtifactArtifactTypeSourceArchive string = "SourceArchive"

	// ArtifactArtifactTypeRuntimeEventLog captures enum value "RuntimeEventLog"
	ArtifactArtifactTypeRuntimeEventLog string = "RuntimeEventLog"
)

// prop value enum
func (m *Artifact) validateArtifactTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeArtifactTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateArtifactType(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactType) { // not required
		return nil
	}

	// value enum
	if err := m.validateArtifactTypeEnum("artifactType", "body", m.ArtifactType); err != nil {
		return err
	}

	return nil
}

func (m *Artifact) validateLastScanDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScanDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastScanDate", "body", "date-time", m.LastScanDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactTypeOtherStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","NotExist","Ignored","Processed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeOtherStatusPropEnum = append(artifactTypeOtherStatusPropEnum, v)
	}
}

const (

	// ArtifactOtherStatusEmpty captures enum value ""
	ArtifactOtherStatusEmpty string = ""

	// ArtifactOtherStatusNotExist captures enum value "NotExist"
	ArtifactOtherStatusNotExist string = "NotExist"

	// ArtifactOtherStatusIgnored captures enum value "Ignored"
	ArtifactOtherStatusIgnored string = "Ignored"

	// ArtifactOtherStatusProcessed captures enum value "Processed"
	ArtifactOtherStatusProcessed string = "Processed"
)

// prop value enum
func (m *Artifact) validateOtherStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeOtherStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateOtherStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.OtherStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOtherStatusEnum("otherStatus", "body", m.OtherStatus); err != nil {
		return err
	}

	return nil
}

var artifactTypeRuntimeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","NotExist","Ignored","Processed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeRuntimeStatusPropEnum = append(artifactTypeRuntimeStatusPropEnum, v)
	}
}

const (

	// ArtifactRuntimeStatusEmpty captures enum value ""
	ArtifactRuntimeStatusEmpty string = ""

	// ArtifactRuntimeStatusNotExist captures enum value "NotExist"
	ArtifactRuntimeStatusNotExist string = "NotExist"

	// ArtifactRuntimeStatusIgnored captures enum value "Ignored"
	ArtifactRuntimeStatusIgnored string = "Ignored"

	// ArtifactRuntimeStatusProcessed captures enum value "Processed"
	ArtifactRuntimeStatusProcessed string = "Processed"
)

// prop value enum
func (m *Artifact) validateRuntimeStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeRuntimeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateRuntimeStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RuntimeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuntimeStatusEnum("runtimeStatus", "body", m.RuntimeStatus); err != nil {
		return err
	}

	return nil
}

var artifactTypeScaStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","NotExist","Ignored","Processed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeScaStatusPropEnum = append(artifactTypeScaStatusPropEnum, v)
	}
}

const (

	// ArtifactScaStatusEmpty captures enum value ""
	ArtifactScaStatusEmpty string = ""

	// ArtifactScaStatusNotExist captures enum value "NotExist"
	ArtifactScaStatusNotExist string = "NotExist"

	// ArtifactScaStatusIgnored captures enum value "Ignored"
	ArtifactScaStatusIgnored string = "Ignored"

	// ArtifactScaStatusProcessed captures enum value "Processed"
	ArtifactScaStatusProcessed string = "Processed"
)

// prop value enum
func (m *Artifact) validateScaStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeScaStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateScaStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ScaStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateScaStatusEnum("scaStatus", "body", m.ScaStatus); err != nil {
		return err
	}

	return nil
}

var artifactTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SCHED_PROCESSING","PROCESSING","PROCESS_COMPLETE","ERROR_PROCESSING","REQUIRE_AUTH","DELETING","ERROR_DELETING","DELETED","PURGING","PURGED","ERROR_PURGING","DISPATCH_ANALYSIS","DISPATCH_REAUDIT","ERROR_DISPATCH","QUEUED_ANALYSIS","REQUEUED_ANALYSIS","ANALYZING","ANALYSIS_COMPLETE","ERROR_ANALYZING","UNKNOWN","AUDIT_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeStatusPropEnum = append(artifactTypeStatusPropEnum, v)
	}
}

const (

	// ArtifactStatusNONE captures enum value "NONE"
	ArtifactStatusNONE string = "NONE"

	// ArtifactStatusSCHEDPROCESSING captures enum value "SCHED_PROCESSING"
	ArtifactStatusSCHEDPROCESSING string = "SCHED_PROCESSING"

	// ArtifactStatusPROCESSING captures enum value "PROCESSING"
	ArtifactStatusPROCESSING string = "PROCESSING"

	// ArtifactStatusPROCESSCOMPLETE captures enum value "PROCESS_COMPLETE"
	ArtifactStatusPROCESSCOMPLETE string = "PROCESS_COMPLETE"

	// ArtifactStatusERRORPROCESSING captures enum value "ERROR_PROCESSING"
	ArtifactStatusERRORPROCESSING string = "ERROR_PROCESSING"

	// ArtifactStatusREQUIREAUTH captures enum value "REQUIRE_AUTH"
	ArtifactStatusREQUIREAUTH string = "REQUIRE_AUTH"

	// ArtifactStatusDELETING captures enum value "DELETING"
	ArtifactStatusDELETING string = "DELETING"

	// ArtifactStatusERRORDELETING captures enum value "ERROR_DELETING"
	ArtifactStatusERRORDELETING string = "ERROR_DELETING"

	// ArtifactStatusDELETED captures enum value "DELETED"
	ArtifactStatusDELETED string = "DELETED"

	// ArtifactStatusPURGING captures enum value "PURGING"
	ArtifactStatusPURGING string = "PURGING"

	// ArtifactStatusPURGED captures enum value "PURGED"
	ArtifactStatusPURGED string = "PURGED"

	// ArtifactStatusERRORPURGING captures enum value "ERROR_PURGING"
	ArtifactStatusERRORPURGING string = "ERROR_PURGING"

	// ArtifactStatusDISPATCHANALYSIS captures enum value "DISPATCH_ANALYSIS"
	ArtifactStatusDISPATCHANALYSIS string = "DISPATCH_ANALYSIS"

	// ArtifactStatusDISPATCHREAUDIT captures enum value "DISPATCH_REAUDIT"
	ArtifactStatusDISPATCHREAUDIT string = "DISPATCH_REAUDIT"

	// ArtifactStatusERRORDISPATCH captures enum value "ERROR_DISPATCH"
	ArtifactStatusERRORDISPATCH string = "ERROR_DISPATCH"

	// ArtifactStatusQUEUEDANALYSIS captures enum value "QUEUED_ANALYSIS"
	ArtifactStatusQUEUEDANALYSIS string = "QUEUED_ANALYSIS"

	// ArtifactStatusREQUEUEDANALYSIS captures enum value "REQUEUED_ANALYSIS"
	ArtifactStatusREQUEUEDANALYSIS string = "REQUEUED_ANALYSIS"

	// ArtifactStatusANALYZING captures enum value "ANALYZING"
	ArtifactStatusANALYZING string = "ANALYZING"

	// ArtifactStatusANALYSISCOMPLETE captures enum value "ANALYSIS_COMPLETE"
	ArtifactStatusANALYSISCOMPLETE string = "ANALYSIS_COMPLETE"

	// ArtifactStatusERRORANALYZING captures enum value "ERROR_ANALYZING"
	ArtifactStatusERRORANALYZING string = "ERROR_ANALYZING"

	// ArtifactStatusUNKNOWN captures enum value "UNKNOWN"
	ArtifactStatusUNKNOWN string = "UNKNOWN"

	// ArtifactStatusAUDITFAILED captures enum value "AUDIT_FAILED"
	ArtifactStatusAUDITFAILED string = "AUDIT_FAILED"
)

// prop value enum
func (m *Artifact) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Artifact) validateUploadDate(formats strfmt.Registry) error {

	if swag.IsZero(m.UploadDate) { // not required
		return nil
	}

	if err := validate.FormatOf("uploadDate", "body", "date-time", m.UploadDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var artifactTypeWebInspectStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","NotExist","Ignored","Processed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactTypeWebInspectStatusPropEnum = append(artifactTypeWebInspectStatusPropEnum, v)
	}
}

const (

	// ArtifactWebInspectStatusEmpty captures enum value ""
	ArtifactWebInspectStatusEmpty string = ""

	// ArtifactWebInspectStatusNotExist captures enum value "NotExist"
	ArtifactWebInspectStatusNotExist string = "NotExist"

	// ArtifactWebInspectStatusIgnored captures enum value "Ignored"
	ArtifactWebInspectStatusIgnored string = "Ignored"

	// ArtifactWebInspectStatusProcessed captures enum value "Processed"
	ArtifactWebInspectStatusProcessed string = "Processed"
)

// prop value enum
func (m *Artifact) validateWebInspectStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, artifactTypeWebInspectStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Artifact) validateWebInspectStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.WebInspectStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateWebInspectStatusEnum("webInspectStatus", "body", m.WebInspectStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Artifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Artifact) UnmarshalBinary(b []byte) error {
	var res Artifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
