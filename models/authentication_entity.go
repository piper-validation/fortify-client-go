// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthenticationEntity A user account that can be used to authenticate in SSC. There are currently two types of user accounts that fall into this category: SSC users and LDAP users registered with SSC.
// swagger:model Authentication Entity
type AuthenticationEntity struct {

	// embed
	Embed *EmbeddedRoles `json:"_embed,omitempty"`

	// Display Name supports the use of wildcard matching. So, for example, "L*" will match Lando Calrissian and Lara Croft.
	DisplayName string `json:"displayName,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// entity name
	EntityName string `json:"entityName,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// Authentication entity id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// is ldap
	IsLdap bool `json:"isLdap,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// Distinguished Name (DN) that is only set for LDAP user accounts
	LdapDn string `json:"ldapDn,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// user photo
	UserPhoto *UserPhoto `json:"userPhoto,omitempty"`
}

// Validate validates this authentication entity
func (m *AuthenticationEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPhoto(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationEntity) validateEmbed(formats strfmt.Registry) error {

	if swag.IsZero(m.Embed) { // not required
		return nil
	}

	if m.Embed != nil {
		if err := m.Embed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embed")
			}
			return err
		}
	}

	return nil
}

func (m *AuthenticationEntity) validateUserPhoto(formats strfmt.Registry) error {

	if swag.IsZero(m.UserPhoto) { // not required
		return nil
	}

	if m.UserPhoto != nil {
		if err := m.UserPhoto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userPhoto")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationEntity) UnmarshalBinary(b []byte) error {
	var res AuthenticationEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
