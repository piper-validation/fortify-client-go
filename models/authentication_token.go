// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticationToken Token to use for authentication
// swagger:model Authentication Token
type AuthenticationToken struct {

	// Date and time the token was created (in ISO 8601 format)
	// Read Only: true
	// Format: date-time
	CreationDate Iso8601MilliDateTime `json:"creationDate,omitempty"`

	// Purpose for which the token was requested.
	Description string `json:"description,omitempty"`

	// Unique identifier of token
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// The remaining number of api calls that can be made using this token. A value of -1 denotes unlimited number of calls.
	// Read Only: true
	RemainingUsages int32 `json:"remainingUsages,omitempty"`

	// Date and time the token expires (in ISO 8601 format). If not specified, it will default to the maximum lifetime for this token type.
	// Format: date-time
	TerminalDate Iso8601MilliDateTime `json:"terminalDate,omitempty"`

	// String that represents the authentication token. (For security reasons, this value is null except for a successful token creation response.)
	// Read Only: true
	Token string `json:"token,omitempty"`

	// Token type
	// Required: true
	// Read Only: true
	Type string `json:"type"`

	// Username of token owner
	// Read Only: true
	Username string `json:"username,omitempty"`
}

// Validate validates this authentication token
func (m *AuthenticationToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationToken) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationToken) validateTerminalDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("terminalDate", "body", "date-time", m.TerminalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationToken) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationToken) UnmarshalBinary(b []byte) error {
	var res AuthenticationToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
