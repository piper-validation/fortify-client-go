// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BugTracker Bug tracker DTO object
// swagger:model Bug Tracker
type BugTracker struct {

	// Authentication required
	// Required: true
	AuthenticationRequired *bool `json:"authenticationRequired"`

	// Bug tracker configuration
	BugTrackerConfigs []*BugTrackerConfiguration `json:"bugTrackerConfigs"`

	// Bug tracker identifier
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Long display name
	LongDisplayName string `json:"longDisplayName,omitempty"`

	// Class name
	// Required: true
	PluginClassName *string `json:"pluginClassName"`

	// Bug tracker plugin identifier
	// Required: true
	PluginID *string `json:"pluginId"`

	// Short display name
	// Required: true
	ShortDisplayName *string `json:"shortDisplayName"`
}

// Validate validates this bug tracker
func (m *BugTracker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBugTrackerConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginClassName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePluginID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BugTracker) validateAuthenticationRequired(formats strfmt.Registry) error {

	if err := validate.Required("authenticationRequired", "body", m.AuthenticationRequired); err != nil {
		return err
	}

	return nil
}

func (m *BugTracker) validateBugTrackerConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.BugTrackerConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.BugTrackerConfigs); i++ {
		if swag.IsZero(m.BugTrackerConfigs[i]) { // not required
			continue
		}

		if m.BugTrackerConfigs[i] != nil {
			if err := m.BugTrackerConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bugTrackerConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BugTracker) validatePluginClassName(formats strfmt.Registry) error {

	if err := validate.Required("pluginClassName", "body", m.PluginClassName); err != nil {
		return err
	}

	return nil
}

func (m *BugTracker) validatePluginID(formats strfmt.Registry) error {

	if err := validate.Required("pluginId", "body", m.PluginID); err != nil {
		return err
	}

	return nil
}

func (m *BugTracker) validateShortDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("shortDisplayName", "body", m.ShortDisplayName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BugTracker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BugTracker) UnmarshalBinary(b []byte) error {
	var res BugTracker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
