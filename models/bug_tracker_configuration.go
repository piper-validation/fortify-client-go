// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BugTrackerConfiguration Bug tracker Configuration DTO object
// swagger:model Bug Tracker Configuration
type BugTrackerConfiguration struct {

	// Description
	// Required: true
	Description *string `json:"description"`

	// Configuration name
	// Required: true
	DisplayLabel *string `json:"displayLabel"`

	// Identifier
	// Required: true
	Identifier *string `json:"identifier"`

	// Set to true if configuration is required
	// Required: true
	Required *bool `json:"required"`

	// Configuration value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this bug tracker configuration
func (m *BugTrackerConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BugTrackerConfiguration) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *BugTrackerConfiguration) validateDisplayLabel(formats strfmt.Registry) error {

	if err := validate.Required("displayLabel", "body", m.DisplayLabel); err != nil {
		return err
	}

	return nil
}

func (m *BugTrackerConfiguration) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *BugTrackerConfiguration) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

func (m *BugTrackerConfiguration) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BugTrackerConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BugTrackerConfiguration) UnmarshalBinary(b []byte) error {
	var res BugTrackerConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
