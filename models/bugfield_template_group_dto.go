// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BugfieldTemplateGroupDto Bugfield Template Group
// swagger:model BugfieldTemplateGroupDto
type BugfieldTemplateGroupDto struct {

	// Identifier of the bug tracker plugin associated with this template group.
	// Required: true
	// Read Only: true
	BugTrackerPluginID string `json:"bugTrackerPluginId"`

	// Flag that says if bugfield template group can be deleted.
	// Required: true
	// Read Only: true
	Deletable bool `json:"deletable"`

	// description for bugfield template group.
	Description string `json:"description,omitempty"`

	// unique identifier of bugfield template group.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// short name of associated bug tracker plugin. (May be null if plugin is not currently enabled.)
	// Required: true
	Name *string `json:"name"`

	// version of bugfield template group stored on the server. This value is used for optimistic locking to prevent concurrent modification by different users at the same time.
	// Required: true
	// Read Only: true
	ObjectVersion int32 `json:"objectVersion"`

	// Collection of all templates belonging to this bugfield template group.
	// Required: true
	ValueList []*BugfieldTemplateDto `json:"valueList"`
}

// Validate validates this bugfield template group dto
func (m *BugfieldTemplateGroupDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBugTrackerPluginID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BugfieldTemplateGroupDto) validateBugTrackerPluginID(formats strfmt.Registry) error {

	if err := validate.RequiredString("bugTrackerPluginId", "body", string(m.BugTrackerPluginID)); err != nil {
		return err
	}

	return nil
}

func (m *BugfieldTemplateGroupDto) validateDeletable(formats strfmt.Registry) error {

	if err := validate.Required("deletable", "body", bool(m.Deletable)); err != nil {
		return err
	}

	return nil
}

func (m *BugfieldTemplateGroupDto) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BugfieldTemplateGroupDto) validateObjectVersion(formats strfmt.Registry) error {

	if err := validate.Required("objectVersion", "body", int32(m.ObjectVersion)); err != nil {
		return err
	}

	return nil
}

func (m *BugfieldTemplateGroupDto) validateValueList(formats strfmt.Registry) error {

	if err := validate.Required("valueList", "body", m.ValueList); err != nil {
		return err
	}

	for i := 0; i < len(m.ValueList); i++ {
		if swag.IsZero(m.ValueList[i]) { // not required
			continue
		}

		if m.ValueList[i] != nil {
			if err := m.ValueList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("valueList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BugfieldTemplateGroupDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BugfieldTemplateGroupDto) UnmarshalBinary(b []byte) error {
	var res BugfieldTemplateGroupDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
