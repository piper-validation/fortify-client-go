// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudSystemSettings Cloudscan system settings
// swagger:model CloudSystemSettings
type CloudSystemSettings struct {

	// cleanup period seconds
	// Required: true
	// Read Only: true
	CleanupPeriodSeconds int64 `json:"cleanupPeriodSeconds"`

	// controller max upload size
	// Required: true
	// Read Only: true
	ControllerMaxUploadSize int64 `json:"controllerMaxUploadSize"`

	// controller system Url
	// Required: true
	// Read Only: true
	ControllerSystemURL string `json:"controllerSystemUrl"`

	// is ssc lockdown mode
	// Required: true
	// Read Only: true
	IsSscLockdownMode bool `json:"isSscLockdownMode"`

	// job expiry delay seconds
	// Required: true
	// Read Only: true
	JobExpiryDelaySeconds int64 `json:"jobExpiryDelaySeconds"`

	// pool mapping mode
	// Required: true
	// Read Only: true
	PoolMappingMode string `json:"poolMappingMode"`

	// smtp from address
	// Required: true
	// Read Only: true
	SMTPFromAddress string `json:"smtpFromAddress"`

	// smtp host
	// Required: true
	// Read Only: true
	SMTPHost string `json:"smtpHost"`

	// smtp port
	// Required: true
	// Read Only: true
	SMTPPort int32 `json:"smtpPort"`

	// ssc Url
	// Required: true
	// Read Only: true
	SscURL string `json:"sscUrl"`

	// worker expiry delay seconds
	// Required: true
	// Read Only: true
	WorkerExpiryDelaySeconds int64 `json:"workerExpiryDelaySeconds"`

	// worker inactive delay seconds
	// Required: true
	// Read Only: true
	WorkerInactiveDelaySeconds int64 `json:"workerInactiveDelaySeconds"`

	// worker stale delay seconds
	// Required: true
	// Read Only: true
	WorkerStaleDelaySeconds int64 `json:"workerStaleDelaySeconds"`
}

// Validate validates this cloud system settings
func (m *CloudSystemSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupPeriodSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerMaxUploadSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerSystemURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSscLockdownMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobExpiryDelaySeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolMappingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSscURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerExpiryDelaySeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerInactiveDelaySeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerStaleDelaySeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudSystemSettings) validateCleanupPeriodSeconds(formats strfmt.Registry) error {

	if err := validate.Required("cleanupPeriodSeconds", "body", int64(m.CleanupPeriodSeconds)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateControllerMaxUploadSize(formats strfmt.Registry) error {

	if err := validate.Required("controllerMaxUploadSize", "body", int64(m.ControllerMaxUploadSize)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateControllerSystemURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("controllerSystemUrl", "body", string(m.ControllerSystemURL)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateIsSscLockdownMode(formats strfmt.Registry) error {

	if err := validate.Required("isSscLockdownMode", "body", bool(m.IsSscLockdownMode)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateJobExpiryDelaySeconds(formats strfmt.Registry) error {

	if err := validate.Required("jobExpiryDelaySeconds", "body", int64(m.JobExpiryDelaySeconds)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validatePoolMappingMode(formats strfmt.Registry) error {

	if err := validate.RequiredString("poolMappingMode", "body", string(m.PoolMappingMode)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateSMTPFromAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("smtpFromAddress", "body", string(m.SMTPFromAddress)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateSMTPHost(formats strfmt.Registry) error {

	if err := validate.RequiredString("smtpHost", "body", string(m.SMTPHost)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateSMTPPort(formats strfmt.Registry) error {

	if err := validate.Required("smtpPort", "body", int32(m.SMTPPort)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateSscURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("sscUrl", "body", string(m.SscURL)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateWorkerExpiryDelaySeconds(formats strfmt.Registry) error {

	if err := validate.Required("workerExpiryDelaySeconds", "body", int64(m.WorkerExpiryDelaySeconds)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateWorkerInactiveDelaySeconds(formats strfmt.Registry) error {

	if err := validate.Required("workerInactiveDelaySeconds", "body", int64(m.WorkerInactiveDelaySeconds)); err != nil {
		return err
	}

	return nil
}

func (m *CloudSystemSettings) validateWorkerStaleDelaySeconds(formats strfmt.Registry) error {

	if err := validate.Required("workerStaleDelaySeconds", "body", int64(m.WorkerStaleDelaySeconds)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudSystemSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudSystemSettings) UnmarshalBinary(b []byte) error {
	var res CloudSystemSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
