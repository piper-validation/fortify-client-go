// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudWorker Cloudscan worker
// swagger:model CloudWorker
type CloudWorker struct {

	// available processors
	// Required: true
	// Read Only: true
	AvailableProcessors int32 `json:"availableProcessors"`

	// cloud pool
	// Required: true
	// Read Only: true
	CloudPool *CloudPool `json:"cloudPool"`

	// host name
	// Required: true
	// Read Only: true
	HostName string `json:"hostName"`

	// ip address
	// Required: true
	// Read Only: true
	IPAddress string `json:"ipAddress"`

	// last activity
	// Required: true
	// Read Only: true
	LastActivity string `json:"lastActivity"`

	// last seen
	// Required: true
	// Read Only: true
	// Format: date-time
	LastSeen Iso8601MilliDateTime `json:"lastSeen"`

	// os architecture
	// Required: true
	// Read Only: true
	OsArchitecture string `json:"osArchitecture"`

	// os name
	// Required: true
	// Read Only: true
	OsName string `json:"osName"`

	// os version
	// Required: true
	// Read Only: true
	OsVersion string `json:"osVersion"`

	// process Uuid
	// Required: true
	// Read Only: true
	ProcessUUID string `json:"processUuid"`

	// sca version
	// Required: true
	// Read Only: true
	ScaVersion string `json:"scaVersion"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// total physical memory
	// Required: true
	// Read Only: true
	TotalPhysicalMemory int64 `json:"totalPhysicalMemory"`

	// uuid
	// Required: true
	// Read Only: true
	UUID string `json:"uuid"`

	// vm name
	// Required: true
	// Read Only: true
	VMName string `json:"vmName"`

	// worker expiry time
	// Required: true
	// Read Only: true
	// Format: date-time
	WorkerExpiryTime Iso8601MilliDateTime `json:"workerExpiryTime"`

	// worker start time
	// Required: true
	// Read Only: true
	// Format: date-time
	WorkerStartTime Iso8601MilliDateTime `json:"workerStartTime"`
}

// Validate validates this cloud worker
func (m *CloudWorker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableProcessors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPhysicalMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudWorker) validateAvailableProcessors(formats strfmt.Registry) error {

	if err := validate.Required("availableProcessors", "body", int32(m.AvailableProcessors)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateCloudPool(formats strfmt.Registry) error {

	if err := validate.Required("cloudPool", "body", m.CloudPool); err != nil {
		return err
	}

	if m.CloudPool != nil {
		if err := m.CloudPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudPool")
			}
			return err
		}
	}

	return nil
}

func (m *CloudWorker) validateHostName(formats strfmt.Registry) error {

	if err := validate.RequiredString("hostName", "body", string(m.HostName)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipAddress", "body", string(m.IPAddress)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateLastActivity(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastActivity", "body", string(m.LastActivity)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.Required("lastSeen", "body", Iso8601MilliDateTime(m.LastSeen)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastSeen", "body", "date-time", m.LastSeen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateOsArchitecture(formats strfmt.Registry) error {

	if err := validate.RequiredString("osArchitecture", "body", string(m.OsArchitecture)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateOsName(formats strfmt.Registry) error {

	if err := validate.RequiredString("osName", "body", string(m.OsName)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateOsVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("osVersion", "body", string(m.OsVersion)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateProcessUUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("processUuid", "body", string(m.ProcessUUID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateScaVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("scaVersion", "body", string(m.ScaVersion)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateTotalPhysicalMemory(formats strfmt.Registry) error {

	if err := validate.Required("totalPhysicalMemory", "body", int64(m.TotalPhysicalMemory)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateUUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateVMName(formats strfmt.Registry) error {

	if err := validate.RequiredString("vmName", "body", string(m.VMName)); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateWorkerExpiryTime(formats strfmt.Registry) error {

	if err := validate.Required("workerExpiryTime", "body", Iso8601MilliDateTime(m.WorkerExpiryTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("workerExpiryTime", "body", "date-time", m.WorkerExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudWorker) validateWorkerStartTime(formats strfmt.Registry) error {

	if err := validate.Required("workerStartTime", "body", Iso8601MilliDateTime(m.WorkerStartTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("workerStartTime", "body", "date-time", m.WorkerStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudWorker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudWorker) UnmarshalBinary(b []byte) error {
	var res CloudWorker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
