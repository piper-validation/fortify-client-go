// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigProperty SSC application configuration property
// swagger:model ConfigProperty
type ConfigProperty struct {

	// Should the SSC server be restarted after changing value of the property to apply the changes.
	// Read Only: true
	AppliedAfterRestarting *bool `json:"appliedAfterRestarting,omitempty"`

	// Meta information about how the property's value should be validated on the client side.
	// Read Only: true
	ConfigPropertyValueValidation *ConfigPropertyValueValidation `json:"configPropertyValueValidation,omitempty"`

	// Property description.
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Parent group name the property belongs to.
	// Read Only: true
	Group string `json:"group,omitempty"`

	// Flag is set to TRUE if property is allowed to be edited on UI.
	// Read Only: true
	GroupSwitchEnabled *bool `json:"groupSwitchEnabled,omitempty"`

	// Configuration property unique name.
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Property value type.
	// Read Only: true
	// Enum: [BOOLEAN INTEGER STRING STRINGMULTILINE OPTIONLIST DYNAMIC_OPTIONLIST ENCODED ENCODEDHIDDEN EMAIL URL HOSTNAME MULTI_EMAIL DISTINGUISHED_NAME ENCODED_DISTINGUISHED_NAME DISTINGUISHED_NAMES;]
	PropertyType string `json:"propertyType,omitempty"`

	// If special permission is required to get value of this property.
	// Read Only: true
	ProtectedOption *bool `json:"protectedOption,omitempty"`

	// Flag is set to TRUE if this property is required and always must have non empty value.
	// Read Only: true
	Required *bool `json:"required,omitempty"`

	// Parent subgroup name the property belongs to.
	// Read Only: true
	SubGroup string `json:"subGroup,omitempty"`

	// Configuration property value.
	// Required: true
	// Enum: [Depends on property type. It can be number string URL email or value from values list.]
	Value *string `json:"value"`

	// List of allowed property values if property type is OPTIONLIST or DYNAMIC_OPTIONLIST.
	// Read Only: true
	ValuesList []*ConfigPropertyValueItem `json:"valuesList"`

	// Configuration property version stored on the server. This value is used for optimistic locking of the property object to prevent concurrent changes of the property value by different users at the same time.
	// Required: true
	// Read Only: true
	Version int32 `json:"version"`
}

// Validate validates this config property
func (m *ConfigProperty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigPropertyValueValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValuesList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigProperty) validateConfigPropertyValueValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigPropertyValueValidation) { // not required
		return nil
	}

	if m.ConfigPropertyValueValidation != nil {
		if err := m.ConfigPropertyValueValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configPropertyValueValidation")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigProperty) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

var configPropertyTypePropertyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOOLEAN","INTEGER","STRING","STRINGMULTILINE","OPTIONLIST","DYNAMIC_OPTIONLIST","ENCODED","ENCODEDHIDDEN","EMAIL","URL","HOSTNAME","MULTI_EMAIL","DISTINGUISHED_NAME","ENCODED_DISTINGUISHED_NAME","DISTINGUISHED_NAMES;"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configPropertyTypePropertyTypePropEnum = append(configPropertyTypePropertyTypePropEnum, v)
	}
}

const (

	// ConfigPropertyPropertyTypeBOOLEAN captures enum value "BOOLEAN"
	ConfigPropertyPropertyTypeBOOLEAN string = "BOOLEAN"

	// ConfigPropertyPropertyTypeINTEGER captures enum value "INTEGER"
	ConfigPropertyPropertyTypeINTEGER string = "INTEGER"

	// ConfigPropertyPropertyTypeSTRING captures enum value "STRING"
	ConfigPropertyPropertyTypeSTRING string = "STRING"

	// ConfigPropertyPropertyTypeSTRINGMULTILINE captures enum value "STRINGMULTILINE"
	ConfigPropertyPropertyTypeSTRINGMULTILINE string = "STRINGMULTILINE"

	// ConfigPropertyPropertyTypeOPTIONLIST captures enum value "OPTIONLIST"
	ConfigPropertyPropertyTypeOPTIONLIST string = "OPTIONLIST"

	// ConfigPropertyPropertyTypeDYNAMICOPTIONLIST captures enum value "DYNAMIC_OPTIONLIST"
	ConfigPropertyPropertyTypeDYNAMICOPTIONLIST string = "DYNAMIC_OPTIONLIST"

	// ConfigPropertyPropertyTypeENCODED captures enum value "ENCODED"
	ConfigPropertyPropertyTypeENCODED string = "ENCODED"

	// ConfigPropertyPropertyTypeENCODEDHIDDEN captures enum value "ENCODEDHIDDEN"
	ConfigPropertyPropertyTypeENCODEDHIDDEN string = "ENCODEDHIDDEN"

	// ConfigPropertyPropertyTypeEMAIL captures enum value "EMAIL"
	ConfigPropertyPropertyTypeEMAIL string = "EMAIL"

	// ConfigPropertyPropertyTypeURL captures enum value "URL"
	ConfigPropertyPropertyTypeURL string = "URL"

	// ConfigPropertyPropertyTypeHOSTNAME captures enum value "HOSTNAME"
	ConfigPropertyPropertyTypeHOSTNAME string = "HOSTNAME"

	// ConfigPropertyPropertyTypeMULTIEMAIL captures enum value "MULTI_EMAIL"
	ConfigPropertyPropertyTypeMULTIEMAIL string = "MULTI_EMAIL"

	// ConfigPropertyPropertyTypeDISTINGUISHEDNAME captures enum value "DISTINGUISHED_NAME"
	ConfigPropertyPropertyTypeDISTINGUISHEDNAME string = "DISTINGUISHED_NAME"

	// ConfigPropertyPropertyTypeENCODEDDISTINGUISHEDNAME captures enum value "ENCODED_DISTINGUISHED_NAME"
	ConfigPropertyPropertyTypeENCODEDDISTINGUISHEDNAME string = "ENCODED_DISTINGUISHED_NAME"

	// ConfigPropertyPropertyTypeDISTINGUISHEDNAMES captures enum value "DISTINGUISHED_NAMES;"
	ConfigPropertyPropertyTypeDISTINGUISHEDNAMES string = "DISTINGUISHED_NAMES;"
)

// prop value enum
func (m *ConfigProperty) validatePropertyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configPropertyTypePropertyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigProperty) validatePropertyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePropertyTypeEnum("propertyType", "body", m.PropertyType); err != nil {
		return err
	}

	return nil
}

var configPropertyTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Depends on property type. It can be number","string","URL","email or value from values list."]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configPropertyTypeValuePropEnum = append(configPropertyTypeValuePropEnum, v)
	}
}

const (

	// ConfigPropertyValueDependsOnPropertyTypeItCanBeNumber captures enum value "Depends on property type. It can be number"
	ConfigPropertyValueDependsOnPropertyTypeItCanBeNumber string = "Depends on property type. It can be number"

	// ConfigPropertyValueString captures enum value "string"
	ConfigPropertyValueString string = "string"

	// ConfigPropertyValueURL captures enum value "URL"
	ConfigPropertyValueURL string = "URL"

	// ConfigPropertyValueEmailOrValueFromValuesList captures enum value "email or value from values list."
	ConfigPropertyValueEmailOrValueFromValuesList string = "email or value from values list."
)

// prop value enum
func (m *ConfigProperty) validateValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configPropertyTypeValuePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigProperty) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

func (m *ConfigProperty) validateValuesList(formats strfmt.Registry) error {

	if swag.IsZero(m.ValuesList) { // not required
		return nil
	}

	for i := 0; i < len(m.ValuesList); i++ {
		if swag.IsZero(m.ValuesList[i]) { // not required
			continue
		}

		if m.ValuesList[i] != nil {
			if err := m.ValuesList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("valuesList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigProperty) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", int32(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigProperty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigProperty) UnmarshalBinary(b []byte) error {
	var res ConfigProperty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
