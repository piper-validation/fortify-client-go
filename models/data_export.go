// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataExport Data Export DTO object
// swagger:model Data Export
type DataExport struct {

	// Application version id - required if DatasetName = "Audit"
	AppVersionID int64 `json:"appVersionId,omitempty"`

	// Application version name
	AppVersionName string `json:"appVersionName,omitempty"`

	// Dataset name - e.g. "Audit", "Issue Stats" - corresponds to page from which data is exported
	// Required: true
	DatasetName *string `json:"datasetName"`

	// Document Info id for file blob
	DocumentInfoID int64 `json:"documentInfoId,omitempty"`

	// Data export file expiration in days
	Expiration int32 `json:"expiration,omitempty"`

	// Export date
	// Format: date-time
	ExportDate strfmt.DateTime `json:"exportDate,omitempty"`

	// Name of data export file
	// Required: true
	FileName *string `json:"fileName"`

	// File type, e.g. CSV
	FileType string `json:"fileType,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Note, i.e. comments or info related to data being exported
	Note string `json:"note,omitempty"`

	// Data export status
	// Enum: [EXPORT_PROCESS_STARTED EXPORT_PROCESS_COMPLETED EXPORT_PROCESS_FAILED]
	Status string `json:"status,omitempty"`

	// User name of user who initiated the data export
	UserName string `json:"userName,omitempty"`
}

// Validate validates this data export
func (m *DataExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatasetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExport) validateDatasetName(formats strfmt.Registry) error {

	if err := validate.Required("datasetName", "body", m.DatasetName); err != nil {
		return err
	}

	return nil
}

func (m *DataExport) validateExportDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportDate) { // not required
		return nil
	}

	if err := validate.FormatOf("exportDate", "body", "date-time", m.ExportDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DataExport) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

var dataExportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXPORT_PROCESS_STARTED","EXPORT_PROCESS_COMPLETED","EXPORT_PROCESS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExportTypeStatusPropEnum = append(dataExportTypeStatusPropEnum, v)
	}
}

const (

	// DataExportStatusEXPORTPROCESSSTARTED captures enum value "EXPORT_PROCESS_STARTED"
	DataExportStatusEXPORTPROCESSSTARTED string = "EXPORT_PROCESS_STARTED"

	// DataExportStatusEXPORTPROCESSCOMPLETED captures enum value "EXPORT_PROCESS_COMPLETED"
	DataExportStatusEXPORTPROCESSCOMPLETED string = "EXPORT_PROCESS_COMPLETED"

	// DataExportStatusEXPORTPROCESSFAILED captures enum value "EXPORT_PROCESS_FAILED"
	DataExportStatusEXPORTPROCESSFAILED string = "EXPORT_PROCESS_FAILED"
)

// prop value enum
func (m *DataExport) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExportTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExport) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataExport) UnmarshalBinary(b []byte) error {
	var res DataExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
