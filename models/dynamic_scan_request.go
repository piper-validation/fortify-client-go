// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DynamicScanRequest Dynamic Scan Request object
// swagger:model DynamicScanRequest
type DynamicScanRequest struct {

	// Unique identifier of dynamic scan request
	// Required: true
	ID *int64 `json:"id"`

	// The date that the dynamic scan request was updated
	// Format: date-time
	LastUpdateDate Iso8601MilliDateTime `json:"lastUpdateDate,omitempty"`

	// The object version of the dynamic scan request
	ObjectVersion int32 `json:"objectVersion,omitempty"`

	// Parameters that are needed for dynamic scan request
	// Required: true
	Parameters []*DynamicScanRequestParameter `json:"parameters"`

	// The date that the dynamic scan request was submitted
	// Format: date-time
	RequestedDate Iso8601MilliDateTime `json:"requestedDate,omitempty"`

	// The status of the dynamic scan request
	// Enum: [SUBMITTED PICKED_UP CANCELED COMPLETED]
	Status string `json:"status,omitempty"`

	// The id of the user who submitted the dynamic scan request
	Submitter string `json:"submitter,omitempty"`
}

// Validate validates this dynamic scan request
func (m *DynamicScanRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DynamicScanRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DynamicScanRequest) validateLastUpdateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdateDate", "body", "date-time", m.LastUpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DynamicScanRequest) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DynamicScanRequest) validateRequestedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedDate", "body", "date-time", m.RequestedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var dynamicScanRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUBMITTED","PICKED_UP","CANCELED","COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dynamicScanRequestTypeStatusPropEnum = append(dynamicScanRequestTypeStatusPropEnum, v)
	}
}

const (

	// DynamicScanRequestStatusSUBMITTED captures enum value "SUBMITTED"
	DynamicScanRequestStatusSUBMITTED string = "SUBMITTED"

	// DynamicScanRequestStatusPICKEDUP captures enum value "PICKED_UP"
	DynamicScanRequestStatusPICKEDUP string = "PICKED_UP"

	// DynamicScanRequestStatusCANCELED captures enum value "CANCELED"
	DynamicScanRequestStatusCANCELED string = "CANCELED"

	// DynamicScanRequestStatusCOMPLETED captures enum value "COMPLETED"
	DynamicScanRequestStatusCOMPLETED string = "COMPLETED"
)

// prop value enum
func (m *DynamicScanRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dynamicScanRequestTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DynamicScanRequest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DynamicScanRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DynamicScanRequest) UnmarshalBinary(b []byte) error {
	var res DynamicScanRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
