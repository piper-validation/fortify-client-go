// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExportAuditToCSVRequest Request to export audit information to CSV file
// swagger:model ExportAuditToCSVRequest
type ExportAuditToCSVRequest struct {

	// Aggregateby
	AggregateBy string `json:"aggregateBy,omitempty"`

	// Will collapse issues in exported files
	CollapseIssues bool `json:"collapseIssues,omitempty"`

	// Dataset name (Audit)
	// Required: true
	DatasetName *string `json:"datasetName"`

	// File name to save
	// Required: true
	FileName *string `json:"fileName"`

	// Filter
	Filter string `json:"filter,omitempty"`

	// Filterby
	FilterBy string `json:"filterBy,omitempty"`

	// Filterset
	// Required: true
	FilterSet *string `json:"filterSet"`

	// Will include comments in history
	IncludeCommentsInHistory bool `json:"includeCommentsInHistory,omitempty"`

	// Will include hidden issues
	IncludeHidden bool `json:"includeHidden,omitempty"`

	// Will include removed issues
	IncludeRemoved bool `json:"includeRemoved,omitempty"`

	// Will include suppressed issues
	IncludeSuppressed bool `json:"includeSuppressed,omitempty"`

	// Search issue query
	IssueSearch string `json:"issueSearch,omitempty"`

	// Limit
	Limit int32 `json:"limit,omitempty"`

	// Note
	Note string `json:"note,omitempty"`

	// Orderby
	// Required: true
	OrderBy *string `json:"orderBy"`

	// Application version id to export audit data
	// Required: true
	ProjectVersionID *int64 `json:"projectVersionId"`

	// will restrict to user issues
	RestrictToUsersIssues bool `json:"restrictToUsersIssues,omitempty"`

	// Start
	Start int32 `json:"start,omitempty"`

	// Will use short file names
	UseShortFileNames bool `json:"useShortFileNames,omitempty"`
}

// Validate validates this export audit to c s v request
func (m *ExportAuditToCSVRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatasetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportAuditToCSVRequest) validateDatasetName(formats strfmt.Registry) error {

	if err := validate.Required("datasetName", "body", m.DatasetName); err != nil {
		return err
	}

	return nil
}

func (m *ExportAuditToCSVRequest) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *ExportAuditToCSVRequest) validateFilterSet(formats strfmt.Registry) error {

	if err := validate.Required("filterSet", "body", m.FilterSet); err != nil {
		return err
	}

	return nil
}

func (m *ExportAuditToCSVRequest) validateOrderBy(formats strfmt.Registry) error {

	if err := validate.Required("orderBy", "body", m.OrderBy); err != nil {
		return err
	}

	return nil
}

func (m *ExportAuditToCSVRequest) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", m.ProjectVersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExportAuditToCSVRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExportAuditToCSVRequest) UnmarshalBinary(b []byte) error {
	var res ExportAuditToCSVRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
