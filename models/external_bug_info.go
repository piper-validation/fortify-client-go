// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalBugInfo External Bug Info DTO object
// swagger:model External Bug Info
type ExternalBugInfo struct {

	// Link to a bug the user can navigate to by clicking the link
	// Required: true
	ExternalBugDeepLink *string `json:"externalBugDeepLink"`

	// ID of the bug
	// Required: true
	ExternalBugID *string `json:"externalBugId"`

	// True if user wants to file a bug for all selected issues in UI
	// Required: true
	FileBugForSelectAll *bool `json:"fileBugForSelectAll"`

	// Count of issues for which a bug is filed
	// Required: true
	IssueCount *int64 `json:"issueCount"`

	// List of Issue Instance IDs
	// Required: true
	IssueInstanceIds []string `json:"issueInstanceIds"`
}

// Validate validates this external bug info
func (m *ExternalBugInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalBugDeepLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalBugID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileBugForSelectAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueInstanceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalBugInfo) validateExternalBugDeepLink(formats strfmt.Registry) error {

	if err := validate.Required("externalBugDeepLink", "body", m.ExternalBugDeepLink); err != nil {
		return err
	}

	return nil
}

func (m *ExternalBugInfo) validateExternalBugID(formats strfmt.Registry) error {

	if err := validate.Required("externalBugId", "body", m.ExternalBugID); err != nil {
		return err
	}

	return nil
}

func (m *ExternalBugInfo) validateFileBugForSelectAll(formats strfmt.Registry) error {

	if err := validate.Required("fileBugForSelectAll", "body", m.FileBugForSelectAll); err != nil {
		return err
	}

	return nil
}

func (m *ExternalBugInfo) validateIssueCount(formats strfmt.Registry) error {

	if err := validate.Required("issueCount", "body", m.IssueCount); err != nil {
		return err
	}

	return nil
}

func (m *ExternalBugInfo) validateIssueInstanceIds(formats strfmt.Registry) error {

	if err := validate.Required("issueInstanceIds", "body", m.IssueInstanceIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalBugInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalBugInfo) UnmarshalBinary(b []byte) error {
	var res ExternalBugInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
