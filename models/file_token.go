// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileToken Token to upload or download files
// swagger:model File token
type FileToken struct {

	// Type of single-use file token
	// Required: true
	// Enum: [UPLOAD DOWNLOAD PREVIEW_FILE REPORT_FILE]
	FileTokenType *string `json:"fileTokenType"`

	// Value of single-use token to be used as the 'mat' URL parameter during a file operation
	// Read Only: true
	Token string `json:"token,omitempty"`
}

// Validate validates this file token
func (m *FileToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileTokenTypeFileTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UPLOAD","DOWNLOAD","PREVIEW_FILE","REPORT_FILE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileTokenTypeFileTokenTypePropEnum = append(fileTokenTypeFileTokenTypePropEnum, v)
	}
}

const (

	// FileTokenFileTokenTypeUPLOAD captures enum value "UPLOAD"
	FileTokenFileTokenTypeUPLOAD string = "UPLOAD"

	// FileTokenFileTokenTypeDOWNLOAD captures enum value "DOWNLOAD"
	FileTokenFileTokenTypeDOWNLOAD string = "DOWNLOAD"

	// FileTokenFileTokenTypePREVIEWFILE captures enum value "PREVIEW_FILE"
	FileTokenFileTokenTypePREVIEWFILE string = "PREVIEW_FILE"

	// FileTokenFileTokenTypeREPORTFILE captures enum value "REPORT_FILE"
	FileTokenFileTokenTypeREPORTFILE string = "REPORT_FILE"
)

// prop value enum
func (m *FileToken) validateFileTokenTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fileTokenTypeFileTokenTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FileToken) validateFileTokenType(formats strfmt.Registry) error {

	if err := validate.Required("fileTokenType", "body", m.FileTokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileTokenTypeEnum("fileTokenType", "body", *m.FileTokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileToken) UnmarshalBinary(b []byte) error {
	var res FileToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
