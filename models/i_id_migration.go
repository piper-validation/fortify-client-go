// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IIDMigration i ID migration
// swagger:model IID Migration
type IIDMigration struct {

	// artifact Id
	ArtifactID int64 `json:"artifactId,omitempty"`

	// IID migration id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// mappings
	Mappings []*IidMapping `json:"mappings"`

	// processing date
	// Format: date-time
	ProcessingDate Iso8601MilliDateTime `json:"processingDate,omitempty"`

	// project version Id
	ProjectVersionID int64 `json:"projectVersionId,omitempty"`

	// status
	// Enum: [NONE SCHED_PROCESSING PROCESSING PROCESS_COMPLETE ERROR_PROCESSING REQUIRE_AUTH DELETING ERROR_DELETING DELETED PURGING PURGED ERROR_PURGING DISPATCH_ANALYSIS DISPATCH_REAUDIT ERROR_DISPATCH QUEUED_ANALYSIS REQUEUED_ANALYSIS ANALYZING ANALYSIS_COMPLETE ERROR_ANALYZING UNKNOWN AUDIT_FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this i ID migration
func (m *IIDMigration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IIDMigration) validateMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IIDMigration) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processingDate", "body", "date-time", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var iIdMigrationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","SCHED_PROCESSING","PROCESSING","PROCESS_COMPLETE","ERROR_PROCESSING","REQUIRE_AUTH","DELETING","ERROR_DELETING","DELETED","PURGING","PURGED","ERROR_PURGING","DISPATCH_ANALYSIS","DISPATCH_REAUDIT","ERROR_DISPATCH","QUEUED_ANALYSIS","REQUEUED_ANALYSIS","ANALYZING","ANALYSIS_COMPLETE","ERROR_ANALYZING","UNKNOWN","AUDIT_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iIdMigrationTypeStatusPropEnum = append(iIdMigrationTypeStatusPropEnum, v)
	}
}

const (

	// IIDMigrationStatusNONE captures enum value "NONE"
	IIDMigrationStatusNONE string = "NONE"

	// IIDMigrationStatusSCHEDPROCESSING captures enum value "SCHED_PROCESSING"
	IIDMigrationStatusSCHEDPROCESSING string = "SCHED_PROCESSING"

	// IIDMigrationStatusPROCESSING captures enum value "PROCESSING"
	IIDMigrationStatusPROCESSING string = "PROCESSING"

	// IIDMigrationStatusPROCESSCOMPLETE captures enum value "PROCESS_COMPLETE"
	IIDMigrationStatusPROCESSCOMPLETE string = "PROCESS_COMPLETE"

	// IIDMigrationStatusERRORPROCESSING captures enum value "ERROR_PROCESSING"
	IIDMigrationStatusERRORPROCESSING string = "ERROR_PROCESSING"

	// IIDMigrationStatusREQUIREAUTH captures enum value "REQUIRE_AUTH"
	IIDMigrationStatusREQUIREAUTH string = "REQUIRE_AUTH"

	// IIDMigrationStatusDELETING captures enum value "DELETING"
	IIDMigrationStatusDELETING string = "DELETING"

	// IIDMigrationStatusERRORDELETING captures enum value "ERROR_DELETING"
	IIDMigrationStatusERRORDELETING string = "ERROR_DELETING"

	// IIDMigrationStatusDELETED captures enum value "DELETED"
	IIDMigrationStatusDELETED string = "DELETED"

	// IIDMigrationStatusPURGING captures enum value "PURGING"
	IIDMigrationStatusPURGING string = "PURGING"

	// IIDMigrationStatusPURGED captures enum value "PURGED"
	IIDMigrationStatusPURGED string = "PURGED"

	// IIDMigrationStatusERRORPURGING captures enum value "ERROR_PURGING"
	IIDMigrationStatusERRORPURGING string = "ERROR_PURGING"

	// IIDMigrationStatusDISPATCHANALYSIS captures enum value "DISPATCH_ANALYSIS"
	IIDMigrationStatusDISPATCHANALYSIS string = "DISPATCH_ANALYSIS"

	// IIDMigrationStatusDISPATCHREAUDIT captures enum value "DISPATCH_REAUDIT"
	IIDMigrationStatusDISPATCHREAUDIT string = "DISPATCH_REAUDIT"

	// IIDMigrationStatusERRORDISPATCH captures enum value "ERROR_DISPATCH"
	IIDMigrationStatusERRORDISPATCH string = "ERROR_DISPATCH"

	// IIDMigrationStatusQUEUEDANALYSIS captures enum value "QUEUED_ANALYSIS"
	IIDMigrationStatusQUEUEDANALYSIS string = "QUEUED_ANALYSIS"

	// IIDMigrationStatusREQUEUEDANALYSIS captures enum value "REQUEUED_ANALYSIS"
	IIDMigrationStatusREQUEUEDANALYSIS string = "REQUEUED_ANALYSIS"

	// IIDMigrationStatusANALYZING captures enum value "ANALYZING"
	IIDMigrationStatusANALYZING string = "ANALYZING"

	// IIDMigrationStatusANALYSISCOMPLETE captures enum value "ANALYSIS_COMPLETE"
	IIDMigrationStatusANALYSISCOMPLETE string = "ANALYSIS_COMPLETE"

	// IIDMigrationStatusERRORANALYZING captures enum value "ERROR_ANALYZING"
	IIDMigrationStatusERRORANALYZING string = "ERROR_ANALYZING"

	// IIDMigrationStatusUNKNOWN captures enum value "UNKNOWN"
	IIDMigrationStatusUNKNOWN string = "UNKNOWN"

	// IIDMigrationStatusAUDITFAILED captures enum value "AUDIT_FAILED"
	IIDMigrationStatusAUDITFAILED string = "AUDIT_FAILED"
)

// prop value enum
func (m *IIDMigration) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iIdMigrationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IIDMigration) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IIDMigration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IIDMigration) UnmarshalBinary(b []byte) error {
	var res IIDMigration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
