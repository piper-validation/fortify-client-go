// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueAgingDto Issue aging object contains application metrics.
// swagger:model IssueAgingDto
type IssueAgingDto struct {

	// Average number of days to fix issues in application versions.
	// Read Only: true
	AverageDaysToRemediate int32 `json:"averageDaysToRemediate,omitempty"`

	// Average number of days to review issues in application versions.
	// Read Only: true
	AverageDaysToReview int32 `json:"averageDaysToReview,omitempty"`

	// Bug density per 10 000 of scanned lines of code.
	// Read Only: true
	BugDensity float64 `json:"bugDensity,omitempty"`

	// Number of files that were scanned in all application versions.
	// Read Only: true
	FilesScanned int64 `json:"filesScanned,omitempty"`

	// This is dynamic attribute which value depend of the aggregation attribute. It can be application ID, application version ID or application version attribute GUID.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Number of issues that are pending review in all application versions.
	// Read Only: true
	IssuesPendingReview int64 `json:"issuesPendingReview,omitempty"`

	// Number of lines of code that were scanned by scans which results are stored in the application versions.
	// Read Only: true
	LinesOfCode int64 `json:"linesOfCode,omitempty"`

	// This is dynamic attribute which value depend of the aggregation attribute. It can be application name, application version name or application version attribute name.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Number of application versions in the application.
	// Read Only: true
	NumberOfApplicationVersions int32 `json:"numberOfApplicationVersions,omitempty"`

	// Issue audites that have been done after this date have been taken into account for average days to review calculation.
	// Read Only: true
	// Format: date-time
	OldestScanDate strfmt.DateTime `json:"oldestScanDate,omitempty"`

	// Number of not remediated issues in all application versions.
	// Read Only: true
	OpenIssues int64 `json:"openIssues,omitempty"`

	// Flag that indicates that application metrics state was changed and it metrics are going to be recalculated.
	// Read Only: true
	SnapshotOutOfDate *bool `json:"snapshotOutOfDate,omitempty"`
}

// Validate validates this issue aging dto
func (m *IssueAgingDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOldestScanDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueAgingDto) validateOldestScanDate(formats strfmt.Registry) error {

	if swag.IsZero(m.OldestScanDate) { // not required
		return nil
	}

	if err := validate.FormatOf("oldestScanDate", "body", "date-time", m.OldestScanDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueAgingDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueAgingDto) UnmarshalBinary(b []byte) error {
	var res IssueAgingDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
