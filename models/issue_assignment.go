// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueAssignment counts of issues assigned to user
// swagger:model Issue Assignment
type IssueAssignment struct {

	// total number of issues assigned to user across all application versions
	// Required: true
	// Read Only: true
	IssueCountAllProjectVer int32 `json:"issueCountAllProjectVer"`

	// number of issues assigned to user in current application version
	// Required: true
	// Read Only: true
	IssueCountCertainProjectVer int32 `json:"issueCountCertainProjectVer"`

	// project version Id
	// Required: true
	// Read Only: true
	ProjectVersionID int64 `json:"projectVersionId"`

	// user name
	// Required: true
	// Read Only: true
	UserName string `json:"userName"`
}

// Validate validates this issue assignment
func (m *IssueAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssueCountAllProjectVer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueCountCertainProjectVer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueAssignment) validateIssueCountAllProjectVer(formats strfmt.Registry) error {

	if err := validate.Required("issueCountAllProjectVer", "body", int32(m.IssueCountAllProjectVer)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAssignment) validateIssueCountCertainProjectVer(formats strfmt.Registry) error {

	if err := validate.Required("issueCountCertainProjectVer", "body", int32(m.IssueCountCertainProjectVer)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAssignment) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", int64(m.ProjectVersionID)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAssignment) validateUserName(formats strfmt.Registry) error {

	if err := validate.RequiredString("userName", "body", string(m.UserName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueAssignment) UnmarshalBinary(b []byte) error {
	var res IssueAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
