// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueAuditHistoryDto Issue audit history record.
// swagger:model IssueAuditHistoryDto
type IssueAuditHistoryDto struct {

	// Changed attribute name.
	// Required: true
	// Read Only: true
	AttributeName string `json:"attributeName"`

	// Date and time when audit was performed.
	// Required: true
	// Read Only: true
	// Format: date-time
	AuditDateTime strfmt.DateTime `json:"auditDateTime"`

	// Flag that indicates if there were any conflicts when audit information was merged.
	// Required: true
	// Read Only: true
	Conflict bool `json:"conflict"`

	// ID of the issue the history record belongs to
	// Required: true
	// Read Only: true
	IssueID int64 `json:"issueId"`

	// Attribute value after audit.
	// Required: true
	// Read Only: true
	NewValue string `json:"newValue"`

	// Attribute value before audit.
	// Required: true
	// Read Only: true
	OldValue string `json:"oldValue"`

	// Sequence number of the history record in the list of all audit history records for the issue.
	// Required: true
	// Read Only: true
	SequenceNumber int32 `json:"sequenceNumber"`

	// Name of the user who performed the audit.
	// Required: true
	// Read Only: true
	UserName string `json:"userName"`

	// Attribute type.
	// Required: true
	// Read Only: true
	// Enum: [LIST DECIMAL DATE TEXT]
	ValueType string `json:"valueType"`
}

// Validate validates this issue audit history dto
func (m *IssueAuditHistoryDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConflict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueAuditHistoryDto) validateAttributeName(formats strfmt.Registry) error {

	if err := validate.RequiredString("attributeName", "body", string(m.AttributeName)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateAuditDateTime(formats strfmt.Registry) error {

	if err := validate.Required("auditDateTime", "body", strfmt.DateTime(m.AuditDateTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("auditDateTime", "body", "date-time", m.AuditDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateConflict(formats strfmt.Registry) error {

	if err := validate.Required("conflict", "body", bool(m.Conflict)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateIssueID(formats strfmt.Registry) error {

	if err := validate.Required("issueId", "body", int64(m.IssueID)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateNewValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("newValue", "body", string(m.NewValue)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateOldValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("oldValue", "body", string(m.OldValue)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("sequenceNumber", "body", int32(m.SequenceNumber)); err != nil {
		return err
	}

	return nil
}

func (m *IssueAuditHistoryDto) validateUserName(formats strfmt.Registry) error {

	if err := validate.RequiredString("userName", "body", string(m.UserName)); err != nil {
		return err
	}

	return nil
}

var issueAuditHistoryDtoTypeValueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LIST","DECIMAL","DATE","TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueAuditHistoryDtoTypeValueTypePropEnum = append(issueAuditHistoryDtoTypeValueTypePropEnum, v)
	}
}

const (

	// IssueAuditHistoryDtoValueTypeLIST captures enum value "LIST"
	IssueAuditHistoryDtoValueTypeLIST string = "LIST"

	// IssueAuditHistoryDtoValueTypeDECIMAL captures enum value "DECIMAL"
	IssueAuditHistoryDtoValueTypeDECIMAL string = "DECIMAL"

	// IssueAuditHistoryDtoValueTypeDATE captures enum value "DATE"
	IssueAuditHistoryDtoValueTypeDATE string = "DATE"

	// IssueAuditHistoryDtoValueTypeTEXT captures enum value "TEXT"
	IssueAuditHistoryDtoValueTypeTEXT string = "TEXT"
)

// prop value enum
func (m *IssueAuditHistoryDto) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, issueAuditHistoryDtoTypeValueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IssueAuditHistoryDto) validateValueType(formats strfmt.Registry) error {

	if err := validate.RequiredString("valueType", "body", string(m.ValueType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueTypeEnum("valueType", "body", m.ValueType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueAuditHistoryDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueAuditHistoryDto) UnmarshalBinary(b []byte) error {
	var res IssueAuditHistoryDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
