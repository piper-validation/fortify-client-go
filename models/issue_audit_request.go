// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueAuditRequest Request to audit issues
// swagger:model IssueAuditRequest
type IssueAuditRequest struct {

	// Comment
	Comment string `json:"comment,omitempty"`

	// Custom tag values that are set for the issue.
	CustomTagAudit []*CustomTag `json:"customTagAudit"`

	// Issues to audit
	// Required: true
	Issues []*EntityStateIdentifier `json:"issues"`

	// Will suppress the issue
	Suppressed bool `json:"suppressed,omitempty"`

	// Username to assign
	User string `json:"user,omitempty"`
}

// Validate validates this issue audit request
func (m *IssueAuditRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomTagAudit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueAuditRequest) validateCustomTagAudit(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomTagAudit) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomTagAudit); i++ {
		if swag.IsZero(m.CustomTagAudit[i]) { // not required
			continue
		}

		if m.CustomTagAudit[i] != nil {
			if err := m.CustomTagAudit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customTagAudit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IssueAuditRequest) validateIssues(formats strfmt.Registry) error {

	if err := validate.Required("issues", "body", m.Issues); err != nil {
		return err
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueAuditRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueAuditRequest) UnmarshalBinary(b []byte) error {
	var res IssueAuditRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
