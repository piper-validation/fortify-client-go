// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueFileBugRequest Request to file the bug from the issues
// swagger:model IssueFileBugRequest
type IssueFileBugRequest struct {

	// Bug param to file the bug
	// Required: true
	BugParams []*BugParam `json:"bugParams"`

	// Filter by property
	// Required: true
	FilterBy []string `json:"filterBy"`

	// Filterset
	// Required: true
	FilterSet *string `json:"filterSet"`

	// Instance id of issues that need to be filed as bugs
	// Required: true
	IssueInstanceIds []string `json:"issueInstanceIds"`
}

// Validate validates this issue file bug request
func (m *IssueFileBugRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBugParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueInstanceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueFileBugRequest) validateBugParams(formats strfmt.Registry) error {

	if err := validate.Required("bugParams", "body", m.BugParams); err != nil {
		return err
	}

	for i := 0; i < len(m.BugParams); i++ {
		if swag.IsZero(m.BugParams[i]) { // not required
			continue
		}

		if m.BugParams[i] != nil {
			if err := m.BugParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bugParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IssueFileBugRequest) validateFilterBy(formats strfmt.Registry) error {

	if err := validate.Required("filterBy", "body", m.FilterBy); err != nil {
		return err
	}

	return nil
}

func (m *IssueFileBugRequest) validateFilterSet(formats strfmt.Registry) error {

	if err := validate.Required("filterSet", "body", m.FilterSet); err != nil {
		return err
	}

	return nil
}

func (m *IssueFileBugRequest) validateIssueInstanceIds(formats strfmt.Registry) error {

	if err := validate.Required("issueInstanceIds", "body", m.IssueInstanceIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueFileBugRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueFileBugRequest) UnmarshalBinary(b []byte) error {
	var res IssueFileBugRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
