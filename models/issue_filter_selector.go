// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueFilterSelector DTO object that holds the information about specific issue attribute that can be used for filtering issues list.
// swagger:model IssueFilterSelector
type IssueFilterSelector struct {

	// Selector set's description.
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Selector set's display name.
	// Required: true
	// Read Only: true
	DisplayName string `json:"displayName"`

	// Type of the issue attriute that can be used for ordering or filtering.
	// Required: true
	// Read Only: true
	// Enum: [UNDEFINED ISSUE EXTERNALLIST CUSTOMTAG HYBRIDTAG FOLDER]
	EntityType string `json:"entityType"`

	// If value of the selector can be chose from the list of predefined values, or if it can contain any value defined by user.
	// Required: true
	// Read Only: true
	// Enum: [LIST DECIMAL DATE TEXT]
	FilterSelectorType string `json:"filterSelectorType"`

	// Selector set's GUID.
	// Required: true
	// Read Only: true
	GUID string `json:"guid"`

	// Selector set's options.
	// Required: true
	// Read Only: true
	SelectorOptions []*SelectorOption `json:"selectorOptions"`

	// Selector set's value that must be sent to backend when this option is selected.
	// Required: true
	// Read Only: true
	Value string `json:"value"`
}

// Validate validates this issue filter selector
func (m *IssueFilterSelector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterSelectorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectorOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueFilterSelector) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *IssueFilterSelector) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.RequiredString("displayName", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

var issueFilterSelectorTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNDEFINED","ISSUE","EXTERNALLIST","CUSTOMTAG","HYBRIDTAG","FOLDER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueFilterSelectorTypeEntityTypePropEnum = append(issueFilterSelectorTypeEntityTypePropEnum, v)
	}
}

const (

	// IssueFilterSelectorEntityTypeUNDEFINED captures enum value "UNDEFINED"
	IssueFilterSelectorEntityTypeUNDEFINED string = "UNDEFINED"

	// IssueFilterSelectorEntityTypeISSUE captures enum value "ISSUE"
	IssueFilterSelectorEntityTypeISSUE string = "ISSUE"

	// IssueFilterSelectorEntityTypeEXTERNALLIST captures enum value "EXTERNALLIST"
	IssueFilterSelectorEntityTypeEXTERNALLIST string = "EXTERNALLIST"

	// IssueFilterSelectorEntityTypeCUSTOMTAG captures enum value "CUSTOMTAG"
	IssueFilterSelectorEntityTypeCUSTOMTAG string = "CUSTOMTAG"

	// IssueFilterSelectorEntityTypeHYBRIDTAG captures enum value "HYBRIDTAG"
	IssueFilterSelectorEntityTypeHYBRIDTAG string = "HYBRIDTAG"

	// IssueFilterSelectorEntityTypeFOLDER captures enum value "FOLDER"
	IssueFilterSelectorEntityTypeFOLDER string = "FOLDER"
)

// prop value enum
func (m *IssueFilterSelector) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, issueFilterSelectorTypeEntityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IssueFilterSelector) validateEntityType(formats strfmt.Registry) error {

	if err := validate.RequiredString("entityType", "body", string(m.EntityType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", m.EntityType); err != nil {
		return err
	}

	return nil
}

var issueFilterSelectorTypeFilterSelectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LIST","DECIMAL","DATE","TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueFilterSelectorTypeFilterSelectorTypePropEnum = append(issueFilterSelectorTypeFilterSelectorTypePropEnum, v)
	}
}

const (

	// IssueFilterSelectorFilterSelectorTypeLIST captures enum value "LIST"
	IssueFilterSelectorFilterSelectorTypeLIST string = "LIST"

	// IssueFilterSelectorFilterSelectorTypeDECIMAL captures enum value "DECIMAL"
	IssueFilterSelectorFilterSelectorTypeDECIMAL string = "DECIMAL"

	// IssueFilterSelectorFilterSelectorTypeDATE captures enum value "DATE"
	IssueFilterSelectorFilterSelectorTypeDATE string = "DATE"

	// IssueFilterSelectorFilterSelectorTypeTEXT captures enum value "TEXT"
	IssueFilterSelectorFilterSelectorTypeTEXT string = "TEXT"
)

// prop value enum
func (m *IssueFilterSelector) validateFilterSelectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, issueFilterSelectorTypeFilterSelectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IssueFilterSelector) validateFilterSelectorType(formats strfmt.Registry) error {

	if err := validate.RequiredString("filterSelectorType", "body", string(m.FilterSelectorType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateFilterSelectorTypeEnum("filterSelectorType", "body", m.FilterSelectorType); err != nil {
		return err
	}

	return nil
}

func (m *IssueFilterSelector) validateGUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("guid", "body", string(m.GUID)); err != nil {
		return err
	}

	return nil
}

func (m *IssueFilterSelector) validateSelectorOptions(formats strfmt.Registry) error {

	if err := validate.Required("selectorOptions", "body", m.SelectorOptions); err != nil {
		return err
	}

	for i := 0; i < len(m.SelectorOptions); i++ {
		if swag.IsZero(m.SelectorOptions[i]) { // not required
			continue
		}

		if m.SelectorOptions[i] != nil {
			if err := m.SelectorOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selectorOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IssueFilterSelector) validateValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("value", "body", string(m.Value)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueFilterSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueFilterSelector) UnmarshalBinary(b []byte) error {
	var res IssueFilterSelector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
