// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueStatistics Issue Statistics DTO object
// swagger:model Issue Statistics
type IssueStatistics struct {

	// Filter set identifier
	// Required: true
	FilterSetID *int64 `json:"filterSetId"`

	// Total number of hidden issues in the application version
	// Required: true
	HiddenCount *int32 `json:"hiddenCount"`

	// Number of displayable hidden issues in the application version
	// Required: true
	// Read Only: true
	HiddenDisplayableCount int32 `json:"hiddenDisplayableCount"`

	// Application version identifier
	// Required: true
	ProjectVersionID *int64 `json:"projectVersionId"`

	// Total number of removed issues
	// Required: true
	RemovedCount *int32 `json:"removedCount"`

	// Number of displayable removed issues  in the application version
	// Read Only: true
	RemovedDisplayableCount int32 `json:"removedDisplayableCount,omitempty"`

	// Total number of suppressed issues in the application version
	// Required: true
	SuppressedCount *int32 `json:"suppressedCount"`

	// Number of displayable suppressed issues in the application version
	// Read Only: true
	SuppressedDisplayableCount int32 `json:"suppressedDisplayableCount,omitempty"`
}

// Validate validates this issue statistics
func (m *IssueStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterSetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiddenCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiddenDisplayableCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuppressedCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueStatistics) validateFilterSetID(formats strfmt.Registry) error {

	if err := validate.Required("filterSetId", "body", m.FilterSetID); err != nil {
		return err
	}

	return nil
}

func (m *IssueStatistics) validateHiddenCount(formats strfmt.Registry) error {

	if err := validate.Required("hiddenCount", "body", m.HiddenCount); err != nil {
		return err
	}

	return nil
}

func (m *IssueStatistics) validateHiddenDisplayableCount(formats strfmt.Registry) error {

	if err := validate.Required("hiddenDisplayableCount", "body", int32(m.HiddenDisplayableCount)); err != nil {
		return err
	}

	return nil
}

func (m *IssueStatistics) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", m.ProjectVersionID); err != nil {
		return err
	}

	return nil
}

func (m *IssueStatistics) validateRemovedCount(formats strfmt.Registry) error {

	if err := validate.Required("removedCount", "body", m.RemovedCount); err != nil {
		return err
	}

	return nil
}

func (m *IssueStatistics) validateSuppressedCount(formats strfmt.Registry) error {

	if err := validate.Required("suppressedCount", "body", m.SuppressedCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueStatistics) UnmarshalBinary(b []byte) error {
	var res IssueStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
