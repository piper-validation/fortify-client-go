// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueTemplate Issue Template DTO object.
// swagger:model Issue Template
type IssueTemplate struct {

	// Deprecated - value is always null.
	CustomTagIds []int64 `json:"customTagIds"`

	// default template
	DefaultTemplate bool `json:"defaultTemplate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Issue template id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Is the template in use
	InUse bool `json:"inUse,omitempty"`

	// master attr Guid
	MasterAttrGUID string `json:"masterAttrGuid,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// object version
	ObjectVersion int32 `json:"objectVersion,omitempty"`

	// obsolete
	Obsolete bool `json:"obsolete,omitempty"`

	// original file name
	// Required: true
	OriginalFileName *string `json:"originalFileName"`

	// publish version
	PublishVersion int32 `json:"publishVersion,omitempty"`
}

// Validate validates this issue template
func (m *IssueTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalFileName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IssueTemplate) validateOriginalFileName(formats strfmt.Registry) error {

	if err := validate.Required("originalFileName", "body", m.OriginalFileName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueTemplate) UnmarshalBinary(b []byte) error {
	var res IssueTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
