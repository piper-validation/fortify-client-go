// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueUpdateTagRequest Request to update custom tag for the issues
// swagger:model IssueUpdateTagRequest
type IssueUpdateTagRequest struct {

	// Custom tag values that are set for the issue.
	// Required: true
	CustomTagAudit *CustomTag `json:"customTagAudit"`

	// Issues to audit
	// Required: true
	Issues []*EntityStateIdentifier `json:"issues"`
}

// Validate validates this issue update tag request
func (m *IssueUpdateTagRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomTagAudit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueUpdateTagRequest) validateCustomTagAudit(formats strfmt.Registry) error {

	if err := validate.Required("customTagAudit", "body", m.CustomTagAudit); err != nil {
		return err
	}

	if m.CustomTagAudit != nil {
		if err := m.CustomTagAudit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customTagAudit")
			}
			return err
		}
	}

	return nil
}

func (m *IssueUpdateTagRequest) validateIssues(formats strfmt.Registry) error {

	if err := validate.Required("issues", "body", m.Issues); err != nil {
		return err
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueUpdateTagRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueUpdateTagRequest) UnmarshalBinary(b []byte) error {
	var res IssueUpdateTagRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
