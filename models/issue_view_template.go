// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueViewTemplate Issue view template DTO object.
// swagger:model IssueViewTemplate
type IssueViewTemplate struct {

	// Issue data version for which template is created.
	DataVersion int64 `json:"dataVersion,omitempty"`

	// Template description.
	Description string `json:"description,omitempty"`

	// Engine type for which template is created.
	EngineType string `json:"engineType,omitempty"`

	// Unique identifier of the issue view template.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Id of the plugin meta data for which template is created.
	MetadataID int64 `json:"metadataId,omitempty"`

	// Object version.
	// Required: true
	ObjectVersion *int32 `json:"objectVersion"`

	// Actual template JSON data.
	TemplateData [][]TemplateItem `json:"templateData"`
}

// Validate validates this issue view template
func (m *IssueViewTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueViewTemplate) validateObjectVersion(formats strfmt.Registry) error {

	if err := validate.Required("objectVersion", "body", m.ObjectVersion); err != nil {
		return err
	}

	return nil
}

func (m *IssueViewTemplate) validateTemplateData(formats strfmt.Registry) error {

	if swag.IsZero(m.TemplateData) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplateData); i++ {

		for ii := 0; ii < len(m.TemplateData[i]); ii++ {

			if err := m.TemplateData[i][ii].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("templateData" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueViewTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueViewTemplate) UnmarshalBinary(b []byte) error {
	var res IssueViewTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
