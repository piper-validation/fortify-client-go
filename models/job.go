// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Job Job DTO object
// swagger:model Job
type Job struct {

	// Artifact name related to this job
	// Required: true
	ArtifactName *string `json:"artifactName"`

	// Set to true if job is cancelable
	// Required: true
	Cancellable *bool `json:"cancellable"`

	// Job execution order
	// Required: true
	ExecutionOrder *float64 `json:"executionOrder"`

	// End time of job
	// Required: true
	// Format: date-time
	FinishTime *strfmt.DateTime `json:"finishTime"`

	// Job class
	// Required: true
	JobClass *string `json:"jobClass"`

	// Job data
	// Required: true
	JobData interface{} `json:"jobData"`

	// Job group
	// Required: true
	JobGroup *string `json:"jobGroup"`

	// identifier of job
	// Read Only: true
	JobName string `json:"jobName,omitempty"`

	// Job priority
	// Required: true
	Priority *int32 `json:"priority"`

	// Application name related to this job
	// Required: true
	ProjectName *string `json:"projectName"`

	// Application version identifier related to this job
	// Required: true
	ProjectVersionID *int64 `json:"projectVersionId"`

	// Application version name related to this job
	// Required: true
	ProjectVersionName *string `json:"projectVersionName"`

	// Start time of job
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"startTime"`

	// Job State
	// Required: true
	// Enum: [PREPARED FINISHED RUNNING DEFERRED FAILED CANCELLED]
	State *string `json:"state"`

	// Name of user this job was created by
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancellable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateArtifactName(formats strfmt.Registry) error {

	if err := validate.Required("artifactName", "body", m.ArtifactName); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateCancellable(formats strfmt.Registry) error {

	if err := validate.Required("cancellable", "body", m.Cancellable); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateExecutionOrder(formats strfmt.Registry) error {

	if err := validate.Required("executionOrder", "body", m.ExecutionOrder); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateFinishTime(formats strfmt.Registry) error {

	if err := validate.Required("finishTime", "body", m.FinishTime); err != nil {
		return err
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateJobClass(formats strfmt.Registry) error {

	if err := validate.Required("jobClass", "body", m.JobClass); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateJobData(formats strfmt.Registry) error {

	if err := validate.Required("jobData", "body", m.JobData); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateJobGroup(formats strfmt.Registry) error {

	if err := validate.Required("jobGroup", "body", m.JobGroup); err != nil {
		return err
	}

	return nil
}

func (m *Job) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", m.ProjectVersionID); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateProjectVersionName(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionName", "body", m.ProjectVersionName); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PREPARED","FINISHED","RUNNING","DEFERRED","FAILED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobTypeStatePropEnum = append(jobTypeStatePropEnum, v)
	}
}

const (

	// JobStatePREPARED captures enum value "PREPARED"
	JobStatePREPARED string = "PREPARED"

	// JobStateFINISHED captures enum value "FINISHED"
	JobStateFINISHED string = "FINISHED"

	// JobStateRUNNING captures enum value "RUNNING"
	JobStateRUNNING string = "RUNNING"

	// JobStateDEFERRED captures enum value "DEFERRED"
	JobStateDEFERRED string = "DEFERRED"

	// JobStateFAILED captures enum value "FAILED"
	JobStateFAILED string = "FAILED"

	// JobStateCANCELLED captures enum value "CANCELLED"
	JobStateCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *Job) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Job) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
