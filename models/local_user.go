// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalUser Local User DTO object
// swagger:model Local User
type LocalUser struct {

	// admin password
	AdminPassword string `json:"adminPassword,omitempty"`

	// clear password
	ClearPassword string `json:"clearPassword,omitempty"`

	// Date user's account was frozen
	// Required: true
	// Format: date-time
	DateFrozen *strfmt.DateTime `json:"dateFrozen"`

	// email
	// Required: true
	Email *string `json:"email"`

	// Number of failed login attempts
	// Required: true
	FailedLoginAttempts *int32 `json:"failedLoginAttempts"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// ID required when referencing an existing Local User
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// True if user's password never expires
	// Required: true
	PasswordNeverExpire *bool `json:"passwordNeverExpire"`

	// Is user required to change password on first login?
	// Required: true
	RequirePasswordChange *bool `json:"requirePasswordChange"`

	// List of Roles assigned to user
	// Required: true
	Roles []*Role `json:"roles"`

	// True if user's account is locked
	// Required: true
	Suspended *bool `json:"suspended"`

	// user name
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this local user
func (m *LocalUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateFrozen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedLoginAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordNeverExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirePasswordChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspended(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalUser) validateDateFrozen(formats strfmt.Registry) error {

	if err := validate.Required("dateFrozen", "body", m.DateFrozen); err != nil {
		return err
	}

	if err := validate.FormatOf("dateFrozen", "body", "date-time", m.DateFrozen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateFailedLoginAttempts(formats strfmt.Registry) error {

	if err := validate.Required("failedLoginAttempts", "body", m.FailedLoginAttempts); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validatePasswordNeverExpire(formats strfmt.Registry) error {

	if err := validate.Required("passwordNeverExpire", "body", m.PasswordNeverExpire); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateRequirePasswordChange(formats strfmt.Registry) error {

	if err := validate.Required("requirePasswordChange", "body", m.RequirePasswordChange); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("roles", "body", m.Roles); err != nil {
		return err
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LocalUser) validateSuspended(formats strfmt.Registry) error {

	if err := validate.Required("suspended", "body", m.Suspended); err != nil {
		return err
	}

	return nil
}

func (m *LocalUser) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalUser) UnmarshalBinary(b []byte) error {
	var res LocalUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
