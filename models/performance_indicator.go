// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceIndicator Performance indicators enable you to combine variables into metrics that are
// normalized across application version boundaries
// swagger:model PerformanceIndicator
type PerformanceIndicator struct {

	// description
	Description string `json:"description,omitempty"`

	// equation
	// Required: true
	Equation *string `json:"equation"`

	// guid
	GUID string `json:"guid,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// in use
	InUse bool `json:"inUse,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// object version
	ObjectVersion int32 `json:"objectVersion,omitempty"`

	// publish version
	PublishVersion int32 `json:"publishVersion,omitempty"`

	// range
	// Required: true
	// Enum: [Integer Percent]
	Range *string `json:"range"`

	// type
	// Enum: [SYSTEM_DEFINED USER_DEFINED]
	Type string `json:"type,omitempty"`

	// variables
	Variables []*Variable `json:"variables"`
}

// Validate validates this performance indicator
func (m *PerformanceIndicator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEquation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceIndicator) validateEquation(formats strfmt.Registry) error {

	if err := validate.Required("equation", "body", m.Equation); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceIndicator) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var performanceIndicatorTypeRangePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Integer","Percent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceIndicatorTypeRangePropEnum = append(performanceIndicatorTypeRangePropEnum, v)
	}
}

const (

	// PerformanceIndicatorRangeInteger captures enum value "Integer"
	PerformanceIndicatorRangeInteger string = "Integer"

	// PerformanceIndicatorRangePercent captures enum value "Percent"
	PerformanceIndicatorRangePercent string = "Percent"
)

// prop value enum
func (m *PerformanceIndicator) validateRangeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, performanceIndicatorTypeRangePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceIndicator) validateRange(formats strfmt.Registry) error {

	if err := validate.Required("range", "body", m.Range); err != nil {
		return err
	}

	// value enum
	if err := m.validateRangeEnum("range", "body", *m.Range); err != nil {
		return err
	}

	return nil
}

var performanceIndicatorTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM_DEFINED","USER_DEFINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performanceIndicatorTypeTypePropEnum = append(performanceIndicatorTypeTypePropEnum, v)
	}
}

const (

	// PerformanceIndicatorTypeSYSTEMDEFINED captures enum value "SYSTEM_DEFINED"
	PerformanceIndicatorTypeSYSTEMDEFINED string = "SYSTEM_DEFINED"

	// PerformanceIndicatorTypeUSERDEFINED captures enum value "USER_DEFINED"
	PerformanceIndicatorTypeUSERDEFINED string = "USER_DEFINED"
)

// prop value enum
func (m *PerformanceIndicator) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, performanceIndicatorTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PerformanceIndicator) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PerformanceIndicator) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceIndicator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceIndicator) UnmarshalBinary(b []byte) error {
	var res PerformanceIndicator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
