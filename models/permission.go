// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission A permission in the server
// swagger:model Permission
type Permission struct {

	// assign by default
	AssignByDefault bool `json:"assignByDefault,omitempty"`

	// Set of permissions this permission requires
	// Required: true
	// Read Only: true
	DependsOnPermission []*Permission `json:"dependsOnPermission"`

	// Permission description
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Permission id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Permission name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Actions this permission is allowed to perform
	// Required: true
	// Read Only: true
	PermittedActions []string `json:"permittedActions"`

	// Flag is true if this permission can only be assigned to users, and not groups or organizations
	// Required: true
	// Read Only: true
	UserOnly bool `json:"userOnly"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependsOnPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermittedActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserOnly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permission) validateDependsOnPermission(formats strfmt.Registry) error {

	if err := validate.Required("dependsOnPermission", "body", m.DependsOnPermission); err != nil {
		return err
	}

	for i := 0; i < len(m.DependsOnPermission); i++ {
		if swag.IsZero(m.DependsOnPermission[i]) { // not required
			continue
		}

		if m.DependsOnPermission[i] != nil {
			if err := m.DependsOnPermission[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependsOnPermission" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Permission) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validatePermittedActions(formats strfmt.Registry) error {

	if err := validate.Required("permittedActions", "body", m.PermittedActions); err != nil {
		return err
	}

	return nil
}

func (m *Permission) validateUserOnly(formats strfmt.Registry) error {

	if err := validate.Required("userOnly", "body", bool(m.UserOnly)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
