// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectVersionCopyCurrentStateRequest Request to copy the current state from one application version to another
// swagger:model ProjectVersionCopyCurrentStateRequest
type ProjectVersionCopyCurrentStateRequest struct {

	// Will copy current state fpr
	// Required: true
	CopyCurrentStateFpr *bool `json:"copyCurrentStateFpr"`

	// Previous application version id
	// Required: true
	PreviousProjectVersionID *int64 `json:"previousProjectVersionId"`

	// Application version id
	// Required: true
	ProjectVersionID *int64 `json:"projectVersionId"`
}

// Validate validates this project version copy current state request
func (m *ProjectVersionCopyCurrentStateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyCurrentStateFpr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVersionCopyCurrentStateRequest) validateCopyCurrentStateFpr(formats strfmt.Registry) error {

	if err := validate.Required("copyCurrentStateFpr", "body", m.CopyCurrentStateFpr); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyCurrentStateRequest) validatePreviousProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("previousProjectVersionId", "body", m.PreviousProjectVersionID); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyCurrentStateRequest) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", m.ProjectVersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVersionCopyCurrentStateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVersionCopyCurrentStateRequest) UnmarshalBinary(b []byte) error {
	var res ProjectVersionCopyCurrentStateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
