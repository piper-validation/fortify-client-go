// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectVersionCopyPartialRequest Request to copy data selectively from one application version to another
// swagger:model ProjectVersionCopyPartialRequest
type ProjectVersionCopyPartialRequest struct {

	// Will copy analysis processing rules
	// Required: true
	CopyAnalysisProcessingRules *bool `json:"copyAnalysisProcessingRules"`

	// Will copy bugtracker configuration
	// Required: true
	CopyBugTrackerConfiguration *bool `json:"copyBugTrackerConfiguration"`

	// Will copy custom tags
	// Required: true
	CopyCustomTags *bool `json:"copyCustomTags"`

	// Previous application version id
	// Required: true
	PreviousProjectVersionID *int64 `json:"previousProjectVersionId"`

	// Application version id
	// Required: true
	ProjectVersionID *int64 `json:"projectVersionId"`
}

// Validate validates this project version copy partial request
func (m *ProjectVersionCopyPartialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyAnalysisProcessingRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyBugTrackerConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyCustomTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVersionCopyPartialRequest) validateCopyAnalysisProcessingRules(formats strfmt.Registry) error {

	if err := validate.Required("copyAnalysisProcessingRules", "body", m.CopyAnalysisProcessingRules); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyPartialRequest) validateCopyBugTrackerConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("copyBugTrackerConfiguration", "body", m.CopyBugTrackerConfiguration); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyPartialRequest) validateCopyCustomTags(formats strfmt.Registry) error {

	if err := validate.Required("copyCustomTags", "body", m.CopyCustomTags); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyPartialRequest) validatePreviousProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("previousProjectVersionId", "body", m.PreviousProjectVersionID); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionCopyPartialRequest) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", m.ProjectVersionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVersionCopyPartialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVersionCopyPartialRequest) UnmarshalBinary(b []byte) error {
	var res ProjectVersionCopyPartialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
