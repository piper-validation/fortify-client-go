// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectVersionIssueGroup Application version issue group DTO object
// swagger:model Project version issue group
type ProjectVersionIssueGroup struct {

	// Audited issue count
	// Required: true
	AuditedCount *int32 `json:"auditedCount"`

	// Issue group name not containing count, dashes etc
	// Required: true
	CleanName *string `json:"cleanName"`

	// Identifier
	// Required: true
	ID *string `json:"id"`

	// Issue group name
	// Required: true
	Name *string `json:"name"`

	// Issue total count
	// Required: true
	TotalCount *int32 `json:"totalCount"`

	// Visible issues count
	// Required: true
	VisibleCount *int32 `json:"visibleCount"`
}

// Validate validates this project version issue group
func (m *ProjectVersionIssueGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCleanName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibleCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVersionIssueGroup) validateAuditedCount(formats strfmt.Registry) error {

	if err := validate.Required("auditedCount", "body", m.AuditedCount); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionIssueGroup) validateCleanName(formats strfmt.Registry) error {

	if err := validate.Required("cleanName", "body", m.CleanName); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionIssueGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionIssueGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionIssueGroup) validateTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("totalCount", "body", m.TotalCount); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionIssueGroup) validateVisibleCount(formats strfmt.Registry) error {

	if err := validate.Required("visibleCount", "body", m.VisibleCount); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVersionIssueGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVersionIssueGroup) UnmarshalBinary(b []byte) error {
	var res ProjectVersionIssueGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
