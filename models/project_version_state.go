// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectVersionState Application Version State DTO object
// swagger:model Project Version State
type ProjectVersionState struct {

	// analysis results exist
	// Required: true
	AnalysisResultsExist *bool `json:"analysisResultsExist"`

	// analysis upload enabled
	// Required: true
	AnalysisUploadEnabled *bool `json:"analysisUploadEnabled"`

	// attention required
	// Required: true
	AttentionRequired *bool `json:"attentionRequired"`

	// audit enabled
	// Required: true
	AuditEnabled *bool `json:"auditEnabled"`

	// batch bug submission exists
	// Required: true
	BatchBugSubmissionExists *bool `json:"batchBugSubmissionExists"`

	// False if application version is in an incomplete state
	// Required: true
	Committed *bool `json:"committed"`

	// critical priority issue count delta
	// Required: true
	CriticalPriorityIssueCountDelta *int32 `json:"criticalPriorityIssueCountDelta"`

	// delta period
	// Required: true
	DeltaPeriod *int32 `json:"deltaPeriod"`

	// extra message
	// Required: true
	ExtraMessage *string `json:"extraMessage"`

	// has custom issues
	// Required: true
	HasCustomIssues *bool `json:"hasCustomIssues"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// issue count delta
	// Required: true
	IssueCountDelta *int32 `json:"issueCountDelta"`

	// last fpr upload date
	// Required: true
	// Format: date-time
	LastFprUploadDate *strfmt.DateTime `json:"lastFprUploadDate"`

	// metric evaluation date
	// Required: true
	// Format: date-time
	MetricEvaluationDate *strfmt.DateTime `json:"metricEvaluationDate"`

	// percent audited delta
	// Required: true
	PercentAuditedDelta *float32 `json:"percentAuditedDelta"`

	// percent critical priority issues audited delta
	// Required: true
	PercentCriticalPriorityIssuesAuditedDelta *float32 `json:"percentCriticalPriorityIssuesAuditedDelta"`
}

// Validate validates this project version state
func (m *ProjectVersionState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalysisResultsExist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnalysisUploadEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttentionRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchBugSubmissionExists(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriticalPriorityIssueCountDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeltaPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasCustomIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueCountDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastFprUploadDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricEvaluationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentAuditedDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePercentCriticalPriorityIssuesAuditedDelta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVersionState) validateAnalysisResultsExist(formats strfmt.Registry) error {

	if err := validate.Required("analysisResultsExist", "body", m.AnalysisResultsExist); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateAnalysisUploadEnabled(formats strfmt.Registry) error {

	if err := validate.Required("analysisUploadEnabled", "body", m.AnalysisUploadEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateAttentionRequired(formats strfmt.Registry) error {

	if err := validate.Required("attentionRequired", "body", m.AttentionRequired); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateAuditEnabled(formats strfmt.Registry) error {

	if err := validate.Required("auditEnabled", "body", m.AuditEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateBatchBugSubmissionExists(formats strfmt.Registry) error {

	if err := validate.Required("batchBugSubmissionExists", "body", m.BatchBugSubmissionExists); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateCommitted(formats strfmt.Registry) error {

	if err := validate.Required("committed", "body", m.Committed); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateCriticalPriorityIssueCountDelta(formats strfmt.Registry) error {

	if err := validate.Required("criticalPriorityIssueCountDelta", "body", m.CriticalPriorityIssueCountDelta); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateDeltaPeriod(formats strfmt.Registry) error {

	if err := validate.Required("deltaPeriod", "body", m.DeltaPeriod); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateExtraMessage(formats strfmt.Registry) error {

	if err := validate.Required("extraMessage", "body", m.ExtraMessage); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateHasCustomIssues(formats strfmt.Registry) error {

	if err := validate.Required("hasCustomIssues", "body", m.HasCustomIssues); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateIssueCountDelta(formats strfmt.Registry) error {

	if err := validate.Required("issueCountDelta", "body", m.IssueCountDelta); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateLastFprUploadDate(formats strfmt.Registry) error {

	if err := validate.Required("lastFprUploadDate", "body", m.LastFprUploadDate); err != nil {
		return err
	}

	if err := validate.FormatOf("lastFprUploadDate", "body", "date-time", m.LastFprUploadDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validateMetricEvaluationDate(formats strfmt.Registry) error {

	if err := validate.Required("metricEvaluationDate", "body", m.MetricEvaluationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("metricEvaluationDate", "body", "date-time", m.MetricEvaluationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validatePercentAuditedDelta(formats strfmt.Registry) error {

	if err := validate.Required("percentAuditedDelta", "body", m.PercentAuditedDelta); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionState) validatePercentCriticalPriorityIssuesAuditedDelta(formats strfmt.Registry) error {

	if err := validate.Required("percentCriticalPriorityIssuesAuditedDelta", "body", m.PercentCriticalPriorityIssuesAuditedDelta); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVersionState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVersionState) UnmarshalBinary(b []byte) error {
	var res ProjectVersionState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
