// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectVersionTestRequest Request to check whether a application version already exists in the system
// swagger:model ProjectVersionTestRequest
type ProjectVersionTestRequest struct {

	// Application name to search
	// Required: true
	ProjectName *string `json:"projectName"`

	// Application version name to search
	// Required: true
	ProjectVersionName *string `json:"projectVersionName"`
}

// Validate validates this project version test request
func (m *ProjectVersionTestRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectVersionTestRequest) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *ProjectVersionTestRequest) validateProjectVersionName(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionName", "body", m.ProjectVersionName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectVersionTestRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectVersionTestRequest) UnmarshalBinary(b []byte) error {
	var res ProjectVersionTestRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
