// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportParameterOption Report Parameter Option DTO object
// swagger:model Report Parameter Option
type ReportParameterOption struct {

	// Indicates whether option is the default value
	DefaultValue bool `json:"defaultValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Report parameter option display value
	// Required: true
	DisplayValue *string `json:"displayValue"`

	// id
	ID int64 `json:"id,omitempty"`

	// Order in which the parameter option should appear
	Order int32 `json:"order,omitempty"`

	// Report parameter option report value
	// Required: true
	ReportValue *string `json:"reportValue"`
}

// Validate validates this report parameter option
func (m *ReportParameterOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportParameterOption) validateDisplayValue(formats strfmt.Registry) error {

	if err := validate.Required("displayValue", "body", m.DisplayValue); err != nil {
		return err
	}

	return nil
}

func (m *ReportParameterOption) validateReportValue(formats strfmt.Registry) error {

	if err := validate.Required("reportValue", "body", m.ReportValue); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportParameterOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportParameterOption) UnmarshalBinary(b []byte) error {
	var res ReportParameterOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
