// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponsibilityAssignment A Responsibility that a user in SSC is assigned to. There are currently a few responsibilities like Project Manager, Security Manager, Developer etc per Application.
// swagger:model Responsibility Assignment
type ResponsibilityAssignment struct {

	// Email of user assigned to responsibility
	// Required: true
	Email *string `json:"email"`

	// First name of user assigned to responsibility
	// Required: true
	FirstName *string `json:"firstName"`

	// Last name of user assigned to responsibility
	// Required: true
	LastName *string `json:"lastName"`

	// Responsibility description
	// Required: true
	ResponsibilityDescription *string `json:"responsibilityDescription"`

	// Responsibility global unique identifier
	// Required: true
	ResponsibilityGUID *string `json:"responsibilityGuid"`

	// Responsibility name
	// Required: true
	ResponsibilityName *string `json:"responsibilityName"`

	// ID of user assigned to responsibility
	// Required: true
	UserID *int64 `json:"userId"`

	// Name of user assigned to responsibility
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this responsibility assignment
func (m *ResponsibilityAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponsibilityDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponsibilityGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponsibilityName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsibilityAssignment) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateResponsibilityDescription(formats strfmt.Registry) error {

	if err := validate.Required("responsibilityDescription", "body", m.ResponsibilityDescription); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateResponsibilityGUID(formats strfmt.Registry) error {

	if err := validate.Required("responsibilityGuid", "body", m.ResponsibilityGUID); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateResponsibilityName(formats strfmt.Registry) error {

	if err := validate.Required("responsibilityName", "body", m.ResponsibilityName); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *ResponsibilityAssignment) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponsibilityAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsibilityAssignment) UnmarshalBinary(b []byte) error {
	var res ResponsibilityAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
