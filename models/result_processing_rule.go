// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultProcessingRule Rule to be checked when processing an FPR
// swagger:model Result processing rule
type ResultProcessingRule struct {

	// display name
	// Required: true
	// Read Only: true
	DisplayName string `json:"displayName"`

	// displayable
	// Required: true
	// Read Only: true
	Displayable bool `json:"displayable"`

	// enabled
	// Required: true
	// Read Only: true
	Enabled bool `json:"enabled"`

	// identifier
	// Required: true
	// Read Only: true
	Identifier string `json:"identifier"`
}

// Validate validates this result processing rule
func (m *ResultProcessingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultProcessingRule) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.RequiredString("displayName", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

func (m *ResultProcessingRule) validateDisplayable(formats strfmt.Registry) error {

	if err := validate.Required("displayable", "body", bool(m.Displayable)); err != nil {
		return err
	}

	return nil
}

func (m *ResultProcessingRule) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", bool(m.Enabled)); err != nil {
		return err
	}

	return nil
}

func (m *ResultProcessingRule) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.RequiredString("identifier", "body", string(m.Identifier)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultProcessingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultProcessingRule) UnmarshalBinary(b []byte) error {
	var res ResultProcessingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
