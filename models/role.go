// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Role Role used by the server to determine user permissions
// swagger:model Role
type Role struct {

	// True if a user with this Role has access to all Application Versions
	// Required: true
	AllApplicationRole *bool `json:"allApplicationRole"`

	// True if this Role is currently assigned to entities that are not users(groups, organizations, etc.)
	// Required: true
	AssignedToNonUsers *bool `json:"assignedToNonUsers"`

	// True if this Role is a default Fortify Role
	// Required: true
	BuiltIn *bool `json:"builtIn"`

	// default
	Default bool `json:"default,omitempty"`

	// deletable
	Deletable bool `json:"deletable,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object version
	ObjectVersion int32 `json:"objectVersion,omitempty"`

	// Ids of the permissions this Role has
	// Required: true
	PermissionIds []string `json:"permissionIds"`

	// publish version
	PublishVersion int32 `json:"publishVersion,omitempty"`

	// True if this Role can only be assigned to entities that are users
	// Required: true
	UserOnly *bool `json:"userOnly"`
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllApplicationRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedToNonUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuiltIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserOnly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Role) validateAllApplicationRole(formats strfmt.Registry) error {

	if err := validate.Required("allApplicationRole", "body", m.AllApplicationRole); err != nil {
		return err
	}

	return nil
}

func (m *Role) validateAssignedToNonUsers(formats strfmt.Registry) error {

	if err := validate.Required("assignedToNonUsers", "body", m.AssignedToNonUsers); err != nil {
		return err
	}

	return nil
}

func (m *Role) validateBuiltIn(formats strfmt.Registry) error {

	if err := validate.Required("builtIn", "body", m.BuiltIn); err != nil {
		return err
	}

	return nil
}

func (m *Role) validatePermissionIds(formats strfmt.Registry) error {

	if err := validate.Required("permissionIds", "body", m.PermissionIds); err != nil {
		return err
	}

	return nil
}

func (m *Role) validateUserOnly(formats strfmt.Registry) error {

	if err := validate.Required("userOnly", "body", m.UserOnly); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Role) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Role) UnmarshalBinary(b []byte) error {
	var res Role
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
