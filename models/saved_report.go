// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SavedReport Saved Report DTO object
// swagger:model Saved Report
type SavedReport struct {

	// embed
	Embed *EmbeddedReportDefinition `json:"_embed,omitempty"`

	// The Fortify User or Ldap User associated with the report
	AuthEntity *ReportAuthEntity `json:"authEntity,omitempty"`

	// Saved report output format
	// Required: true
	// Enum: [PDF DOC XLS]
	Format *string `json:"format"`

	// Saved report output format default text
	FormatDefaultText string `json:"formatDefaultText,omitempty"`

	// Generation date
	// Format: date-time
	GenerationDate Iso8601MilliDateTime `json:"generationDate,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// List of report parameters
	InputReportParameters []*InputReportParameter `json:"inputReportParameters"`

	// Indicates whether saved report is published
	IsPublished bool `json:"isPublished,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Saved report notes
	Note string `json:"note,omitempty"`

	// List of application versions
	// Required: true
	Projects []*ReportProject `json:"projects"`

	// published
	Published bool `json:"published,omitempty"`

	// Report definition identifier
	// Required: true
	ReportDefinitionID *int64 `json:"reportDefinitionId"`

	// Count of report applications
	ReportProjectsCount int32 `json:"reportProjectsCount,omitempty"`

	// Saved report status
	// Enum: [Scheduled for Processing Processing Processing Complete Error Processing]
	Status string `json:"status,omitempty"`

	// Saved report status default text
	StatusDefaultText string `json:"statusDefaultText,omitempty"`

	// Saved report type
	// Required: true
	// Enum: [PROJECT SSA_PROJECT SSA_PORTFOLIO PORTFOLIO COMPLIANCE ISSUE RUNTIME_REPORTS]
	Type *string `json:"type"`

	// Saved report type default text
	TypeDefaultText string `json:"typeDefaultText,omitempty"`
}

// Validate validates this saved report
func (m *SavedReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputReportParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SavedReport) validateEmbed(formats strfmt.Registry) error {

	if swag.IsZero(m.Embed) { // not required
		return nil
	}

	if m.Embed != nil {
		if err := m.Embed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embed")
			}
			return err
		}
	}

	return nil
}

func (m *SavedReport) validateAuthEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthEntity) { // not required
		return nil
	}

	if m.AuthEntity != nil {
		if err := m.AuthEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authEntity")
			}
			return err
		}
	}

	return nil
}

var savedReportTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PDF","DOC","XLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		savedReportTypeFormatPropEnum = append(savedReportTypeFormatPropEnum, v)
	}
}

const (

	// SavedReportFormatPDF captures enum value "PDF"
	SavedReportFormatPDF string = "PDF"

	// SavedReportFormatDOC captures enum value "DOC"
	SavedReportFormatDOC string = "DOC"

	// SavedReportFormatXLS captures enum value "XLS"
	SavedReportFormatXLS string = "XLS"
)

// prop value enum
func (m *SavedReport) validateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, savedReportTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SavedReport) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *SavedReport) validateGenerationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.GenerationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("generationDate", "body", "date-time", m.GenerationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SavedReport) validateInputReportParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.InputReportParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.InputReportParameters); i++ {
		if swag.IsZero(m.InputReportParameters[i]) { // not required
			continue
		}

		if m.InputReportParameters[i] != nil {
			if err := m.InputReportParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputReportParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SavedReport) validateProjects(formats strfmt.Registry) error {

	if err := validate.Required("projects", "body", m.Projects); err != nil {
		return err
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SavedReport) validateReportDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("reportDefinitionId", "body", m.ReportDefinitionID); err != nil {
		return err
	}

	return nil
}

var savedReportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Scheduled for Processing","Processing","Processing Complete","Error Processing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		savedReportTypeStatusPropEnum = append(savedReportTypeStatusPropEnum, v)
	}
}

const (

	// SavedReportStatusScheduledForProcessing captures enum value "Scheduled for Processing"
	SavedReportStatusScheduledForProcessing string = "Scheduled for Processing"

	// SavedReportStatusProcessing captures enum value "Processing"
	SavedReportStatusProcessing string = "Processing"

	// SavedReportStatusProcessingComplete captures enum value "Processing Complete"
	SavedReportStatusProcessingComplete string = "Processing Complete"

	// SavedReportStatusErrorProcessing captures enum value "Error Processing"
	SavedReportStatusErrorProcessing string = "Error Processing"
)

// prop value enum
func (m *SavedReport) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, savedReportTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SavedReport) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var savedReportTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROJECT","SSA_PROJECT","SSA_PORTFOLIO","PORTFOLIO","COMPLIANCE","ISSUE","RUNTIME_REPORTS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		savedReportTypeTypePropEnum = append(savedReportTypeTypePropEnum, v)
	}
}

const (

	// SavedReportTypePROJECT captures enum value "PROJECT"
	SavedReportTypePROJECT string = "PROJECT"

	// SavedReportTypeSSAPROJECT captures enum value "SSA_PROJECT"
	SavedReportTypeSSAPROJECT string = "SSA_PROJECT"

	// SavedReportTypeSSAPORTFOLIO captures enum value "SSA_PORTFOLIO"
	SavedReportTypeSSAPORTFOLIO string = "SSA_PORTFOLIO"

	// SavedReportTypePORTFOLIO captures enum value "PORTFOLIO"
	SavedReportTypePORTFOLIO string = "PORTFOLIO"

	// SavedReportTypeCOMPLIANCE captures enum value "COMPLIANCE"
	SavedReportTypeCOMPLIANCE string = "COMPLIANCE"

	// SavedReportTypeISSUE captures enum value "ISSUE"
	SavedReportTypeISSUE string = "ISSUE"

	// SavedReportTypeRUNTIMEREPORTS captures enum value "RUNTIME_REPORTS"
	SavedReportTypeRUNTIMEREPORTS string = "RUNTIME_REPORTS"
)

// prop value enum
func (m *SavedReport) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, savedReportTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SavedReport) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SavedReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SavedReport) UnmarshalBinary(b []byte) error {
	var res SavedReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
