// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScanError error reported by SCA during the scan
// swagger:model scan error
type ScanError struct {

	// error code
	// Required: true
	// Read Only: true
	ErrorCode string `json:"errorCode"`

	// error description
	// Required: true
	// Read Only: true
	ErrorDescription string `json:"errorDescription"`

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// id of scan associated with the error
	// Required: true
	// Read Only: true
	ScanID int64 `json:"scanId"`
}

// Validate validates this scan error
func (m *ScanError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScanError) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.RequiredString("errorCode", "body", string(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *ScanError) validateErrorDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("errorDescription", "body", string(m.ErrorDescription)); err != nil {
		return err
	}

	return nil
}

func (m *ScanError) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ScanError) validateScanID(formats strfmt.Registry) error {

	if err := validate.Required("scanId", "body", int64(m.ScanID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScanError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScanError) UnmarshalBinary(b []byte) error {
	var res ScanError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
