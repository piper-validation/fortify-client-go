// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelectorOption Single option of IssueFilterSelector. Every filtering option is associated with some specific issue attribute's value.
// swagger:model SelectorOption
type SelectorOption struct {

	// Option's display name.
	// Required: true
	// Read Only: true
	DisplayName string `json:"displayName"`

	// Option's unique GUID.
	// Required: true
	// Read Only: true
	GUID string `json:"guid"`

	// Option's value that must be sent to backend when this option is selected.
	// Required: true
	// Read Only: true
	Value string `json:"value"`
}

// Validate validates this selector option
func (m *SelectorOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectorOption) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.RequiredString("displayName", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

func (m *SelectorOption) validateGUID(formats strfmt.Registry) error {

	if err := validate.RequiredString("guid", "body", string(m.GUID)); err != nil {
		return err
	}

	return nil
}

func (m *SelectorOption) validateValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("value", "body", string(m.Value)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelectorOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectorOption) UnmarshalBinary(b []byte) error {
	var res SelectorOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
