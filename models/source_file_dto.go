// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceFileDto Source file content where vulnerabilities were found.
// swagger:model SourceFileDto
type SourceFileDto struct {

	// Source file checksum.
	// Required: true
	// Read Only: true
	Checksum string `json:"checksum"`

	// Source file encoding.
	// Required: true
	// Read Only: true
	Encoding string `json:"encoding"`

	// Scanned source file content.
	// Required: true
	// Read Only: true
	FileContent string `json:"fileContent"`

	// Full path to source file on the machine where scan was performed.
	// Required: true
	// Read Only: true
	FilePath string `json:"filePath"`

	// Source file programming language name.
	// Required: true
	// Read Only: true
	LanguageName string `json:"languageName"`

	// Application version identifier that contains this source file.
	// Required: true
	// Read Only: true
	ProjectVersionID int64 `json:"projectVersionId"`
}

// Validate validates this source file dto
func (m *SourceFileDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceFileDto) validateChecksum(formats strfmt.Registry) error {

	if err := validate.RequiredString("checksum", "body", string(m.Checksum)); err != nil {
		return err
	}

	return nil
}

func (m *SourceFileDto) validateEncoding(formats strfmt.Registry) error {

	if err := validate.RequiredString("encoding", "body", string(m.Encoding)); err != nil {
		return err
	}

	return nil
}

func (m *SourceFileDto) validateFileContent(formats strfmt.Registry) error {

	if err := validate.RequiredString("fileContent", "body", string(m.FileContent)); err != nil {
		return err
	}

	return nil
}

func (m *SourceFileDto) validateFilePath(formats strfmt.Registry) error {

	if err := validate.RequiredString("filePath", "body", string(m.FilePath)); err != nil {
		return err
	}

	return nil
}

func (m *SourceFileDto) validateLanguageName(formats strfmt.Registry) error {

	if err := validate.RequiredString("languageName", "body", string(m.LanguageName)); err != nil {
		return err
	}

	return nil
}

func (m *SourceFileDto) validateProjectVersionID(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionId", "body", int64(m.ProjectVersionID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SourceFileDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceFileDto) UnmarshalBinary(b []byte) error {
	var res SourceFileDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
