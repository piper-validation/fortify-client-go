// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPreferences Object containing user preferences such as date/time format
// swagger:model User preferences
type UserPreferences struct {

	// Preferred date format
	// Required: true
	DateFormat *string `json:"dateFormat"`

	// User email
	// Required: true
	Email *string `json:"email"`

	// Receive email alerts if set to true
	// Required: true
	EmailAlerts *bool `json:"emailAlerts"`

	// Monitors all runtime applications if set to true
	// Required: true
	MonitorAllRuntimeApps *bool `json:"monitorAllRuntimeApps"`

	// Enum for ProjectVersionListMode with values DEFAULT, CUSTOM, ALL
	// Required: true
	ProjectVersionListMode *string `json:"projectVersionListMode"`

	// Receive runtime alerts if set to true
	// Required: true
	ReceiveRuntimeAlerts *bool `json:"receiveRuntimeAlerts"`

	// Runtime alert definition identifier
	// Required: true
	RuntimeAlertDefinitionID *int64 `json:"runtimeAlertDefinitionId"`

	// Preferred time format
	// Required: true
	TimeFormat *string `json:"timeFormat"`

	// User name
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this user preferences
func (m *UserPreferences) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorAllRuntimeApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVersionListMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiveRuntimeAlerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeAlertDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPreferences) validateDateFormat(formats strfmt.Registry) error {

	if err := validate.Required("dateFormat", "body", m.DateFormat); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateEmailAlerts(formats strfmt.Registry) error {

	if err := validate.Required("emailAlerts", "body", m.EmailAlerts); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateMonitorAllRuntimeApps(formats strfmt.Registry) error {

	if err := validate.Required("monitorAllRuntimeApps", "body", m.MonitorAllRuntimeApps); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateProjectVersionListMode(formats strfmt.Registry) error {

	if err := validate.Required("projectVersionListMode", "body", m.ProjectVersionListMode); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateReceiveRuntimeAlerts(formats strfmt.Registry) error {

	if err := validate.Required("receiveRuntimeAlerts", "body", m.ReceiveRuntimeAlerts); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateRuntimeAlertDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("runtimeAlertDefinitionId", "body", m.RuntimeAlertDefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateTimeFormat(formats strfmt.Registry) error {

	if err := validate.Required("timeFormat", "body", m.TimeFormat); err != nil {
		return err
	}

	return nil
}

func (m *UserPreferences) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPreferences) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPreferences) UnmarshalBinary(b []byte) error {
	var res UserPreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
