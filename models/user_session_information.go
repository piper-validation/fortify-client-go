// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserSessionInformation Object containing user session information
// swagger:model User session information
type UserSessionInformation struct {

	// Application context path
	// Required: true
	ApplicationContextPath *string `json:"applicationContextPath"`

	// Cloud scan configuration
	// Required: true
	CloudScanConfig *CloudScanConfig `json:"cloudScanConfig"`

	// Set to true if collaboration module is enabled
	// Required: true
	CollabModuleEnabled *bool `json:"collabModuleEnabled"`

	// Display user details if set to true
	// Required: true
	DisplayUserDetails *bool `json:"displayUserDetails"`

	// User email
	// Required: true
	Email *string `json:"email"`

	// User first name
	// Required: true
	FirstName *string `json:"firstName"`

	// Fortify user type eg. LOCAL
	// Required: true
	FortifyUserType *string `json:"fortifyUserType"`

	// User last name
	// Required: true
	LastName *string `json:"lastName"`

	// List of license capabilities
	// Required: true
	LicenseCapabilities []*LicenseCapability `json:"licenseCapabilities"`

	// Set to true if on demand mode is enabled
	// Required: true
	OnDemandMode *bool `json:"onDemandMode"`

	// User permissions
	// Required: true
	Permissions []string `json:"permissions"`

	// User preferences
	// Required: true
	Preferences *UserPreferences `json:"preferences"`

	// User roles
	// Required: true
	Roles []*Role `json:"roles"`

	// User session id
	// Required: true
	SessionID *string `json:"sessionId"`

	// User Photo
	// Required: true
	UserPhoto *UserPhoto `json:"userPhoto"`

	// User Type integer eg. 0 for Local
	// Required: true
	UserType *int32 `json:"userType"`

	// User name
	// Required: true
	Username *string `json:"username"`

	// Web application version
	// Required: true
	WebappVersion *string `json:"webappVersion"`

	// WebInspect enterprise configuration
	// Required: true
	WieConfig *WIEConfiguration `json:"wieConfig"`
}

// Validate validates this user session information
func (m *UserSessionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationContextPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudScanConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollabModuleEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayUserDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFortifyUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemandMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPhoto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebappVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWieConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSessionInformation) validateApplicationContextPath(formats strfmt.Registry) error {

	if err := validate.Required("applicationContextPath", "body", m.ApplicationContextPath); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateCloudScanConfig(formats strfmt.Registry) error {

	if err := validate.Required("cloudScanConfig", "body", m.CloudScanConfig); err != nil {
		return err
	}

	if m.CloudScanConfig != nil {
		if err := m.CloudScanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudScanConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UserSessionInformation) validateCollabModuleEnabled(formats strfmt.Registry) error {

	if err := validate.Required("collabModuleEnabled", "body", m.CollabModuleEnabled); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateDisplayUserDetails(formats strfmt.Registry) error {

	if err := validate.Required("displayUserDetails", "body", m.DisplayUserDetails); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateFortifyUserType(formats strfmt.Registry) error {

	if err := validate.Required("fortifyUserType", "body", m.FortifyUserType); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateLicenseCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("licenseCapabilities", "body", m.LicenseCapabilities); err != nil {
		return err
	}

	for i := 0; i < len(m.LicenseCapabilities); i++ {
		if swag.IsZero(m.LicenseCapabilities[i]) { // not required
			continue
		}

		if m.LicenseCapabilities[i] != nil {
			if err := m.LicenseCapabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenseCapabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserSessionInformation) validateOnDemandMode(formats strfmt.Registry) error {

	if err := validate.Required("onDemandMode", "body", m.OnDemandMode); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validatePreferences(formats strfmt.Registry) error {

	if err := validate.Required("preferences", "body", m.Preferences); err != nil {
		return err
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *UserSessionInformation) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("roles", "body", m.Roles); err != nil {
		return err
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserSessionInformation) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateUserPhoto(formats strfmt.Registry) error {

	if err := validate.Required("userPhoto", "body", m.UserPhoto); err != nil {
		return err
	}

	if m.UserPhoto != nil {
		if err := m.UserPhoto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userPhoto")
			}
			return err
		}
	}

	return nil
}

func (m *UserSessionInformation) validateUserType(formats strfmt.Registry) error {

	if err := validate.Required("userType", "body", m.UserType); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateWebappVersion(formats strfmt.Registry) error {

	if err := validate.Required("webappVersion", "body", m.WebappVersion); err != nil {
		return err
	}

	return nil
}

func (m *UserSessionInformation) validateWieConfig(formats strfmt.Registry) error {

	if err := validate.Required("wieConfig", "body", m.WieConfig); err != nil {
		return err
	}

	if m.WieConfig != nil {
		if err := m.WieConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wieConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserSessionInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSessionInformation) UnmarshalBinary(b []byte) error {
	var res UserSessionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
